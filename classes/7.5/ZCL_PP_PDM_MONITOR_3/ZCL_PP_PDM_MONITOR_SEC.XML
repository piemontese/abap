<?xml version="1.0"?><CLASS_ROOT><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Classe appoggio per ZCL_PP_PDM_MONITOR</DESCRIPT><UUID>AFBWoHG+Htal0x2FV0ObHw==</UUID><CATEGORY>00</CATEGORY><EXPOSURE>2</EXPOSURE><STATE>1</STATE><RELEASE>0</RELEASE><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><CHGDANYON>0000-00-00</CHGDANYON><CLSFINAL>X</CLSFINAL><CLSCCINCL>X</CLSCCINCL><FIXPT>X</FIXPT><UNICODE>X</UNICODE><R3RELEASE>750</R3RELEASE><CLSBCCAT>00</CLSBCCAT><DURATION_TYPE>0</DURATION_TYPE><RISK_LEVEL>0</RISK_LEVEL><ATTRIBUTES><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CV_TIPOFILE</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Tipo file</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><ATTDECLTYP>2</ATTDECLTYP><ATTVALUE>&apos;21&apos;</ATTVALUE><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZINTER_TIPOFILE</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>750</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CV_ROOTNAME</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Rootname</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><ATTDECLTYP>2</ATTDECLTYP><ATTVALUE>&apos;K1505175&apos;</ATTVALUE><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZPP_PDM_ROOTNAME</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>750</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>GV_ROOTNAME</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Rootname</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-02</CHANGEDON><ATTDECLTYP>1</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZPP_PDM_ROOTNAME</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>GS_ALV_DATA</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-07</CHANGEDON><ATTDECLTYP>1</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_ALV_DATA</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>GS_TREE_DATA</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>3</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-07</CHANGEDON><ATTDECLTYP>1</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_TREE_DATA</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>GS_TREE_DATA_SEL</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>4</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-07</CHANGEDON><ATTDECLTYP>1</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_TREE_DATA_SEL</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>GS_DATA_BOM</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>5</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-07</CHANGEDON><ATTDECLTYP>1</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_DATA_BOM</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><TYPESRC_LENG>0</TYPESRC_LENG></item></ATTRIBUTES><METHODS><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_COMPONENTS</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Modifica componenti OdP</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-10-20</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>1</MTDDECLTYP><R3RELEASE>750</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_ALV_DATA</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Modifica dati riga alv</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-10-20</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>1</MTDDECLTYP><R3RELEASE>750</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM_OLD</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Imposta componente come fantasma</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-11-18</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>1</MTDDECLTYP><R3RELEASE>750</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Imposta componente come fantasma</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>4</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-11-18</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>1</MTDDECLTYP><R3RELEASE>750</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CANCEL</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Storno dell&apos;accettato</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>5</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-11-18</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>1</MTDDECLTYP><R3RELEASE>750</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_DATA</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Popola strutture con dati test</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-02</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>1</MTDDECLTYP><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item></METHODS><EVENTS/><TYPES><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>TY_S_ZTB_MATNR</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Struttura ZTB_MATNR per RFC ZPP_CHANGE_RESB</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>0</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-12-02</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><TYPTYPE>1</TYPTYPE><TYPE>ZTB_MATNR</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>750</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>TY_T_ZTB_MATNR</CMPNAME><VERSION>1</VERSION><LANGU>I</LANGU><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-12-02</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><TYPTYPE>4</TYPTYPE><SRCROW1>10</SRCROW1><SRCCOLUMN1>4</SRCCOLUMN1><SRCROW2>10</SRCROW2><SRCCOLUMN2>46</SRCCOLUMN2><TYPESRC_LENG>45</TYPESRC_LENG><TYPESRC>ty_t_ztb_matnr TYPE TABLE OF ty_s_ztb_matnr
</TYPESRC></item></TYPES><PARAMETERS><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CANCEL</CMPNAME><SCONAME>CS_TREE_DATA_SEL</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_TREE_DATA_SEL</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CANCEL</CMPNAME><SCONAME>CS_DATA_BOM</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_DATA_BOM</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_ALV_DATA</CMPNAME><SCONAME>CS_ALV_DATA</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_ALV_DATA</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_COMPONENTS</CMPNAME><SCONAME>IO_SENDER</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Classe interfaccia PDM -&gt; SAP</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-12-06</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-07</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>3</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_COMPONENTS</CMPNAME><SCONAME>CT_TREE_DATA_SEL</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-21</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_T_TREE_DATA_SEL</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_COMPONENTS</CMPNAME><SCONAME>CT_COMPONENTS</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-11-02</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_T_TREE_DATA_SEL</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>CHANGE_COMPONENTS</CMPNAME><SCONAME>RV_RET</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>8 = nessun ordine modificato</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>4</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-12-05</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ABAP_BOOL</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM</CMPNAME><SCONAME>CS_TREE_DATA_SEL</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-20</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_TREE_DATA_SEL</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM</CMPNAME><SCONAME>CS_DATA_BOM</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-10-25</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_DATA_BOM</TYPE><PAROPTIONL>X</PAROPTIONL></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM</CMPNAME><SCONAME>CS_ALBERO</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Tabella albero cruscotto produzione</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-11-18</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_ALBERO</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM_OLD</CMPNAME><SCONAME>CS_TREE_DATA_SEL</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-11-18</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_TREE_DATA_SEL</TYPE></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><CMPNAME>SET_PHANTOM_OLD</CMPNAME><SCONAME>CS_DATA_BOM</SCONAME><VERSION>1</VERSION><LANGU>I</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>KOSMEDEV</AUTHOR><CREATEDON>2016-11-18</CREATEDON><CHANGEDBY>KOSMEDEV</CHANGEDBY><CHANGEDON>2016-12-06</CHANGEDON><PARDECLTYP>2</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZCL_PP_PDM_MONITOR_3=&gt;TY_S_DATA_BOM</TYPE></item></PARAMETERS><EXCEPTIONS/><IMPLEMENTINGS/><IMPL_DETAILS/><FRIENDSHIPS/><TYPEPUSAGES><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><TYPEGROUP>ABAP</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>0</TPUTYPE><IMPLICIT>X</IMPLICIT></item></TYPEPUSAGES><CLSDEFERRDS><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><TYPEGROUP>ZCL_PP_PDM_MONITOR</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>1</TPUTYPE><IMPLICIT>X</IMPLICIT></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><TYPEGROUP>ZCL_PP_PDM_MONITOR_2</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>1</TPUTYPE><IMPLICIT>X</IMPLICIT></item><item><CLSNAME>ZCL_PP_PDM_MONITOR_SEC</CLSNAME><TYPEGROUP>ZCL_PP_PDM_MONITOR_3</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>1</TPUTYPE><IMPLICIT>X</IMPLICIT></item></CLSDEFERRDS><INTDEFERRDS/><ALIASES/><INHERITANCE><VERSION>0</VERSION><STATE>0</STATE><CREATEDON>0000-00-00</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON></INHERITANCE><INTERFACES/><REDEFINITIONS/><TYPE_SOURCE/><LOCALS_SRC/><LOCALS_DEF><item>*&quot;* use this source file for any type of declarations (class</item><item>*&quot;* definitions, interfaces or type declarations) you need for</item><item>*&quot;* components in the private section</item><item/></LOCALS_DEF><LOCALS_IMP><item>*&quot;* use this source file for the definition and implementation of</item><item>*&quot;* local helper classes, interface definitions and type</item><item>*&quot;* declarations</item><item/></LOCALS_IMP><LOCALS_MAC><item>*&quot;* use this source file for any macro definitions you need</item><item>*&quot;* in the implementation part of the class</item><item/></LOCALS_MAC><TEXT_POOL/><METHOD_SOURCE><CHANGE_COMPONENTS><item>  METHOD change_components.</item><item>    &quot; valorizzare     cs_tree_data_sel-log.</item><item>    &quot; valorizzare     cs_tree_data_sel-light</item><item/><item>    DATA: lt_ztb_matnr TYPE ty_t_ztb_matnr,</item><item>          ls_ztb_matnr LIKE LINE OF lt_ztb_matnr,</item><item>          lt_odp       TYPE zcl_pp_pdm_monitor_3=&gt;ty_t_odp.</item><item/><item>    TYPES: BEGIN OF ty_s_ztb_esito.</item><item>        INCLUDE TYPE ztb_esito.</item><item>    TYPES:  END OF ty_s_ztb_esito.</item><item/><item>    TYPES: ty_t_ztb_esito TYPE TABLE OF ty_s_ztb_esito.</item><item>    DATA:  lt_esito   TYPE ty_t_ztb_esito.</item><item>    DATA:  ls_esito   LIKE LINE OF lt_esito.</item><item/><item>    DATA:</item><item>      lv_esito       TYPE zdbc_esito,</item><item>      lv_descr_esito TYPE zdbc_descr_esito,</item><item>      ls_resb        TYPE resb.</item><item/><item>    rv_ret = 8.</item><item>    BREAK kosmedev.</item><item>    LOOP AT ct_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item><item>      DATA(lv_tabix) = sy-tabix.</item><item>      DATA: ls_tree_data TYPE zcl_pp_pdm_monitor_3=&gt;ty_s_tree_data..</item><item/><item>      REFRESH: lt_odp.</item><item>      MOVE-CORRESPONDING ls_tree_data_sel TO ls_tree_data.</item><item>      io_sender-&gt;get_odp_info( CHANGING cs_tree_data = ls_tree_data</item><item>                                        ct_odp       = lt_odp ).</item><item>      LOOP AT lt_odp INTO DATA(ls_odp).</item><item>        DATA: ls_order_objects TYPE bapi_pp_order_objects,</item><item>              lt_comp          TYPE TABLE OF bapi_order_component.</item><item/><item>        REFRESH: lt_ztb_matnr.</item><item>        CLEAR: ls_order_objects.</item><item>        REFRESH: lt_comp.</item><item>        ls_order_objects-components = abap_true.</item><item>        CALL FUNCTION &apos;BAPI_PRODORD_GET_DETAIL&apos;</item><item>          EXPORTING</item><item>            number        = ls_odp-aufnr</item><item>*           COLLECTIVE_ORDER       =</item><item>            order_objects = ls_order_objects</item><item>*         IMPORTING</item><item>*           RETURN        =</item><item>          TABLES</item><item>*           HEADER        =</item><item>*           POSITION      =</item><item>*           SEQUENCE      =</item><item>*           OPERATION     =</item><item>*           TRIGGER_POINT =</item><item>            component     = lt_comp</item><item>*           PROD_REL_TOOL =</item><item>          .</item><item>        DATA: lv_posnr TYPE resb-posnr.</item><item>        lv_posnr = 10.</item><item>        LOOP AT lt_comp INTO DATA(ls_comp).</item><item>          ADD 10 TO lv_posnr.</item><item>        ENDLOOP.</item><item/><item>        LOOP AT ct_components INTO DATA(ls_components) WHERE aufnr = ls_</item><item>          CLEAR: ls_resb, ls_ztb_matnr.</item><item>          IF ( ls_components-azione &lt;&gt; &apos;I&apos; ).</item><item>            READ TABLE lt_comp INTO ls_comp WITH KEY material = ls_compo</item><item>            IF ( sy-subrc = 0 ).</item><item>              DATA(lv_tabix_comp) = sy-tabix.</item><item>              DELETE lt_comp INDEX lv_tabix_comp.</item><item>            ENDIF.</item><item>*            SELECT SINGLE * FROM resb INTO ls_resb</item><item>*                WHERE aufnr = ls_tree_data_sel-aufnr</item><item>*                  AND baugr = ls_tree_data_sel-matnr</item><item>*                  AND matnr = ls_components-matnr    &quot;ls_tree_data_sel-</item><item>**              AND bdmng = ls_components-qta_diba</item><item>*                  AND xloek = abap_false.</item><item>            SELECT SINGLE * FROM resb INTO ls_resb</item><item>                WHERE rsnum = ls_comp-reservation_number</item><item>                  AND rspos = ls_comp-reservation_item</item><item>                  AND rsart = ls_comp-reservation_type    &quot;ls_tree_data_</item><item>*              AND bdmng = ls_components-qta_diba</item><item>                  AND xloek = abap_false.</item><item>            CHECK sy-subrc = 0.</item><item>          ENDIF.</item><item>          IF ( ls_components-azione = &apos;U&apos; ).</item><item>            CHECK ls_components-menge &lt;&gt; ls_resb-bdmng.</item><item>          ENDIF.</item><item/><item>          ls_ztb_matnr-rsnum    = ls_resb-rsnum.</item><item>          ls_ztb_matnr-rspos    = ls_resb-rspos.</item><item/><item>*L’azione può essere: I di inserimento, C di modifica, D di cancellazion</item><item>*sortf deve essere uguale opname della struttura</item><item>*cs_tree_data_sel-AZIONE</item><item>*          ls_ztb_matnr-meins_new = ls_components-meins.</item><item>          IF  ls_components-azione = &apos;I&apos;.</item><item>            ls_ztb_matnr-matnr     = ls_components-matnr.  &quot;ls_tree_data</item><item>            ls_ztb_matnr-posnr     = lv_posnr.</item><item>            ls_ztb_matnr-menge_new = ls_components-menge.  &quot;ls_resb-bdmn</item><item>            ls_ztb_matnr-azione    = &apos;I&apos;.</item><item>          ELSEIF ls_components-azione = &apos;D&apos;.</item><item>            ls_ztb_matnr-matnr     = ls_components-matnr.  &quot;ls_tree_data</item><item>            ls_ztb_matnr-posnr     = ls_resb-posnr.</item><item>            ls_ztb_matnr-azione    = &apos;D&apos;.</item><item>          ELSEIF ls_components-azione = &apos;U&apos;.</item><item>            ls_ztb_matnr-matnr     = ls_components-matnr.  &quot;ls_tree_data</item><item>            ls_ztb_matnr-posnr     = ls_resb-posnr.</item><item>            ls_ztb_matnr-menge_new = ls_components-menge.  &quot;ls_tree_data</item><item>            ls_ztb_matnr-azione = &apos;C&apos;.</item><item>          ENDIF.</item><item>          zcl_bc_conversion_exit=&gt;conversion_output( EXPORTING iv_field</item><item>                                                     CHANGING cv_field =</item><item>          APPEND ls_ztb_matnr TO lt_ztb_matnr.</item><item/><item>          IF ( ls_components-azione = &apos;I&apos; ).</item><item>            lv_posnr = lv_posnr + 10.</item><item>          ENDIF.</item><item>          IF ( ls_components-azione = &apos;D&apos; ).</item><item>            lv_posnr = lv_posnr - 10.</item><item>          ENDIF.</item><item>        ENDLOOP.</item><item/><item>        IF ( NOT lt_ztb_matnr[] IS INITIAL ).</item><item/><item>          CALL FUNCTION &apos;ZPP_CHANGE_RESB&apos;</item><item>            EXPORTING</item><item>              i_aufnr       = ls_tree_data_sel-aufnr</item><item>*             I_VORNR       =</item><item>              i_opname      = ls_tree_data_sel-opname</item><item>              tb_matnr      = lt_ztb_matnr</item><item>            IMPORTING</item><item>              e_esito       = lv_esito</item><item>              e_descr_esito = lv_descr_esito</item><item>              tb_esito      = lt_esito.</item><item/><item>          ls_tree_data_sel-log = lv_descr_esito.</item><item>          IF ( lv_esito = &apos;000&apos; ).</item><item>            ls_tree_data_sel-light = icon_green_light.</item><item>            rv_ret = 0.</item><item>          ELSE.</item><item>            ls_tree_data_sel-light = icon_red_light.</item><item>          ENDIF.</item><item>        ELSE.</item><item>          ls_tree_data_sel-light = icon_yellow_light.</item><item>          ls_tree_data_sel-log = &apos;Ordine non modificato&apos;.</item><item>        ENDIF.</item><item>        MODIFY ct_tree_data_sel FROM  ls_tree_data_sel INDEX lv_tabix..</item><item>      ENDLOOP.</item><item>    ENDLOOP.</item><item/><item>  ENDMETHOD.</item></CHANGE_COMPONENTS><CHANGE_ALV_DATA><item>  METHOD change_alv_data.</item><item/><item>    DATA:</item><item>      lv_progetto_out             TYPE  ps_pspid,</item><item>      lv_progetto_descr_out       TYPE  ps_post1,</item><item>      lv_progetto_nm_out          TYPE  ps_pspid,</item><item>      lv_progetto_nm_descr_out    TYPE  ps_post1,</item><item>      lv_final_customer_out       TYPE  kunnr,</item><item>      lv_final_customer_descr_out TYPE  name1_gp,</item><item>      lv_equipment_kosme_out      TYPE  equnr,</item><item>      lv_equipment_krones_out     TYPE  usr02prps,</item><item>      lv_line_out                 TYPE  tplnr.</item><item/><item/><item>    IF ( cs_alv_data IS INITIAL ).</item><item>      set_data( ).</item><item>      cs_alv_data = gs_alv_data.</item><item>    ENDIF.</item><item/><item>    DATA: lv_pspnr TYPE prps-pspnr.</item><item/><item>    zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = cs_al</item><item>                                              CHANGING cv_field = lv_psp</item><item>    CALL FUNCTION &apos;Z_SDO_INFOWBS&apos;</item><item>      EXPORTING</item><item>        wbs_in                   = lv_pspnr</item><item>      IMPORTING</item><item>        progetto_out             = lv_progetto_out</item><item>        progetto_descr_out       = lv_progetto_descr_out</item><item>        progetto_nm_out          = lv_progetto_nm_out</item><item>        progetto_nm_descr_out    = lv_progetto_nm_descr_out</item><item>        final_customer_out       = lv_final_customer_out</item><item>        final_customer_descr_out = lv_final_customer_descr_out</item><item>        equipment_kosme_out      = lv_equipment_kosme_out</item><item>        equipment_krones_out     = lv_equipment_krones_out</item><item>        line_out                 = lv_line_out</item><item>      EXCEPTIONS</item><item>        not_found                = 1</item><item>        wbs_macchine_not_found   = 2</item><item>        OTHERS                   = 3.</item><item/><item>    cs_alv_data-final_cust   = lv_final_customer_out.</item><item>    cs_alv_data-final_cust_d = lv_final_customer_descr_out.</item><item/><item/><item>  ENDMETHOD.</item></CHANGE_ALV_DATA><SET_DATA><item>  METHOD set_data.</item><item>    DATA: lv_tipofile_bom TYPE zinter_tipofile,</item><item>          ls_data_anag    TYPE zcl_pp_pdm_monitor_3=&gt;ty_s_data_anag,</item><item>          ls_data_bom     TYPE zcl_pp_pdm_monitor_3=&gt;ty_s_data_bom.</item><item/><item>    CLEAR: gv_rootname, gs_alv_data, gs_tree_data, gs_tree_data_sel, gs_</item><item>           ls_data_anag, ls_data_bom.</item><item/><item>    zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = cv_ro</item><item>                                              CHANGING cv_field = gv_roo</item><item/><item>    CLEAR: lv_tipofile_bom.</item><item>    CASE cv_tipofile.</item><item>      WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_prod_labelling.</item><item>        lv_tipofile_bom = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_labelling.</item><item>      WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_prod_filling.</item><item>        lv_tipofile_bom = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_filling.</item><item>      WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_prod_packaging.</item><item>        lv_tipofile_bom = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_packaging.</item><item>    ENDCASE.</item><item/><item>    SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_data_anag FROM zpp_p</item><item>             WHERE elaborato = abap_false</item><item>             AND   rootname  = gv_rootname</item><item>             AND   tipofile  =  cv_tipofile.</item><item>    SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_data_bom FROM zpp_pd</item><item>             &quot;WHERE elaborato = abap_false</item><item>             WHERE del       = abap_false</item><item>             AND   rootname  = gv_rootname</item><item>             AND   tipofile  =  lv_tipofile_bom.</item><item>    SELECT SINGLE * INTO CORRESPONDING FIELDS OF gs_data_bom FROM zpp_pd</item><item>             &quot;WHERE elaborato = abap_false</item><item>             WHERE del        =  abap_false</item><item>             AND   rootname   =  gv_rootname</item><item>             AND   parentname &lt;&gt; gv_rootname</item><item>             AND   tipofile   =  lv_tipofile_bom.</item><item/><item>    MOVE-CORRESPONDING ls_data_anag TO gs_alv_data.</item><item>    MOVE-CORRESPONDING ls_data_bom TO gs_tree_data.</item><item>    MOVE-CORRESPONDING gs_tree_data TO gs_tree_data_sel.</item><item/><item/><item>* -------------</item><item>    DATA: wa_prps       TYPE prps,</item><item>          lv_ps_psp_pnr TYPE ps_psp_pnr,</item><item>          lv_posid      TYPE ps_posid,</item><item>          lv_psphi      TYPE prps-psphi,</item><item>          lv_vbeln      TYPE vbeln,</item><item>          lv_posnr      TYPE posnr,</item><item>          lv_c_posnr    TYPE c LENGTH 6.</item><item>    DATA: wa_vbak       TYPE vbak.</item><item/><item>    SELECT SINGLE ddtext INTO gs_alv_data-ddtext FROM dd07t WHERE ddlang</item><item>                                                            AND   as4loc</item><item>                                                            AND   valpos</item><item>                                                            AND   as4ver</item><item>    SELECT SINGLE maktx INTO gs_alv_data-maktx FROM makt WHERE matnr = g</item><item>    SELECT SINGLE * INTO CORRESPONDING FIELDS OF gs_alv_data FROM marc W</item><item>                                                                       A</item><item>    CLEAR: lv_vbeln, lv_posnr, lv_ps_psp_pnr, lv_posid, lv_psphi.</item><item>    SELECT vbeln posnr ps_psp_pnr INTO (lv_vbeln, lv_posnr, lv_ps_psp_pn</item><item>           WHERE matnr = gs_alv_data-rootname ORDER BY erdat DESCENDING.</item><item>      SELECT SINGLE * FROM vbak INTO wa_vbak WHERE vbeln = lv_vbeln AND</item><item>                                                   vbtyp = &apos;C&apos;.</item><item>      IF sy-subrc = 0.</item><item>        zcl_bc_conversion_exit=&gt;conversion_output( EXPORTING iv_field =</item><item>                                                   CHANGING cv_field = l</item><item>        EXIT.</item><item>      ENDIF.</item><item>    ENDSELECT.</item><item>    IF ( lv_ps_psp_pnr IS INITIAL OR lv_vbeln IS INITIAL ).</item><item>      CLEAR lv_posid.</item><item>      SELECT posid vbeln posnr INTO (lv_posid, lv_vbeln, lv_posnr) FROM</item><item>             WHERE matnr = gs_alv_data-rootname ORDER BY audat DESCENDIN</item><item>        zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = l</item><item>                                                   CHANGING cv_field = l</item><item>        EXIT.</item><item>      ENDSELECT.</item><item>    ENDIF.</item><item/><item>    gs_alv_data-posnr = lv_posnr.</item><item>    gs_alv_data-vbeln = lv_vbeln.</item><item>    gs_alv_data-posid = lv_posid.</item><item/><item>    SELECT SINGLE psphi post1 INTO (gs_alv_data-psphi, gs_alv_data-post1</item><item>* -------------</item><item/><item/><item>* -------------</item><item>    DATA: ls_ztpp_cicli TYPE ztpp_cicli,</item><item>          lv_stlnr      TYPE stnum,</item><item>          lv_level      TYPE i,</item><item>          gv_pspnr      TYPE prps-pspnr.</item><item/><item>    gs_tree_data-matnr = ls_data_bom-parentname.</item><item>    gs_tree_data-relenddate = ls_data_bom-relenddate.</item><item>    gs_tree_data-elaborato = ls_data_bom-elaborato.</item><item/><item>*    set_tree_alv_data( CHANGING gs_tree_data = gs_tree_data ).</item><item>*    get_other_data( CHANGING gs_tree_data = gs_tree_data ).</item><item>*    get_material_data( CHANGING gs_tree_data = gs_tree_data ).</item><item>    SELECT SINGLE * INTO CORRESPONDING FIELDS OF gs_tree_data</item><item>             FROM marc LEFT JOIN makt ON makt~matnr = marc~matnr AND mak</item><item>             WHERE marc~matnr = gs_tree_data-matnr</item><item>             AND   marc~werks = &apos;6301&apos;.</item><item>*    get_plaf_data( CHANGING gs_tree_data = gs_tree_data ).</item><item>    IF ( gs_tree_data-beskz = &apos;E&apos; AND gs_tree_data-disgr = &apos;ZMTO&apos; ).</item><item>      SELECT SINGLE plnum psttr pedtr verid INTO CORRESPONDING FIELDS OF</item><item>             FROM plaf</item><item>             WHERE matnr = gs_tree_data-matnr</item><item>             AND   pspel = gv_pspnr</item><item>             AND   pwwrk = &apos;6301&apos;.</item><item>    ENDIF.</item><item>    IF ( gs_tree_data-disgr = &apos;ZMTO&apos; ).</item><item>      SELECT SINGLE stlnr INTO lv_stlnr FROM prst WHERE pspnr = gv_pspnr</item><item>                                                  AND   matnr = gs_tree_</item><item>                                                  AND   werks = &apos;6301&apos;</item><item>                                                  AND   stlan = &apos;1&apos;.</item><item>      IF ( sy-subrc = 0 ).</item><item>        gs_tree_data-f_diba = abap_true.</item><item>      ELSE.</item><item>        gs_tree_data-f_diba = abap_false.</item><item>      ENDIF.</item><item>    ELSEIF ( gs_tree_data-disgr = &apos;ZMTS&apos; ).</item><item>      SELECT SINGLE stlnr INTO lv_stlnr FROM mast WHERE matnr = gs_tree_</item><item>                                                  AND   werks = &apos;6301&apos;</item><item>                                                  AND   stlan = &apos;2&apos;.</item><item>      IF ( sy-subrc = 0 ).</item><item>        gs_tree_data-f_diba = abap_true.</item><item>      ELSE.</item><item>        gs_tree_data-f_diba = abap_false.</item><item>      ENDIF.</item><item>    ENDIF.</item><item/><item>*    get_odp_info( CHANGING gs_tree_data = gs_tree_data ).</item><item>    TYPES: BEGIN OF ty_s_odp,</item><item>             aufnr TYPE afpo-aufnr,</item><item>             gstrp TYPE co_gstrp,</item><item>             gltrp TYPE co_gltrp,</item><item>           END OF ty_s_odp,</item><item>           ty_t_odp TYPE TABLE OF ty_s_odp.</item><item>    DATA: lt_odp  TYPE ty_t_odp,</item><item>          lo_lock TYPE REF TO zcl_bc_lock_handler,</item><item>          lv_garg TYPE seqg3-garg,</item><item>          lv_str  TYPE string.</item><item/><item>    REFRESH: lt_odp.</item><item>    CLEAR: gs_tree_data-aufnr, gs_tree_data-extra_aufnr, gs_tree_data-od</item><item>           gs_tree_data-gltrp, gs_tree_data-gstrp.</item><item>    SELECT afpo~aufnr afko~gstrp afko~gltrp</item><item>           INTO CORRESPONDING FIELDS OF TABLE lt_odp FROM afpo</item><item>           INNER JOIN afko ON afko~aufnr = afpo~aufnr</item><item>           WHERE projn = gv_pspnr</item><item>           AND   matnr = gs_tree_data-matnr</item><item>                 ORDER BY afko~aufnr ASCENDING.</item><item/><item>    DATA: lt_stati_sistema TYPE  ztpp_stati_sist_t,</item><item>          lt_stati_utente  TYPE  ztpp_stati_sist_t,</item><item>          lv_esito         TYPE zdbc_esito,</item><item>          lv_found         TYPE abap_bool,</item><item>          lv_continue      TYPE abap_bool.</item><item>    lv_found = abap_false.</item><item>    lv_continue = abap_false.</item><item>    LOOP AT lt_odp INTO DATA(ls_odp).</item><item>      IF ( lv_found = abap_true ).</item><item>        EXIT.</item><item>      ENDIF.</item><item/><item>      DO.</item><item>        CLEAR: lv_garg.</item><item>        CONCATENATE sy-mandt ls_odp-aufnr INTO lv_garg RESPECTING BLANKS</item><item>        lv_str = lv_garg.</item><item>        lo_lock = NEW #( iv_gname = &apos;AUFK&apos;</item><item>                         iv_time = 10</item><item>                         iv_garg = lv_str ).</item><item>        lo_lock-&gt;wait_lock( ).</item><item/><item>        COMMIT WORK.</item><item>        CALL FUNCTION &apos;ZPP_ESTRAI_STATI_ODP&apos;</item><item>          EXPORTING</item><item>            i_aufnr          = ls_odp-aufnr</item><item>          IMPORTING</item><item>            e_esito          = lv_esito</item><item>*           E_DESCR_ESITO    =</item><item>            et_stati_sistema = lt_stati_sistema</item><item>            et_stati_utente  = lt_stati_utente</item><item>*           I_AUFNR          =</item><item>*           E_CHECK_AUFM     =</item><item>          .</item><item>        IF ( lv_esito = &apos;000&apos; ).</item><item>          READ TABLE lt_stati_sistema INTO DATA(ls_stati) WITH KEY stat</item><item>          IF ( sy-subrc = 0 ).</item><item>            DELETE lt_odp INDEX 1.</item><item>            lv_continue = abap_true.</item><item>            EXIT.</item><item>          ENDIF.</item><item>          MOVE-CORRESPONDING ls_odp TO gs_tree_data.</item><item>          LOOP AT lt_stati_sistema INTO DATA(ls_stati_sistema).</item><item>            gs_tree_data-odp_stats = gs_tree_data-odp_stats &amp;&amp; ` ` &amp;&amp; ls</item><item>          ENDLOOP.</item><item>          LOOP AT lt_stati_utente INTO DATA(ls_stati_utente).</item><item>            gs_tree_data-odp_utstats = gs_tree_data-odp_utstats &amp;&amp; ` ` &amp;</item><item>          ENDLOOP.</item><item>          lv_found = abap_true.</item><item>          EXIT..</item><item>        ELSE.</item><item>          DELETE lt_odp INDEX 1.</item><item>          lv_continue = abap_true.</item><item>          EXIT.</item><item>        ENDIF.</item><item>        FREE lo_lock.</item><item>      ENDDO.</item><item>      IF ( lv_continue = abap_true ).</item><item>        CONTINUE.</item><item>      ENDIF.</item><item>    ENDLOOP.</item><item/><item>    LOOP AT lt_odp INTO ls_odp FROM 2 TO 5.</item><item>      CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;</item><item>        EXPORTING</item><item>          input  = ls_odp-aufnr</item><item>        IMPORTING</item><item>          output = ls_odp-aufnr.</item><item>      IF ( gs_tree_data-extra_aufnr IS INITIAL ).</item><item>        gs_tree_data-extra_aufnr = gs_tree_data-extra_aufnr &amp;&amp; ls_odp-au</item><item>      ELSE.</item><item>        gs_tree_data-extra_aufnr = gs_tree_data-extra_aufnr &amp;&amp; `-` &amp;&amp; ls</item><item>      ENDIF.</item><item>    ENDLOOP.</item><item>    READ TABLE lt_odp INTO ls_odp INDEX 6.</item><item>    IF ( sy-subrc = 0 ).</item><item>      gs_tree_data-extra_aufnr = gs_tree_data-extra_aufnr &amp;&amp; `-*`.</item><item>    ENDIF.</item><item/><item>    CLEAR: gs_tree_data-meins.</item><item>    SELECT SINGLE meins INTO gs_tree_data-meins FROM mara WHERE matnr =</item><item>*    gs_tree_data-plnnr = get_ciclo( EXPORTING iv_matnr = gs_tree_data-m</item><item>    SELECT SINGLE plnnr INTO gs_tree_data-plnnr FROM mapl</item><item>           WHERE matnr = gs_tree_data</item><item>           AND   werks = &apos;6301&apos;</item><item>           AND   loekz = space.</item><item/><item/><item/><item>    gs_tree_data-menge = 1.</item><item>*    gs_tree_data-ref = lv_ref.</item><item>    gs_tree_data-counter = ls_data_bom-counter.</item><item>    gs_tree_data-azione = ls_data_bom-azione.</item><item>*    gs_tree_data-ref_bom = lv_tabix.</item><item>    IF ( gs_tree_data-azione IS INITIAL ).</item><item>      gs_tree_data-azione = &apos;I&apos;.</item><item>    ENDIF.</item><item>    gs_tree_data-mod_succ = ls_data_bom-mod_succ.</item><item>    IF ( ls_data_bom-elaborato = abap_false ).</item><item>      gs_tree_data-color = if_salv_c_tree_style=&gt;emphasized_positive.</item><item>    ENDIF.</item><item>    IF ( ls_data_bom-elaborato = abap_false ).</item><item>      gs_tree_data-opname = ls_data_anag-opname.</item><item>    ENDIF.</item><item>* -------------</item><item/><item>    MOVE-CORRESPONDING gs_tree_data TO gs_tree_data_sel.</item><item/><item>  ENDMETHOD.</item></SET_DATA><SET_PHANTOM><item>  METHOD set_phantom.</item><item>*    IF ( cs_tree_data_sel IS INITIAL AND cs_data_bom IS INITIAL ).</item><item>*      set_data( ).</item><item>*      cs_tree_data_sel = gs_tree_data_sel.</item><item>*      cs_data_bom      = gs_data_bom.</item><item>*    ENDIF.</item><item/><item>    IF ( cs_tree_data_sel-itsob IS INITIAL OR cs_tree_data_sel-itsob = &apos;</item><item>      UPDATE zpp_albero SET itsob = cs_tree_data_sel-itsob</item><item>                        WHERE rootname = cs_albero-rootname</item><item>                        AND   counter  = cs_albero-counter.</item><item>      IF sy-subrc = 0.</item><item>        COMMIT WORK.</item><item>        cs_tree_data_sel-light = icon_green_light.</item><item>        cs_tree_data_sel-log   = &apos;OK&apos;.</item><item>      ELSE.</item><item>        ROLLBACK WORK.</item><item>        cs_tree_data_sel-light = icon_red_light.</item><item>        cs_tree_data_sel-log   = &apos;Nessun aggiornamento riuscito&apos;.</item><item>      ENDIF.</item><item>    ELSE.</item><item>      cs_tree_data_sel-light = icon_red_light.</item><item>      cs_tree_data_sel-log   = &apos;Valori ammessi sono vuoto e 50&apos;.</item><item>    ENDIF.</item><item/><item>  ENDMETHOD.</item></SET_PHANTOM><CANCEL><item>  method CANCEL.</item><item>    IF ( cs_tree_data_sel IS INITIAL AND cs_data_bom  IS INITIAL ).</item><item>      set_data( ).</item><item>      cs_tree_data_sel = gs_tree_data_sel.</item><item>      cs_data_bom      = gs_data_bom.</item><item>    ENDIF.</item><item>  endmethod.</item></CANCEL><SET_PHANTOM_OLD><item>  METHOD SET_PHANTOM_OLD.</item><item>    IF ( cs_tree_data_sel IS INITIAL AND cs_data_bom IS INITIAL ).</item><item>      set_data( ).</item><item>      cs_tree_data_sel = gs_tree_data_sel.</item><item>      cs_data_bom      = gs_data_bom.</item><item>    ENDIF.</item><item/><item>    IF ( cs_tree_data_sel-itsob IS INITIAL OR cs_tree_data_sel-itsob = &apos;</item><item>      UPDATE zpp_pdm_mon_bom SET itsob = cs_tree_data_sel-itsob</item><item>             WHERE datum  = cs_data_bom-datum</item><item>             AND uzeit    = cs_data_bom-uzeit</item><item>             AND counter  = cs_data_bom-counter</item><item>             AND tipofile = cs_data_bom-tipofile.</item><item>      IF sy-subrc = 0.</item><item>        COMMIT WORK.</item><item>        cs_tree_data_sel-light = icon_green_light.</item><item>        cs_tree_data_sel-log   = &apos;OK&apos;.</item><item>      ELSE.</item><item>        ROLLBACK WORK.</item><item>        cs_tree_data_sel-light = icon_red_light.</item><item>        cs_tree_data_sel-log   = &apos;Nessun aggiornamento riuscito&apos;.</item><item>      ENDIF.</item><item>    ELSE.</item><item>      cs_tree_data_sel-light = icon_red_light.</item><item>      cs_tree_data_sel-log   = &apos;Valori ammessi sono vuoto e 50&apos;.</item><item>    ENDIF.</item><item/><item>  ENDMETHOD.</item></SET_PHANTOM_OLD></METHOD_SOURCE></CLASS_ROOT>