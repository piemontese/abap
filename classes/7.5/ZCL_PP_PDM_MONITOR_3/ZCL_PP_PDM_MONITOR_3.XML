<?xml version="1.0"?>
  <CLASS_ROOT>
    <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
    <VERSION>1</VERSION>
    <LANGU>I</LANGU>
    <DESCRIPT>Classe interfaccia PDM -&gt; SAP</DESCRIPT>
    <UUID>AFBWoCPaHtat43eAOBUDHQ==</UUID>
    <CATEGORY>00</CATEGORY>
    <EXPOSURE>2</EXPOSURE>
    <STATE>1</STATE>
    <RELEASE>0</RELEASE>
    <AUTHOR>KOSMEDEV</AUTHOR>
    <CREATEDON>2016-11-30</CREATEDON>
    <CHANGEDON>0000-00-00</CHANGEDON>
    <CHGDANYON>0000-00-00</CHGDANYON>
    <CLSFINAL>X</CLSFINAL>
    <CLSCCINCL>X</CLSCCINCL>
    <FIXPT>X</FIXPT>
    <UNICODE>X</UNICODE>
    <R3RELEASE>750</R3RELEASE>
    <CLSBCCAT>00</CLSBCCAT>
    <DURATION_TYPE>0</DURATION_TYPE>
    <RISK_LEVEL>0</RISK_LEVEL>
    <ATTRIBUTES>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_ANTICIPO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Acquisizione anticipo</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>1</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>&apos;A&apos;</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>CHAR1</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_PRODUZIONE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Acquisizione lancio di produzione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>2</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>&apos;P&apos;</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>CHAR1</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_ALV_VIEW_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Visualizza dati</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>3</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>1</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>NUMC1</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_ALV_VIEW_LOG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Visualizza materiali non creati</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>4</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>2</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>NUMC1</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_ALV_VIEW_BAD_MAT</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Visualizza log</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>5</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-28</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-03</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>3</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>NUMC1</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_INC_SORT</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Incremento sort tabella ZPP_ALBERO</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>6</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>10</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>C_DATA_INFINITO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Data fine validit√†</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>7</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <ATTDECLTYP>2</ATTDECLTYP>
        <ATTVALUE>&apos;31/12/2099 00:00:00&apos;</ATTVALUE>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_RELENDDATE</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_TREE_STATUS_EXCLUDE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Pulsanti non visualizzati</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>1</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SLIS_T_EXTAB</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GS_SEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parametri di selezione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>2</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_SEL</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_PDM_FILE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>File da inviare al PDM</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>3</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_PDM_FILE</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_DATA_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati acquisiti e memorizzati in ZPP_PDM_MON_BOM</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>4</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_DATA_ANAG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati acquisiti e memorizzati in ZPP_PDM_MON_ANAG</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>5</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_ANAG</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GO_SALV</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Classe gestione alv grid</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>6</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>ZCL_BC_ALV_BASE</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GO_ALV_HANDLER</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>General Events</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>7</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_EVENTS</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_PFSTATUS_TREE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato GUI albero lancio produzione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>8</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_PFSTATUS_TREE_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato GUI albero anticipo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>9</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_ZTPP_CICLI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>10</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ZTPP_CICLI</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_ALV_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella dati alv grid</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>11</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALV_DATA</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_BAD_COMP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Componenti inesistenti</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>12</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_BAD_COMP</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_TREE_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati oggetto GUI albero</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>13</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GO_TREE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Basis Class for Tree Structure</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>14</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_TREE</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_TREE_HIER</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Gerarchi oggetto GUI albero</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>15</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_HIER</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_PFSTATUS_DIALOG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato GUI</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>16</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_TREE_DATA_SEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella dei nodi selezionati sull&apos;oggetto GUI albero</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>17</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA_SEL</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_TREE_DATA_OLD</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>18</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA_SEL</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_ACTION</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>19</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_TO_BE_REFRESH</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>WBS del rootname selezionato</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>20</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_PSPNR</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Elemento WBS</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>21</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>PRPS-PSPNR</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_POSID</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Elemento della Work Breakdown Structure (elemento WBS)</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>22</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>PRPS-POSID</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GS_CURRENT_ALV_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>23</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_ALV_DATA</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_TREE_CURRENT_LEVEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>24</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_TIPO_ANTICIPO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo anticipo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>25</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>CHAR1</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_ALBERO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>26</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_SKIPPED_NODES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>27</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-12</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GT_DIALOG_EXCLUDE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>28</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SLIS_T_EXTAB</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_WRONG_TREE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>29</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-24</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_DIALOG_TITLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>ALV Control: testo della riga titolo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>30</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-26</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>LVC_TITLE</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GV_CHANGE_ODP_ERR</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Errore in save_odp_components</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>31</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <ATTDECLTYP>0</ATTDECLTYP>
        <ATTEXPVIRT>0</ATTEXPVIRT>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <R3RELEASE>750</R3RELEASE>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
    </ATTRIBUTES>
    <METHODS>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Costruttore</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>2</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>EXECUTE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue programma</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Estrazione dati</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PROCESS_FILES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Processa i files</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_FILES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Estrazione dati</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_RECORDS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Estrazione dati</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_SHOW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Mostra alv</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MATERIAL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Check esistenza materiale</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>8</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_REVISION_LEVEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Check esistenza livello di revisione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>9</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIBA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Legge diba di progettazione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>10</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MARC</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Legge dati materiale relativi alla divisione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>11</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_PAR_CICLI_REF</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parametrizzazione cicli di riferimento</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>12</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_SALV</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>13</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_SALV</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>14</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHECK_COMPONENTS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Controlla esistenza componenti. Caricamento Albero BOM.</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>15</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-13</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_TIMES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>1. CMD Modifica dati MRP</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>16</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-19</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>3. CMD Modifica date OrdPian</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>17</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-19</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>4. CMD Modifica date OdP</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>18</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-19</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_ODP_COMPONENTS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Modifica componenti su ordini di produzione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>19</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>STORNO_ACCETTATO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>20</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di creazione cicli</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>21</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI_BY_LINE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di crea cicli su records selezionati</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>22</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-15</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PHANTOM_IN_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di modifica phantom</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>23</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di conversione Ord.Pian. in OdP</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>24</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-05</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di creazione BOM</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>25</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di creazione BOM - STAND BY</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>26</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-22</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TECO_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box di chiusura tecnica ordine di produzione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>27</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>EXECUTE_MD51</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>2. CMD MD51</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>28</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-19</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_DIALOG_SAVE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>29</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_TREE_SEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>30</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_TREE_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>31</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_REFRESH</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>0. CMD Refresh</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>32</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-19</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_ALV_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>33</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_EXPAND_UNTIL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>34</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box accettazione anticipo con BOM e OdP</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>35</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO_NOODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box accettazione anticipo solo BOM</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>36</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box accettazione lancio produzione con BOM e OdP</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>37</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD_NOODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dialog box accettazione lancio produzione solo BOM</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>38</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Accettazione BOM e Odp (forte)</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>39</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-23</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE_NOODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Accettazione solo BOM (debole)</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>40</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-23</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>41</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_TECO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Mette l&apos;OdP in stato TECO</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>42</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>1</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIALOG_EXCLUDE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>43</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_DIALOG_EXCLUDE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>44</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>REMOVE_DIALOG_EXCLUDE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>45</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-22</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_DIALOG_TITLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>46</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-26</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-03</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIALOG_TITLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>47</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-26</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-03</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_FCAN</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Mette l&apos;OdP in stato FCAN</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>48</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-20</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-30</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>1</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_ROW_REFRESH</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-12</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_SAP_TABLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_SELECTIONS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Crea parametri di selezione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ALV_DATA_NEW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Caricamento ALV Anagrafica ed eventuale Archiviazione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_SHOW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>8</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>9</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>10</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_DIALOG_SHOW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>11</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_TIMES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>12</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_DATES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>13</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_DATES_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>14</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_COMPONENTS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Allineamento OdP nell&apos;Accetta Forte con OdP</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>15</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_CICLI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>16</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>17</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_DIBA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>18</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-05</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_DIBA_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>19</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-27</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_PHANTOM_IN_DIBA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>20</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_TECO_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>21</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_STORNO_ACCETTATO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>22</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_CICLO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>23</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_DYNPRO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>24</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_FIELD</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>25</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_PLAF_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>26</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_OTHER_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>27</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MATERIAL_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>28</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_ODP_INFO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Estrazione OdP</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>29</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_ALV_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati per alv tree</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>30</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Costruisce gerarchia e dati per albero con verifica integrit</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>31</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_NEW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Costruisce gerarchia e dati per albero - OBSOLETO</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>32</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SEARCH_CHANGES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Caricamento Albero BOM (ZPP_ALBERO)</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>33</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SEARCH_CHANGES_NEW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Verifica modifiche - OBSOLETO</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>34</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTA_ANTICIPO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione anticipo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>35</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTA_ANT_NOODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione anticipo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>36</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTA_ANTICIPO_PROD</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione lancio produzione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>37</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTA_ANT_PROD_NOODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione lancio produzione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>38</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTAZIONE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione - OBSOLETO</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>39</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTAZIONE_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione - Salva ALV BOM con tasto modifica OdP</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>40</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-17</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTAZIONE_NOODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione - OBSOLETO</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>41</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ACCETTAZIONE_NOODP_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esegue accettazione - Salva ALV BOM (debole)</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>42</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-13</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>DELETE_BRANCH</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Cancella intero ramo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>43</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Seleziona intero ramo e suoi componenti</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>44</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Seleziona solo nodi che sono rami figli</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>45</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Seleziona solo nodi che sono rami figli</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>46</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>MARK_BRANCH_AS_DELETED</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>NON USATO</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>47</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>DELETE_ORPHAN</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Cancella intero ramo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>48</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BACKUP_ACCETTATO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Salva situazione ultima accettazione</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>49</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>EXCLUDE_BUTTONS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>50</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>51</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>52</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TO_TREE_TABLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>53</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>54</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_LAST_NODE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Restituisce l&apos;ultimo nodo all&apos;interno di un ramo</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>55</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>56</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE_NEW</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>57</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELABORAZIONI_SUCCESSIVE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Caricamento Albero BOM (ZPP_ALBERO) - Legge ZPP_PDM_MON_BOM</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>58</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELIMINA_DUPLICATI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Identifica inserimenti nei file bom</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>59</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>IDENTIFICA_MODIFICHE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Identifica modifiche nei file bom</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>60</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SORT_TREE_TABLE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>61</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SKIP_DUPLICATES_IN_BRANCH</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>62</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-12</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>63</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-17</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_CON_CONSUMI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>64</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_SENZA_CONSUMI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>65</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_PROD_VERSION</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Crea le Versioni di Produzioni via SUBMIT zpp_load_vers_prod</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>66</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-21</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>DIFF_BRANCH_NODES</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Verifica integrit√† cio√® se l&apos;Albero BOM √® corrotto</DESCRIPT>
        <EXPOSURE>0</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>67</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-23</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-12</CHANGEDON>
        <MTDTYPE>0</MTDTYPE>
        <MTDDECLTYP>0</MTDDECLTYP>
        <BCMTDCAT>00</BCMTDCAT>
        <BCMTDSYN>0</BCMTDSYN>
      </item>
    </METHODS>
    <EVENTS>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ON_USER_COMMAND</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>1</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-01</CHANGEDON>
        <EVTDECLTYP>0</EVTDECLTYP>
        <BCEVTCAT>00</BCEVTCAT>
      </item>
    </EVENTS>
    <TYPES>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>1</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>12</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>16</SRCROW2>
        <SRCCOLUMN2>20</SRCCOLUMN2>
        <TYPESRC_LENG>136</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_odp, aufnr TYPE afpo-aufnr, gstrp TYPE co_gstrp, gltrp TYPE co_gltrp, END OF ty_s_odp
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_ODP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>2</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>18</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>18</SRCROW2>
        <SRCCOLUMN2>34</SRCCOLUMN2>
        <TYPESRC_LENG>33</TYPESRC_LENG>
        <TYPESRC>ty_t_odp TYPE TABLE OF ty_s_odp
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_ALBERO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella albero cruscotto produzione</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>3</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-06</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_ALBERO</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_ALBERO</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>4</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>22</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>22</SRCROW2>
        <SRCCOLUMN2>88</SRCCOLUMN2>
        <TYPESRC_LENG>87</TYPESRC_LENG>
        <TYPESRC>ty_t_albero TYPE TABLE OF ty_s_albero WITH NON-UNIQUE SORTED KEY sort COMPONENTS sort
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_BDCDATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Batch-Input New Table FieldStructure</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>5</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-06</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>BDCDATA</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_BDCDATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>6</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>25</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>25</SRCROW2>
        <SRCCOLUMN2>42</SRCCOLUMN2>
        <TYPESRC_LENG>41</TYPESRC_LENG>
        <TYPESRC>ty_t_bdcdata TYPE TABLE OF ty_s_bdcdata
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_TREE_DATA_SEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>7</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-06</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MONITOR_ALV</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_TREE_DATA_SEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>8</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>28</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>28</SRCROW2>
        <SRCCOLUMN2>54</SRCCOLUMN2>
        <TYPESRC_LENG>53</TYPESRC_LENG>
        <TYPESRC>ty_t_tree_data_sel TYPE TABLE OF ty_s_tree_data_sel
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_DIALOG_FIELDS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>9</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>30</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>36</SRCROW2>
        <SRCCOLUMN2>30</SRCCOLUMN2>
        <TYPESRC_LENG>238</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_dialog_fields, fieldname TYPE string, visible TYPE abap_bool, editable TYPE abap_bool, type TYPE string, length TYPE dd03p-outputlen, END OF ty_s_dialog_fields
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_DIALOG_FIELDS</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>10</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>38</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>38</SRCROW2>
        <SRCCOLUMN2>69</SRCCOLUMN2>
        <TYPESRC_LENG>68</TYPESRC_LENG>
        <TYPESRC>ty_t_dialog_fields TYPE TABLE OF ty_s_dialog_fields WITH EMPTY KEY
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_TREE_HIER</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>11</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>40</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>53</SRCROW2>
        <SRCCOLUMN2>26</SRCCOLUMN2>
        <TYPESRC_LENG>710</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_tree_hier, node TYPE string, parent TYPE string, key TYPE salv_de_node_key, counter TYPE zpp_counter, ref TYPE i, level TYPE i, ref_bom TYPE i, relstartdate TYPE zpp_pdm_relstartdate, sort TYPE int4, &quot;Tonolli_G - 16.01.2017 Ins sort_parent TYPE int4, &quot;Tonolli_G - 16.01.2017 Ins disgr TYPE marc-disgr, &quot;Tonolli_G - 16.01.2017 Ins Gruppo di pianificazione ZMTO o ZMTS colore TYPE zpp_pdm_colore, &quot;Tonolli_G - 30.01.2017 Ins END OF ty_s_tree_hier
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_TREE_HIER</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>12</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>56</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>56</SRCROW2>
        <SRCCOLUMN2>94</SRCCOLUMN2>
        <TYPESRC_LENG>93</TYPESRC_LENG>
        <TYPESRC>ty_t_tree_hier TYPE TABLE OF ty_s_tree_hier WITH NON-UNIQUE SORTED KEY sort COMPONENTS sort
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_MAKT</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>13</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-16</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>59</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>62</SRCROW2>
        <SRCCOLUMN2>21</SRCCOLUMN2>
        <TYPESRC_LENG>104</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_makt, matnr TYPE matnr, maktx TYPE makt-maktx, END OF ty_s_makt
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_MAKT</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>14</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-16</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>64</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>64</SRCROW2>
        <SRCCOLUMN2>86</SRCCOLUMN2>
        <TYPESRC_LENG>85</TYPESRC_LENG>
        <TYPESRC>ty_t_makt TYPE TABLE OF ty_s_makt WITH NON-UNIQUE SORTED KEY matnr COMPONENTS matnr
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_MARC</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>15</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-17</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>66</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>76</SRCROW2>
        <SRCCOLUMN2>21</SRCCOLUMN2>
        <TYPESRC_LENG>384</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_marc, matnr TYPE matnr, beskz TYPE marc-beskz, sobsl TYPE marc-sobsl, dispo TYPE marc-dispo, dzeit TYPE marc-dzeit, plifz TYPE marc-plifz, webaz TYPE marc-webaz, dismm TYPE marc-dismm, disgr TYPE marc-disgr, END OF ty_s_marc
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_MARC</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>16</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-17</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>78</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>78</SRCROW2>
        <SRCCOLUMN2>86</SRCCOLUMN2>
        <TYPESRC_LENG>85</TYPESRC_LENG>
        <TYPESRC>ty_t_marc TYPE TABLE OF ty_s_marc WITH NON-UNIQUE SORTED KEY matnr COMPONENTS matnr
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_TREE_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>17</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>81</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>130</SRCROW2>
        <SRCCOLUMN2>26</SRCCOLUMN2>
        <TYPESRC_LENG>2090</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_tree_data, light TYPE icon_d, matnr TYPE matnr, maktx TYPE makt-maktx, menge TYPE menge_d, meins TYPE meins, qta_diba TYPE menge_d, beskz TYPE marc-beskz, sobsl TYPE marc-sobsl, itsob TYPE cs_sobsl, dispo TYPE marc-dispo, dzeit TYPE marc-dzeit, plifz TYPE marc-plifz, webaz TYPE marc-webaz, matkl TYPE matkl, &quot;MARA dismm TYPE marc-dismm, disgr TYPE marc-disgr, &quot;Gruppo di pianificazione ZMTO o ZMTS plnnr TYPE mapl-plnnr, f_diba TYPE zpp_f_diba, opname TYPE zpp_pdm_opname, aufnr TYPE afko-aufnr, extra_aufnr TYPE zpp_extra_aufnr, odp_stats TYPE zpp_pdm_odp_stas, odp_utstats TYPE zpp_pdm_odp_ut_stas, gstrp TYPE co_gstrp, gltrp TYPE co_gltrp, plnum TYPE plaf-plnum, psttr TYPE plaf-psttr, pedtr TYPE plaf-pedtr, verid TYPE plaf-verid, * INCLUDE TYPE zpp_pdm_monitor_alv. key TYPE salv_de_node_key, ref TYPE i, elaborato TYPE zpp_elaborato, color TYPE salv_de_constant, relstartdate TYPE zpp_pdm_relstartdate, relenddate TYPE zpp_pdm_relenddate, counter TYPE zpp_counter, mod_succ TYPE zpp_pdm_mod_succ, azione TYPE zpp_pdm_mod_azione, ref_bom TYPE i, menge_old TYPE menge_d, mod_odp TYPE zpp_pdm_mod_odp, parent_sup TYPE zpp_pdm_parentnam1, bom_key TYPE esh_e_int_key, colore TYPE zpp_pdm_colore, tree_level TYPE zpp_pdm_levelc, tipofile TYPE zinter_tipofile, reltype TYPE zpp_pdm_bomtype, &quot;Tonolli_G - Ins. (vedi anche ZPP_PDM_MONITOR_ALV) END OF ty_s_tree_data
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_TREE_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>18</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>132</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>132</SRCROW2>
        <SRCCOLUMN2>46</SRCCOLUMN2>
        <TYPESRC_LENG>45</TYPESRC_LENG>
        <TYPESRC>ty_t_tree_data TYPE TABLE OF ty_s_tree_data
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_BAD_COMP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Componenti inesistenti</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>19</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>134</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>136</SRCROW2>
        <SRCCOLUMN2>25</SRCCOLUMN2>
        <TYPESRC_LENG>80</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_bad_comp, matnr TYPE matnr, END OF ty_s_bad_comp
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_BAD_COMP</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>20</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>138</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>138</SRCROW2>
        <SRCCOLUMN2>44</SRCCOLUMN2>
        <TYPESRC_LENG>43</TYPESRC_LENG>
        <TYPESRC>ty_t_bad_comp TYPE TABLE OF ty_s_bad_comp
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_ALV_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>21</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>140</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>153</SRCROW2>
        <SRCCOLUMN2>25</SRCCOLUMN2>
        <TYPESRC_LENG>640</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_alv_data, tipofile TYPE zinter_tipofile, ddtext TYPE as4text, rootname TYPE zpp_pdm_rootname, maktx TYPE makt-maktx, dispo TYPE marc-dispo, posid TYPE prps-posid, &quot;Elemento della Work Breakdown Structure (elemento WBS) psphi TYPE prps-psphi, &quot;Numero progressivo del progetto corrispondente post1 TYPE prps-post1, vbeln TYPE vbap-vbeln, posnr TYPE vbap-posnr, final_cust TYPE zpp_pdm_final_cust, final_cust_d TYPE name1, END OF ty_s_alv_data
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_ALV_DATA</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>22</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>155</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>155</SRCROW2>
        <SRCCOLUMN2>44</SRCCOLUMN2>
        <TYPESRC_LENG>43</TYPESRC_LENG>
        <TYPESRC>ty_t_alv_data TYPE TABLE OF ty_s_alv_data
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_PDM_MON_ANAG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella ZPP_PDM_MON_ANAG</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>23</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MON_ANAG</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_PDM_MON_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella ZPP_PDM_MON_BOM</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>24</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MON_BOM</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_ZTPP_CICLI</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>25</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>159</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>159</SRCROW2>
        <SRCCOLUMN2>43</SRCCOLUMN2>
        <TYPESRC_LENG>42</TYPESRC_LENG>
        <TYPESRC>ty_t_ztpp_cicli TYPE TABLE OF ztpp_cicli
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_ALV_DATA_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Struttura file distinte base PDM -&gt; Sap</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>26</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MON_BOM</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_ALV_DATA_ANAG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Struttura file anagrafica PDM -&gt; Sap</DESCRIPT>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>27</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MON_ANAG</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_ALV_DATA_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>28</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>163</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>163</SRCROW2>
        <SRCCOLUMN2>52</SRCCOLUMN2>
        <TYPESRC_LENG>51</TYPESRC_LENG>
        <TYPESRC>ty_t_alv_data_bom TYPE TABLE OF ty_s_alv_data_bom
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_ALV_DATA_ANAG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>29</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>165</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>165</SRCROW2>
        <SRCCOLUMN2>54</SRCCOLUMN2>
        <TYPESRC_LENG>53</TYPESRC_LENG>
        <TYPESRC>ty_t_alv_data_anag TYPE TABLE OF ty_s_alv_data_anag
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_DATA_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>30</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>167</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>171</SRCROW2>
        <SRCCOLUMN2>33</SRCCOLUMN2>
        <TYPESRC_LENG>192</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_data_bom. * TYPES: tipofile TYPE ztbc000001-tipofile. * INCLUDE TYPE zpp_pdm_to_sap_bom. INCLUDE TYPE zpp_pdm_mon_bom. TYPES: END OF ty_s_data_bom
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_DATA_ANAG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>31</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>173</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>177</SRCROW2>
        <SRCCOLUMN2>34</SRCCOLUMN2>
        <TYPESRC_LENG>191</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_data_anag. * TYPES: tipofile TYPE ztbc000001-tipofile. * INCLUDE TYPE zpp_pdm_to_sap. INCLUDE TYPE zpp_pdm_mon_anag. TYPES: END OF ty_s_data_anag
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_SEL</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>32</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>179</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>191</SRCROW2>
        <SRCCOLUMN2>20</SRCCOLUMN2>
        <TYPESRC_LENG>674</TYPESRC_LENG>
        <TYPESRC>BEGIN OF ty_s_sel, p_ant TYPE xfeld, p_prod TYPE xfeld, p_test TYPE xfeld, p_layout TYPE disvariant-variant, p_layotr TYPE disvariant-variant, s_dispo TYPE RANGE OF marc-dispo, s_root TYPE RANGE OF zpp_albero-rootname, s_wbs TYPE RANGE OF prps-posid, &quot;Elemento della Work Breakdown Structure (elemento WBS) p_nogray TYPE xfeld, &quot;Solo cd con MOP p_nozmts TYPE xfeld, &quot;Non visualizzare i codici: a ZMTS figli di codici ZMTS 5,4,3,2; tutti i codici ZKAN p_no_ver TYPE xfeld, &quot;Gestione eccezioni sulle Versioni di Produzione END OF ty_s_sel
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_DATA_ANAG</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>33</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>193</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>193</SRCROW2>
        <SRCCOLUMN2>46</SRCCOLUMN2>
        <TYPESRC_LENG>45</TYPESRC_LENG>
        <TYPESRC>ty_t_data_anag TYPE TABLE OF ty_s_data_anag
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_DATA_BOM</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>34</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>195</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>195</SRCROW2>
        <SRCCOLUMN2>44</SRCCOLUMN2>
        <TYPESRC_LENG>43</TYPESRC_LENG>
        <TYPESRC>ty_t_data_bom TYPE TABLE OF ty_s_data_bom
        </TYPESRC>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_S_PDM_FILE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>35</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>STRING</TYPE>
        <SRCROW1>0</SRCROW1>
        <SRCCOLUMN1>0</SRCCOLUMN1>
        <SRCROW2>0</SRCROW2>
        <SRCCOLUMN2>0</SRCCOLUMN2>
        <TYPESRC_LENG>0</TYPESRC_LENG>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TY_T_PDM_FILE</CMPNAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <EXPOSURE>2</EXPOSURE>
        <STATE>1</STATE>
        <EDITORDER>36</EDITORDER>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-02-16</CHANGEDON>
        <TYPTYPE>4</TYPTYPE>
        <SRCROW1>198</SRCROW1>
        <SRCCOLUMN1>4</SRCCOLUMN1>
        <SRCROW2>198</SRCROW2>
        <SRCCOLUMN2>44</SRCCOLUMN2>
        <TYPESRC_LENG>43</TYPESRC_LENG>
        <TYPESRC>ty_t_pdm_file TYPE TABLE OF ty_s_pdm_file
        </TYPESRC>
      </item>
    </TYPES>
    <PARAMETERS>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE</CMPNAME>
        <SCONAME>IV_NO_DIBA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-09</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE_NOODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE_NOODP</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE_NOODP</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTAZIONE_NOODP</CMPNAME>
        <SCONAME>IV_NO_DIBA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-09</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO_NOODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO_NOODP</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_ANTICIPO_NOODP</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD_NOODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD_NOODP</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ACCETTA_LANCIO_PROD_NOODP</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-02</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_DIALOG_EXCLUDE</CMPNAME>
        <SCONAME>IV_FCODE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>STRING</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TO_TREE_TABLE</CMPNAME>
        <SCONAME>IS_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TO_TREE_TABLE</CMPNAME>
        <SCONAME>CT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TO_TREE_TABLE</CMPNAME>
        <SCONAME>RV_END</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>IV_INIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>IV_UNTIL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>2</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>IV_PARENT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_HIER-PARENT</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>IV_NODE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_HIER-NODE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>CO_TREE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Basis Class for Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_TREE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>CO_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>All Node Objects of Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>CT_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>8</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ADD_TREE_NODES</CMPNAME>
        <SCONAME>CS_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>9</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_DIALOG_SAVE</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Campo sistema ABAP: codice funzione che ha avviato PAI</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-21</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-UCOMM</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_DIALOG_SHOW</CMPNAME>
        <SCONAME>IT_FIELDS</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DIALOG_FIELDS</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_DIALOG_SHOW</CMPNAME>
        <SCONAME>IV_SAVE_BTN</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_TRUE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_DIALOG_SHOW</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_SHOW</CMPNAME>
        <SCONAME>IV_TYPE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo visualizzaione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>NUMC1</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_SHOW</CMPNAME>
        <SCONAME>IV_TITLE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>ALV Control: testo della riga titolo</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>LVC_TITLE</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ALV_SHOW</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TABLE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BACKUP_ACCETTATO</CMPNAME>
        <SCONAME>IT_ALBEROB</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_DYNPRO</CMPNAME>
        <SCONAME>IV_PROGRAM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ANY</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_DYNPRO</CMPNAME>
        <SCONAME>IV_DYNPRO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ANY</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_DYNPRO</CMPNAME>
        <SCONAME>CT_BDCDATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_BDCDATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_FIELD</CMPNAME>
        <SCONAME>IV_FNAM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ANY</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_FIELD</CMPNAME>
        <SCONAME>IV_FVAL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ANY</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BDC_FIELD</CMPNAME>
        <SCONAME>CT_BDCDATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_BDCDATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>IV_PARENT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parentname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_PARENTNAME</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>IV_LEV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Livello BOM</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_LEVEL</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>IV_PARENT_SUP</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parentname sup.</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_PARENTNAM1</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>IV_INDEX</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>CT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>CV_COUNTER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Contatore Posizione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>8</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_COUNTER</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE</CMPNAME>
        <SCONAME>CV_SORT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>9</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>IV_PARENT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parentname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_PARENTNAME</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>IV_LEV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Livello BOM</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_LEVEL</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>IV_PARENT_SUP</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parentname sup.</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_PARENTNAM1</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>IV_INDEX</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>EV_INDEX</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>CT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>8</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>CV_COUNTER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Contatore Posizione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>9</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_COUNTER</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>CV_SORT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>10</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>BUILD_TREE_TABLE_RECURSIVE_2</CMPNAME>
        <SCONAME>RV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>11</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES_ODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES_ODP</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_DATES_ODP</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_ODP_COMPONENTS</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_ODP_COMPONENTS</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_ODP_COMPONENTS</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_TIMES</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_TIMES</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHANGE_TIMES</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHECK_COMPONENTS</CMPNAME>
        <SCONAME>IV_ROW</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Riga</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_ROW</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CHECK_COMPONENTS</CMPNAME>
        <SCONAME>IV_COLUMN</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Colonna</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_COLUMN</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <SCONAME>IV_PROGRAM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Programma chiamante</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>2</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-REPID</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <SCONAME>IV_LANGUAGE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Campo sistema ABAP: chiave lingua dell&apos;ambiente testi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>2</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-LANGU</TYPE>
        <PARVALUE>SY-LANGU</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <SCONAME>IV_PFSTATUS</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato GUI</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>2</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <SCONAME>IV_PFSTATUS_TREE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato Gui albero</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>2</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <SCONAME>IV_PFSTATUS_TREE_2</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato GUI</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>2</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CONSTRUCTOR</CMPNAME>
        <SCONAME>IV_PFSTATUS_DIALOG</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato GUI</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>2</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SYPFKEY</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI_BY_LINE</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-15</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI_BY_LINE</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-15</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_CICLI_BY_LINE</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-15</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA_2</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-22</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA_2</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-22</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_DIBA_2</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-22</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_ODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_ODP</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>CREATE_ODP</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>DELETE_BRANCH</CMPNAME>
        <SCONAME>IS_TREE_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>DELETE_BRANCH</CMPNAME>
        <SCONAME>IS_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>DIFF_BRANCH_NODES</CMPNAME>
        <SCONAME>EV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-24</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-28</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELABORAZIONI_SUCCESSIVE</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELABORAZIONI_SUCCESSIVE</CMPNAME>
        <SCONAME>IV_DATUM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Data</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>DATUM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELABORAZIONI_SUCCESSIVE</CMPNAME>
        <SCONAME>IV_UZEIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Ora</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>UZEIT</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELABORAZIONI_SUCCESSIVE</CMPNAME>
        <SCONAME>RV_END</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELIMINA_DUPLICATI</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELIMINA_DUPLICATI</CMPNAME>
        <SCONAME>CT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ELIMINA_DUPLICATI</CMPNAME>
        <SCONAME>RV_END</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>EXCLUDE_BUTTONS</CMPNAME>
        <SCONAME>CO_FUNCTIONS</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Generic and User-Defined Functions in Tree Structures</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_FUNCTIONS_TREE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>EXECUTE</CMPNAME>
        <SCONAME>IV_NO_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_ALV_DATA</CMPNAME>
        <SCONAME>ET_ALV_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALV_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_CICLO</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARA-MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_CICLO</CMPNAME>
        <SCONAME>IV_WERKS</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Divisione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARC-WERKS</TYPE>
        <PARVALUE>&apos;6301&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_CICLO</CMPNAME>
        <SCONAME>RV_PLNNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiave del gruppo cicli</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MAPL-PLNNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA</CMPNAME>
        <SCONAME>IS_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA</CMPNAME>
        <SCONAME>CT_DATA_ANAG</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_ANAG</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA_BOM</CMPNAME>
        <SCONAME>IV_TIPOFILE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo file</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZINTER_TIPOFILE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DATA_BOM</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIALOG_EXCLUDE</CMPNAME>
        <SCONAME>CT_DIALOG_EXCLUDE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SLIS_T_EXTAB</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIALOG_TITLE</CMPNAME>
        <SCONAME>EV_TITLE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>ALV Control: testo della riga titolo</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-26</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-26</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>LVC_TITLE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIBA</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIBA</CMPNAME>
        <SCONAME>IV_WERKS</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Divisione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>WERKS_D</TYPE>
        <PARVALUE>&apos;6301&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIBA</CMPNAME>
        <SCONAME>IV_STLAN</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Impiego della distinta base</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>STLAN</TYPE>
        <PARVALUE>&apos;2&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIBA</CMPNAME>
        <SCONAME>ES_MAST</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati divisione per materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MAST</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_DIBA</CMPNAME>
        <SCONAME>EV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Campo sistema ABAP: valore di ritorno di enunciati ABAP</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-SUBRC</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_LAST_NODE</CMPNAME>
        <SCONAME>IT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_LAST_NODE</CMPNAME>
        <SCONAME>CS_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella albero cruscotto produzione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MARC</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MARC</CMPNAME>
        <SCONAME>IV_WERKS</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Divisione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>WERKS_D</TYPE>
        <PARVALUE>&apos;6301&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MARC</CMPNAME>
        <SCONAME>ES_MARC</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati divisione per materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARC</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MARC</CMPNAME>
        <SCONAME>EV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Campo sistema ABAP: valore di ritorno di enunciati ABAP</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-SUBRC</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MATERIAL</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MATERIAL</CMPNAME>
        <SCONAME>ES_MARA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Dati mat. generali</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MATERIAL</CMPNAME>
        <SCONAME>EV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Esito controllo</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-SUBRC</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_MATERIAL_DATA</CMPNAME>
        <SCONAME>CS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_ODP_INFO</CMPNAME>
        <SCONAME>CS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_ODP_INFO</CMPNAME>
        <SCONAME>CT_ODP</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ODP</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_OTHER_DATA</CMPNAME>
        <SCONAME>CS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_PAR_CICLI_REF</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_PAR_CICLI_REF</CMPNAME>
        <SCONAME>ES_PAR_CICLI_REF</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parametrizzazione cicli di riferimento</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZTPP_CICLI</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_PLAF_DATA</CMPNAME>
        <SCONAME>CS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_REVISION_LEVEL</CMPNAME>
        <SCONAME>IV_AETYP</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo oggetto</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>AETYP</TYPE>
        <PARVALUE>&apos;41&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_REVISION_LEVEL</CMPNAME>
        <SCONAME>IV_REVLV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Stato di revisione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>REVLV</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_REVISION_LEVEL</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_REVISION_LEVEL</CMPNAME>
        <SCONAME>ES_AEOI</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Servizio mod.: record gestione ogg. per anagrafica mod.</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>AEOI</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_REVISION_LEVEL</CMPNAME>
        <SCONAME>EV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Campo sistema ABAP: valore di ritorno di enunciati ABAP</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-SUBRC</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_SALV</CMPNAME>
        <SCONAME>EO_SALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Classe gestione alv grid</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>ZCL_BC_ALV_BASE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_TREE_DATA</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_TREE_SEL</CMPNAME>
        <SCONAME>IO_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Selections in Tree Structures</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_SELECTIONS_TREE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>GET_TREE_SEL</CMPNAME>
        <SCONAME>RT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>IDENTIFICA_MODIFICHE</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>IDENTIFICA_MODIFICHE</CMPNAME>
        <SCONAME>CT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>IDENTIFICA_MODIFICHE</CMPNAME>
        <SCONAME>RV_END</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>MARK_BRANCH_AS_DELETED</CMPNAME>
        <SCONAME>IV_ELABORATO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Elaborato</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_ELABORATO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>MARK_BRANCH_AS_DELETED</CMPNAME>
        <SCONAME>IV_MOD_SUCC</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Modifica successiva ad accettazione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MOD_SUCC</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>MARK_BRANCH_AS_DELETED</CMPNAME>
        <SCONAME>IV_AZIONE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Azione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_MOD_AZIONE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>MARK_BRANCH_AS_DELETED</CMPNAME>
        <SCONAME>IS_TREE_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>ON_USER_COMMAND</CMPNAME>
        <SCONAME>E_SALV_FUNCTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>General Events</DESCRIPT>
        <CMPTYPE>2</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_EVENTS</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PHANTOM_IN_BOM</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PHANTOM_IN_BOM</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PHANTOM_IN_BOM</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE</CMPNAME>
        <SCONAME>IV_DATUM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Data</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>DATUM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE</CMPNAME>
        <SCONAME>IV_UZEIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Ora</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>UZEIT</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE_NEW</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE_NEW</CMPNAME>
        <SCONAME>IV_DATUM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Data</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>DATUM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE_NEW</CMPNAME>
        <SCONAME>IV_UZEIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Ora</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>UZEIT</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PRIMA_ELABORAZIONE_NEW</CMPNAME>
        <SCONAME>RV_RET</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>3</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PROCESS_FILES</CMPNAME>
        <SCONAME>IV_NO_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>PROCESS_FILES</CMPNAME>
        <SCONAME>IV_NO_INIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-23</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-23</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_FILES</CMPNAME>
        <SCONAME>IS_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_FILES</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_FILES</CMPNAME>
        <SCONAME>CT_DATA_ANAG</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_ANAG</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_RECORDS</CMPNAME>
        <SCONAME>IS_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_RECORDS</CMPNAME>
        <SCONAME>CT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>READ_RECORDS</CMPNAME>
        <SCONAME>CT_DATA_MAT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_ANAG</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>REMOVE_DIALOG_EXCLUDE</CMPNAME>
        <SCONAME>IV_FCODE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-20</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>STRING</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_COMPONENTS</CMPNAME>
        <SCONAME>IV_STORNO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_CON_CONSUMI</CMPNAME>
        <SCONAME>IV_STORNO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_CON_CONSUMI</CMPNAME>
        <SCONAME>IV_INDEX</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_CON_CONSUMI</CMPNAME>
        <SCONAME>IV_NUMBER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Numero attuale range di numerazione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-05</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>NRLEVEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_CON_CONSUMI</CMPNAME>
        <SCONAME>CS_TREE_DATA_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-05</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_SENZA_CONSUMI</CMPNAME>
        <SCONAME>IV_STORNO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_SENZA_CONSUMI</CMPNAME>
        <SCONAME>IV_INDEX</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_ODP_SENZA_CONSUMI</CMPNAME>
        <SCONAME>CS_TREE_DATA_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Struttura per alv report ZPP_PDM_MONITOR</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-19</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-19</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SAVE_PROD_VERSION</CMPNAME>
        <SCONAME>IV_MATNR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-21</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SEARCH_CHANGES</CMPNAME>
        <SCONAME>IV_CHECK</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SEARCH_CHANGES</CMPNAME>
        <SCONAME>IV_ROOTNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_ROOTNAME</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH</CMPNAME>
        <SCONAME>IV_ELABORATO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Elaborato</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_ELABORATO</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH</CMPNAME>
        <SCONAME>IS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH</CMPNAME>
        <SCONAME>IV_LEVEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>999999999</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH</CMPNAME>
        <SCONAME>CT_TREE_DATA_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA_SEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT</CMPNAME>
        <SCONAME>IS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT</CMPNAME>
        <SCONAME>IV_DISGR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Gruppo di pianif.</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARC-DISGR</TYPE>
        <PARVALUE>&apos;ZMTO&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT</CMPNAME>
        <SCONAME>IV_BESKZ</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo approvvigionamento</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARC-BESKZ</TYPE>
        <PARVALUE>&apos;E&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT</CMPNAME>
        <SCONAME>IV_ITSOB</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella albero cruscotto produzione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-06</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_ALBERO-ITSOB</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT</CMPNAME>
        <SCONAME>CT_TREE_DATA_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-06</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA_SEL</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <SCONAME>IS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <SCONAME>IV_DISGR</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Gruppo di pianif.</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARC-DISGR</TYPE>
        <PARVALUE>&apos;ZMTO&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <SCONAME>IV_BESKZ</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo approvvigionamento</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MARC-BESKZ</TYPE>
        <PARVALUE>&apos;E&apos;</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <SCONAME>IV_NO_PHANTOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>No phantom</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-06</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <SCONAME>IV_ODP</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-07</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_BRANCH_ROOT_2</CMPNAME>
        <SCONAME>CT_TREE_DATA_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-06</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-07</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA_SEL</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_ODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-17</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-17</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SELECT_ODP</CMPNAME>
        <SCONAME>ET_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-17</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-17</CHANGEDON>
        <PARDECLTYP>1</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ALV_DATA_NEW</CMPNAME>
        <SCONAME>IT_DATA_ANAG</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_ANAG</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ALV_DATA_NEW</CMPNAME>
        <SCONAME>CT_ALV_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALV_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_DIALOG_TITLE</CMPNAME>
        <SCONAME>IV_FCODE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>ALV Control: testo della riga titolo</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-26</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2016-12-26</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SY-UCOMM</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_DIALOG_TITLE</CMPNAME>
        <SCONAME>IV_TITLE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-26</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>STRING</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_FCAN</CMPNAME>
        <SCONAME>IV_ORDER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Numero ordine</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-20</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>AUFNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_FCAN</CMPNAME>
        <SCONAME>CV_ESITO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice esito</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-20</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZDBC_ESITO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_FCAN</CMPNAME>
        <SCONAME>CV_DESCR_ESITO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Descrizione esito</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-20</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZDBC_DESCR_ESITO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_TECO</CMPNAME>
        <SCONAME>IV_ORDER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Numero ordine</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>AUFNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_TECO</CMPNAME>
        <SCONAME>CV_ESITO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice esito</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZDBC_ESITO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ODP_TECO</CMPNAME>
        <SCONAME>CV_DESCR_ESITO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Descrizione esito</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZDBC_DESCR_ESITO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <SCONAME>IS_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <SCONAME>IV_LEV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_LEVEL</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <SCONAME>IV_COUNTER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_COUNTER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <SCONAME>IV_SORT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <SCONAME>IV_PARENT_SUP</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Parentname sup.</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_PARENTNAM1</TYPE>
        <PARVALUE>SPACE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_ROW_TREE_TABLE</CMPNAME>
        <SCONAME>CS_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tabella albero cruscotto produzione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_SALV</CMPNAME>
        <SCONAME>IO_SALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Classe gestione alv grid</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>ZCL_BC_ALV_BASE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_SAP_TABLE</CMPNAME>
        <SCONAME>IV_TYPE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Tipo file</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZINTER_TIPOFILE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_SAP_TABLE</CMPNAME>
        <SCONAME>IT_FILE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZCL_PP_PDM_FILE=&gt;TY_T_FILE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_SAP_TABLE</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TABLE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_ALV_DATA</CMPNAME>
        <SCONAME>CS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA</CMPNAME>
        <SCONAME>IS_ALV_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_ALV_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>IV_COUNTER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Contatore Posizione</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_COUNTER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>IV_ROOT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>IV_NODE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Codice materiale</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>MATNR</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>IV_LEVEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>IS_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>IV_OPNAME</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Opname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ZPP_PDM_OPNAME</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_CHILD</CMPNAME>
        <SCONAME>CV_REF</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_NEW</CMPNAME>
        <SCONAME>IS_ALV_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Rootname</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_ALV_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_NEW</CMPNAME>
        <SCONAME>IT_DATA_ANAG</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_ANAG</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_DATA_NEW</CMPNAME>
        <SCONAME>IT_DATA_BOM</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_DATA_BOM</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>IV_INIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>IS_SEL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2017-01-17</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_SEL</TYPE>
        <PAROPTIONL>X</PAROPTIONL>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>IV_UNTIL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>2</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>CT_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>CO_TREE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Basis Class for Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_TREE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES</CMPNAME>
        <SCONAME>CO_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>All Node Objects of Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>7</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDBY>KOSMEDEV</CHANGEDBY>
        <CHANGEDON>2017-01-17</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <SCONAME>IV_INIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <SCONAME>IV_UNTIL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>2</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <SCONAME>CT_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <SCONAME>CO_TREE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Basis Class for Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_TREE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_NEW</CMPNAME>
        <SCONAME>CO_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>All Node Objects of Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <SCONAME>IV_INIT</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>0</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <SCONAME>IV_UNTIL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>2</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <SCONAME>CT_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>4</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <SCONAME>CO_TREE</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Basis Class for Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>5</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_TREE</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SET_TREE_NODES_OLD</CMPNAME>
        <SCONAME>CO_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>All Node Objects of Tree Structure</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>6</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>3</TYPTYPE>
        <TYPE>CL_SALV_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SKIP_DUPLICATES_IN_BRANCH</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Chiavi - coppie di nodi</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-12</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SORT_TREE_TABLE</CMPNAME>
        <SCONAME>IV_INDEX</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>1</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>SORT_TREE_TABLE</CMPNAME>
        <SCONAME>CT_ALBERO</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_ALBERO</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>STORNO_ACCETTATO</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>STORNO_ACCETTATO</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>STORNO_ACCETTATO</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TECO_ODP</CMPNAME>
        <SCONAME>IT_NODES</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_T_NODES</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TECO_ODP</CMPNAME>
        <SCONAME>IV_ACTION</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <DESCRIPT>Funzione ALV</DESCRIPT>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>SALV_DE_FUNCTION</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TECO_ODP</CMPNAME>
        <SCONAME>IV_NO_SHOW_ALV</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>3</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-01</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_REFRESH</CMPNAME>
        <SCONAME>IV_FORCE_REFRESH</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>ABAP_BOOL</TYPE>
        <PARVALUE>ABAP_FALSE</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_REFRESH</CMPNAME>
        <SCONAME>IV_UNTIL</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>I</TYPE>
        <PARVALUE>0</PARVALUE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_ROW_REFRESH</CMPNAME>
        <SCONAME>IS_TREE_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-12-12</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>0</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_S_TREE_DATA</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_SHOW</CMPNAME>
        <SCONAME>CT_HIER</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>1</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_HIER</TYPE>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <CMPNAME>TREE_SHOW</CMPNAME>
        <SCONAME>CT_DATA</SCONAME>
        <VERSION>1</VERSION>
        <LANGU>I</LANGU>
        <CMPTYPE>1</CMPTYPE>
        <MTDTYPE>0</MTDTYPE>
        <EDITORDER>2</EDITORDER>
        <DISPID>0</DISPID>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
        <PARDECLTYP>2</PARDECLTYP>
        <PARPASSTYP>1</PARPASSTYP>
        <TYPTYPE>1</TYPTYPE>
        <TYPE>TY_T_TREE_DATA</TYPE>
      </item>
    </PARAMETERS>
    <EXCEPTIONS/>
    <IMPLEMENTINGS/>
    <IMPL_DETAILS/>
    <FRIENDSHIPS>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <REFCLSNAME>ZCL_PP_PDM_MONITOR_SEC</REFCLSNAME>
        <FRIENDTYPE>0</FRIENDTYPE>
        <VERSION>1</VERSION>
        <STATE>1</STATE>
        <AUTHOR>KOSMEDEV</AUTHOR>
        <CREATEDON>2016-11-30</CREATEDON>
        <CHANGEDON>0000-00-00</CHANGEDON>
      </item>
    </FRIENDSHIPS>
    <TYPEPUSAGES>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <TYPEGROUP>ABAP</TYPEGROUP>
        <VERSION>1</VERSION>
        <TPUTYPE>0</TPUTYPE>
        <IMPLICIT>X</IMPLICIT>
      </item>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <TYPEGROUP>SLIS</TYPEGROUP>
        <VERSION>1</VERSION>
        <TPUTYPE>0</TPUTYPE>
        <IMPLICIT>X</IMPLICIT>
      </item>
    </TYPEPUSAGES>
    <CLSDEFERRDS>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <TYPEGROUP>ZCL_PP_PDM_FILE</TYPEGROUP>
        <VERSION>1</VERSION>
        <TPUTYPE>1</TPUTYPE>
        <IMPLICIT>X</IMPLICIT>
      </item>
    </CLSDEFERRDS>
    <INTDEFERRDS/>
    <ALIASES/>
    <INHERITANCE>
      <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
      <REFCLSNAME>ZCL_BC_PROGRAM_BASE</REFCLSNAME>
      <VERSION>1</VERSION>
      <STATE>1</STATE>
      <AUTHOR>KOSMEDEV</AUTHOR>
      <CREATEDON>2016-11-30</CREATEDON>
      <CHANGEDON>0000-00-00</CHANGEDON>
    </INHERITANCE>
    <INTERFACES/>
    <REDEFINITIONS>
      <item>
        <CLSNAME>ZCL_PP_PDM_MONITOR_3</CLSNAME>
        <REFCLSNAME>ZCL_BC_PROGRAM_BASE</REFCLSNAME>
        <VERSION>1</VERSION>
        <MTDNAME>MODIFY_SCREEN</MTDNAME>
        <EXPOSURE>2</EXPOSURE>
      </item>
    </REDEFINITIONS>
    <TYPE_SOURCE/>
    <LOCALS_SRC/>
    <LOCALS_DEF>
      <item>*&quot;* use this source file for any type of declarations (class</item>
      <item>*&quot;* definitions, interfaces or type declarations) you need for</item>
      <item>*&quot;* components in the private section</item>
      <item/>
    </LOCALS_DEF>
    <LOCALS_IMP>
      <item>*&quot;* use this source file for the definition and implementation of</item>
      <item>*&quot;* local helper classes, interface definitions and type</item>
      <item>*&quot;* declarations</item>
      <item/>
      <item>CLASS lcl_handle_events DEFINITION.</item>
      <item> PUBLIC SECTION.</item>
      <item>* CLASS-DATA: gv_no_dbclick TYPE abap_bool VALUE IS INITIAL.</item>
      <item> METHODS:</item>
      <item> constructor IMPORTING io_sender TYPE REF TO zcl_pp_pdm_monitor_3,</item>
      <item> on_user_command FOR EVENT added_function OF cl_salv_events IMPORTI</item>
      <item> on_double_click FOR EVENT double_click OF cl_salv_events_table IMP</item>
      <item> PRIVATE SECTION.</item>
      <item> DATA: go_sender TYPE REF TO zcl_pp_pdm_monitor_3.</item>
      <item>ENDCLASS.</item>
      <item/>
      <item>CLASS lcl_handle_events IMPLEMENTATION.</item>
      <item> METHOD constructor.</item>
      <item> go_sender = io_sender.</item>
      <item> ENDMETHOD.</item>
      <item> METHOD on_user_command.</item>
      <item> DATA: lr_selections TYPE REF TO cl_salv_selections.</item>
      <item> DATA: lt_rows TYPE salv_t_row.</item>
      <item> DATA: ls_rows TYPE i.</item>
      <item> DATA: message TYPE string.</item>
      <item> CASE e_salv_function.</item>
      <item> WHEN &apos;REFRESH&apos;.</item>
      <item> go_sender-&gt;execute( abap_true ).</item>
      <item> go_sender-&gt;get_alv( )-&gt;refresh( refresh_mode = if_salv_c_refresh</item>
      <item/>
      <item> WHEN &apos;&amp;&amp;BACK&apos;.</item>
      <item>* gv_no_dbclick = abap_false.</item>
      <item> &quot;cl_gui_cfw=&gt;flush( ).</item>
      <item> LEAVE TO SCREEN 0.</item>
      <item/>
      <item> ENDCASE.</item>
      <item> ENDMETHOD.</item>
      <item> METHOD on_double_click.</item>
      <item> DATA: ls_lock_root TYPE zpp_lock_root,</item>
      <item> lt_alv_data TYPE zcl_pp_pdm_monitor_3=&gt;ty_t_alv_data.</item>
      <item> DATA: lv_utente(14) TYPE c.</item>
      <item>* IF ( gv_no_dbclick = abap_false ).</item>
      <item> CLEAR: ls_lock_root, lv_utente.</item>
      <item> go_sender-&gt;get_alv_data( IMPORTING et_alv_data = lt_alv_data ).</item>
      <item> READ TABLE lt_alv_data INTO DATA(ls_alv_data) INDEX row.</item>
      <item> IF ( sy-subrc = 0 ).</item>
      <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_lock_root FROM zpp</item>
      <item> WHERE rootname = ls_alv_data-rootname.</item>
      <item> IF ( sy-subrc = 0 ).</item>
      <item> CONCATENATE &apos; &apos; ls_lock_root-uname</item>
      <item> INTO lv_utente SEPARATED BY space.</item>
      <item> MESSAGE i398(00) WITH &apos;Rootname: &apos; ls_alv_data-rootname &apos; gi√† in</item>
      <item> RETURN.</item>
      <item> ELSE.</item>
      <item> ls_lock_root-rootname = ls_alv_data-rootname.</item>
      <item> ls_lock_root-uname = sy-uname.</item>
      <item> ls_lock_root-datum = sy-datum.</item>
      <item> ls_lock_root-uzeit = sy-uzeit.</item>
      <item> INSERT zpp_lock_root FROM ls_lock_root.</item>
      <item> COMMIT WORK AND WAIT.</item>
      <item> ENDIF.</item>
      <item/>
      <item>* ENDIF.</item>
      <item/>
      <item>** Caricamento del K selezionato</item>
      <item>* go_sender-&gt;get_data_bom( iv_tipofile = ls_alv_data-tipofile</item>
      <item>* iv_rootname = ls_alv_data-rootname ).</item>
      <item/>
      <item>* gv_no_dbclick = abap_true.</item>
      <item/>
      <item>* Controllo del K e dei componeti. Caricamento in tabelle interne gt</item>
      <item> go_sender-&gt;check_components( EXPORTING iv_row = row iv_column = co</item>
      <item/>
      <item> DELETE FROM zpp_lock_root WHERE rootname = ls_alv_data-rootname.</item>
      <item> COMMIT WORK AND WAIT.</item>
      <item> ENDIF.</item>
      <item> ENDMETHOD.</item>
      <item>ENDCLASS.</item>
      <item/>
      <item>CLASS lcl_handle_tree_events DEFINITION.</item>
      <item> PUBLIC SECTION.</item>
      <item> METHODS:</item>
      <item> constructor IMPORTING io_sender TYPE REF TO zcl_pp_pdm_monitor_3</item>
      <item> io_sel TYPE REF TO cl_salv_selections_tre</item>
      <item> io_tree TYPE REF TO cl_salv_tree,</item>
      <item> on_user_command FOR EVENT added_function OF cl_salv_events IMPORTI</item>
      <item> PRIVATE SECTION.</item>
      <item> DATA: go_sender TYPE REF TO zcl_pp_pdm_monitor_3,</item>
      <item> go_sel TYPE REF TO cl_salv_selections_tree,</item>
      <item> go_tree TYPE REF TO cl_salv_tree.</item>
      <item>ENDCLASS.</item>
      <item/>
      <item>CLASS lcl_handle_tree_events IMPLEMENTATION.</item>
      <item> METHOD constructor.</item>
      <item> go_sender = io_sender.</item>
      <item> go_sel = io_sel.</item>
      <item> go_tree = io_tree.</item>
      <item> ENDMETHOD.</item>
      <item> METHOD on_user_command.</item>
      <item> DATA: lo_salv_item TYPE REF TO cl_salv_item,</item>
      <item> lo_salv_node TYPE REF TO cl_salv_node,</item>
      <item> lv_node_key TYPE salv_de_node_key,</item>
      <item> lr_data TYPE REF TO data,</item>
      <item> lt_nodes TYPE salv_t_nodes,</item>
      <item> lt_data TYPE zcl_pp_pdm_monitor_3=&gt;ty_t_tree_data.</item>
      <item/>
      <item> BREAK kosmedev.</item>
      <item>* I bottoni della pop-up di aggiornamento dei dati sono definiti nello</item>
      <item> go_sender-&gt;add_dialog_exclude( &apos;MOD_ODP&apos; ).</item>
      <item> IF ( NOT e_salv_function IS INITIAL ).</item>
      <item> lt_nodes = go_sender-&gt;get_tree_sel( EXPORTING io_sel = go_sel ).</item>
      <item> ENDIF.</item>
      <item> go_sender-&gt;set_dialog_title( iv_fcode = e_salv_function ).</item>
      <item> CASE e_salv_function.</item>
      <item> WHEN &apos;TEMPI&apos;.</item>
      <item> go_sender-&gt;change_times( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;DATE&apos;.</item>
      <item> go_sender-&gt;change_dates( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;DATE_ODP&apos;.</item>
      <item> go_sender-&gt;change_dates_odp( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;CICLI&apos;.</item>
      <item>* go_sender-&gt;create_cicli( iv_action = e_salv_function</item>
      <item> go_sender-&gt;create_cicli_by_line( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;ODP&apos;.</item>
      <item> go_sender-&gt;create_odp( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;TECO&apos;.</item>
      <item> go_sender-&gt;teco_odp( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;DIBA&apos;.</item>
      <item> go_sender-&gt;create_diba( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;MD51&apos;.</item>
      <item> go_sender-&gt;execute_md51( ).</item>
      <item> go_sender-&gt;tree_refresh( iv_force_refresh = abap_true ).</item>
      <item> RETURN.</item>
      <item/>
      <item> WHEN &apos;EXPL_UNTIL&apos;.</item>
      <item> go_sender-&gt;tree_expand_until( ).</item>
      <item/>
      <item> WHEN &apos;&amp;REFRESH&apos;.</item>
      <item> go_sender-&gt;tree_refresh( EXPORTING iv_force_refresh = abap_true</item>
      <item> RETURN.</item>
      <item/>
      <item> WHEN &apos;ANT&apos;.</item>
      <item> go_sender-&gt;accetta_anticipo( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item>* go_sender-&gt;tree_refresh( ).</item>
      <item/>
      <item> WHEN &apos;ANT_NOODP&apos;.</item>
      <item> go_sender-&gt;accetta_anticipo_noodp( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item>* go_sender-&gt;tree_refresh( ).</item>
      <item/>
      <item> WHEN &apos;PROD&apos;.</item>
      <item> go_sender-&gt;accetta_lancio_prod( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item>* go_sender-&gt;tree_refresh( ).</item>
      <item/>
      <item> WHEN &apos;PROD_NOODP&apos;.</item>
      <item> go_sender-&gt;accetta_lancio_prod_noodp( iv_action = e_salv_functio</item>
      <item> it_nodes = lt_nodes ).</item>
      <item>* go_sender-&gt;tree_refresh( ).</item>
      <item/>
      <item> WHEN &apos;CHANGE_ODP&apos;.</item>
      <item> go_sender-&gt;change_odp_components( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item>* go_sender-&gt;tree_refresh( ).</item>
      <item/>
      <item> WHEN &apos;STORNO&apos;.</item>
      <item> go_sender-&gt;storno_accettato( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item>* go_sender-&gt;tree_refresh( ).</item>
      <item/>
      <item> WHEN &apos;PH_DIBA&apos;.</item>
      <item> go_sender-&gt;phantom_in_bom( iv_action = e_salv_function</item>
      <item> it_nodes = lt_nodes ).</item>
      <item/>
      <item> WHEN &apos;&amp;&amp;BACK&apos;.</item>
      <item>* cl_gui_cfw=&gt;flush( ).</item>
      <item> IF ( go_tree IS BOUND ).</item>
      <item> FREE go_tree.</item>
      <item> ENDIF.</item>
      <item> LEAVE TO SCREEN 0.</item>
      <item/>
      <item> ENDCASE.</item>
      <item> TRY.</item>
      <item>* go_sender-&gt;tree_refresh( iv_force_refresh = abap_true ).</item>
      <item> go_sender-&gt;tree_refresh( ).</item>
      <item> CATCH cx_root.</item>
      <item> ENDTRY.</item>
      <item> ENDMETHOD.</item>
      <item>ENDCLASS.</item>
    </LOCALS_IMP>
    <LOCALS_MAC>
      <item>*&quot;* use this source file for any macro definitions you need</item>
      <item>*&quot;* in the implementation part of the class</item>
      <item/>
    </LOCALS_MAC>
    <TEXT_POOL>
      <I><item><ID>I</ID><KEY>001</KEY><ENTRY>Anagrafica Materiale Filling</ENTRY><LENGTH>56</LENGTH></item><item><ID>I</ID><KEY>002</KEY><ENTRY>Anagrafica Materiale Labelling</ENTRY><LENGTH>60</LENGTH></item><item><ID>I</ID><KEY>004</KEY><ENTRY>Anagrafica Materiale Packaging</ENTRY><LENGTH>60</LENGTH></item><item><ID>I</ID><KEY>005</KEY><ENTRY>Distinte base Filling</ENTRY><LENGTH>42</LENGTH></item><item><ID>I</ID><KEY>006</KEY><ENTRY>Distinte base Labelling</ENTRY><LENGTH>46</LENGTH></item><item><ID>I</ID><KEY>007</KEY><ENTRY>Distinte base Packaging</ENTRY><LENGTH>46</LENGTH></item><item><ID>I</ID><KEY>008</KEY><ENTRY>Anagrafica Materiale</ENTRY><LENGTH>40</LENGTH></item><item><ID>I</ID><KEY>009</KEY><ENTRY>Distinte base</ENTRY><LENGTH>23</LENGTH></item><item><ID>I</ID><KEY>010</KEY><ENTRY>Files elaborati!</ENTRY><LENGTH>26</LENGTH></item><item><ID>I</ID><KEY>011</KEY><ENTRY>Errori trasmissioni Anagrafica Materiale</ENTRY><LENGTH>80</LENGTH></item><item><ID>I</ID><KEY>012</KEY><ENTRY>Livello non creato per mancanza codice materiale</ENTRY><LENGTH>96</LENGTH></item><item><ID>I</ID><KEY>013</KEY><ENTRY>Codice padre non aperto su divisione</ENTRY><LENGTH>72</LENGTH></item><item><ID>I</ID><KEY>014</KEY><ENTRY>Errore creazione testata diba</ENTRY><LENGTH>42</LENGTH></item><item><ID>I</ID><KEY>015</KEY><ENTRY>Errore cancellazione componenti diba</ENTRY><LENGTH>72</LENGTH></item><item><ID>I</ID><KEY>016</KEY><ENTRY>Log trasmissione BOM</ENTRY><LENGTH>46</LENGTH></item><item><ID>I</ID><KEY>017</KEY><ENTRY>Log trasmissione Anagrafica Materiale</ENTRY><LENGTH>74</LENGTH></item><item><ID>I</ID><KEY>018</KEY><ENTRY>Nessuna parametrizzazione per materiale</ENTRY><LENGTH>78</LENGTH></item><item><ID>I</ID><KEY>020</KEY><ENTRY>Elenco Lista Commesse aperte</ENTRY><LENGTH>100</LENGTH></item><item><ID>I</ID><KEY>021</KEY><ENTRY>WBS mancante</ENTRY><LENGTH>22</LENGTH></item><item><ID>I</ID><KEY>I01</KEY><ENTRY>Elab. 3 di 4. Da :</ENTRY><LENGTH>29</LENGTH></item><item><ID>I</ID><KEY>I02</KEY><ENTRY>A :</ENTRY><LENGTH>5</LENGTH></item><item><ID>I</ID><KEY>I03</KEY><ENTRY>Elab. 2 di 4. Da :</ENTRY><LENGTH>29</LENGTH></item><item><ID>I</ID><KEY>I04</KEY><ENTRY>Elaborazione 3 di 4.</ENTRY><LENGTH>29</LENGTH></item></I>
    </TEXT_POOL>
    <METHOD_SOURCE>
      <ACCETTAZIONE>
        <item> METHOD accettazione.</item>
        <item> DATA(lv_mod_attive) = iv_no_diba.</item>
        <item> DATA(lv_no_diba) = iv_no_diba.</item>
        <item> BREAK kosmedev.</item>
        <item/>
        <item>* Verifica integrit√† cio√® se l&apos;Albero BOM √® corrotto</item>
        <item> diff_branch_nodes( ).</item>
        <item/>
        <item> IF ( gv_wrong_tree = abap_true ).</item>
        <item>* MESSAGE i398(00) WITH &apos;Albero corrotto. Accettazione bloccata.&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item/>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_no_diba = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* IF ( iv_no_diba = abap_false ).</item>
        <item> IF ( lv_no_diba = abap_false ).</item>
        <item> create_diba( iv_action = sy-ucomm</item>
        <item>* create_diba_2( iv_action = sy-ucomm</item>
        <item> iv_no_show_alv = iv_no_show_alv</item>
        <item> it_nodes = it_nodes ).</item>
        <item> ELSE.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR ls_tree_data-mod_su</item>
        <item>* ls_tree_data-mod_succ = &apos;U&apos; ).</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item>* ENDIF.</item>
        <item> select_branch( EXPORTING iv_elaborato = ls_tree_data-elaborato</item>
        <item> is_tree_data = ls_tree_data</item>
        <item> CHANGING ct_tree_data_sel = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> BREAK kosmedev.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item>* set_dialog_title().</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = ab</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = ab</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = ab</item>
        <item> ( fieldname = &apos;LOG&apos; visible = ab</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </ACCETTAZIONE>
      <ACCETTA_ANTICIPO>
        <item> METHOD accetta_anticipo.</item>
        <item> accettazione( iv_action = iv_action</item>
        <item> it_nodes = it_nodes</item>
        <item> iv_no_show_alv = iv_no_show_alv ).</item>
        <item> ENDMETHOD.</item>
      </ACCETTA_ANTICIPO>
      <ACCETTA_LANCIO_PROD>
        <item> METHOD accetta_lancio_prod.</item>
        <item> accettazione( iv_action = iv_action</item>
        <item> it_nodes = it_nodes</item>
        <item> iv_no_show_alv = iv_no_show_alv ).</item>
        <item> ENDMETHOD.</item>
      </ACCETTA_LANCIO_PROD>
      <ADD_TO_TREE_TABLE>
        <item> METHOD add_to_tree_table.</item>
        <item> DATA: lv_counter TYPE zpp_counter,</item>
        <item> lv_sort TYPE i.</item>
        <item/>
        <item> rv_end = abap_true. &quot;Tonolli_g - Ins</item>
        <item>* Tonolli_g - Start Del *********************************************</item>
        <item>* READ TABLE ct_albero WITH KEY datum_bom = is_data_bom-datum</item>
        <item>* uzeit_bom = is_data_bom-uzeit</item>
        <item>* counter_bom = is_data_bom-counter TRA</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item>* Tonolli_g - End Del ***********************************************</item>
        <item>* Estrazione del figlio da trasformare in padre. Chiaramente il figlio</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero) WHERE rootname = is_data_bo</item>
        <item> AND childname = is_data_bo</item>
        <item> AND relenddate = c_data_inf</item>
        <item>* Il record a cui appendere esiste e non √® cancellato</item>
        <item> DATA(lv_index) = sy-tabix.</item>
        <item> CLEAR: lv_counter.</item>
        <item/>
        <item>************************************************************************</item>
        <item>* Tonolli_g - Start Ins ********************************************</item>
        <item> DATA: l_check TYPE c.</item>
        <item> CLEAR: l_check.</item>
        <item/>
        <item> LOOP AT ct_albero INTO DATA(ls_albero_2) FROM lv_index + 1.</item>
        <item>* IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item>** Il sotto ramo √® terminato</item>
        <item>* EXIT.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> IF sy-tabix = ( lv_index + 1 ).</item>
        <item> IF ls_albero_2-lev &lt;&gt; ( ls_albero-lev + 1 ).</item>
        <item>* Non esistono componenti</item>
        <item> l_check = &apos;N&apos;.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> IF ls_albero_2-lev &lt; ls_albero-lev.</item>
        <item>* Il sotto ramo √® terminato</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ls_albero_2-lev = ls_albero-lev AND</item>
        <item> ls_albero_2-parentname &lt;&gt; ls_albero-parentname.</item>
        <item>* Il sotto ramo √® terminato</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ls_albero_2-lev &lt;&gt; ( ls_albero-lev + 1 ).</item>
        <item>* Il sotto ramo √® terminato</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( ls_albero_2-rootname = is_data_bom-rootname AND</item>
        <item> ls_albero_2-parentname = is_data_bom-parentname AND</item>
        <item> ls_albero_2-childname = is_data_bom-childname AND</item>
        <item> ls_albero_2-relstartdate = is_data_bom-relstartdate AND</item>
        <item> ls_albero_2-lev = ls_albero-lev + 1 ).</item>
        <item>* Esiste gi√† il ramo</item>
        <item> l_check = &apos;Y&apos;.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO DATA(ls_albero_2) FROM lv_index</item>
        <item/>
        <item> IF l_check = &apos;Y&apos;.</item>
        <item> is_data_bom-log = &apos;INFO : RECORD GIA PRESENTE&apos;.</item>
        <item> is_data_bom-elaborato = abap_true.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM is_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item>* Tonolli_g - End Ins **********************************************</item>
        <item>************************************************************************</item>
        <item/>
        <item>* lv_counter = ls_albero_2-counter + 1.</item>
        <item> rv_end = abap_false. &quot;Tonolli_g - Ins</item>
        <item> SELECT MAX( counter ) INTO lv_counter FROM zpp_albero WHERE rootna</item>
        <item> ADD 1 TO lv_counter.</item>
        <item/>
        <item> &quot; estrae sort relativo all&apos;ultimo nodo del parent allo stesso live</item>
        <item> &quot; lv_sort = 9999999.</item>
        <item> &quot; LOOP AT ct_albero INTO DATA(ls_albero_3) WHERE lev = ls_a</item>
        <item> &quot; ENDLOOP.</item>
        <item> &quot; BREAK kosmedev.</item>
        <item> &quot; get_last_node( EXPORTING it_albero = ct_albero</item>
        <item> &quot; CHANGING cs_albero = ls_albero_3 ).</item>
        <item> &quot; lv_sort = ls_albero_3-sort + 1.</item>
        <item> lv_sort = ls_albero-sort + 1.</item>
        <item/>
        <item> set_row_tree_table( EXPORTING is_data_bom = is_data_bom</item>
        <item> iv_counter = lv_counter</item>
        <item> iv_parent_sup = ls_albero-parentname</item>
        <item> iv_lev = ls_albero-lev + 1</item>
        <item> iv_sort = lv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item/>
        <item> APPEND ls_albero TO ct_albero.</item>
        <item/>
        <item> sort_tree_table( EXPORTING iv_index = lv_index</item>
        <item> CHANGING ct_albero = ct_albero ).</item>
        <item/>
        <item> DATA(ls_data_bom) = is_data_bom.</item>
        <item> CLEAR: ls_data_bom-log.</item>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO DATA(ls_albero) WHERE rootname</item>
        <item>* ENDIF. &quot;Tonolli_G - Del</item>
        <item> ENDMETHOD.</item>
      </ADD_TO_TREE_TABLE>
      <ADD_TREE_NODES>
        <item> METHOD add_tree_nodes.</item>
        <item> DATA: ls_data TYPE ty_s_tree_data,</item>
        <item> ls_hier TYPE ty_s_tree_hier,</item>
        <item> ls_hier_2 TYPE ty_s_tree_hier,</item>
        <item> lv_key TYPE salv_de_node_key,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_root_node TYPE REF TO cl_salv_node,</item>
        <item> lv_text TYPE lvc_value,</item>
        <item> lv_index TYPE i.</item>
        <item/>
        <item> FIELD-SYMBOLS: &lt;fs_hier&gt; TYPE ty_s_tree_hier.</item>
        <item> co_nodes = co_tree-&gt;get_nodes( ).</item>
        <item/>
        <item> gv_tree_current_level = iv_until.</item>
        <item/>
        <item> LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt; WHERE parent = iv_node</item>
        <item> AND key IS INITIAL.</item>
        <item>*add_tree_nodes</item>
        <item>*refresh lt_expand.</item>
        <item> CLEAR: ls_data.</item>
        <item/>
        <item> IF &lt;fs_hier&gt;-parent = &apos;&apos;.</item>
        <item> ELSE.</item>
        <item>* Read the ALV key of parent node and add as a child</item>
        <item> READ TABLE ct_hier INTO ls_hier WITH KEY node = &lt;fs_hier&gt;-parent</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> &quot; aggiunge come ultimo nodo</item>
        <item> lo_node = co_nodes-&gt;add_node( related_node = ls_hier-key</item>
        <item> relationship = if_salv_c_node_re</item>
        <item> ELSE.</item>
        <item>* lo_node = co_nodes-&gt;get_node( ls_hier-key ).</item>
        <item>* READ TABLE ct_data INTO ls_data WITH KEY ref = ls_hier-ref.</item>
        <item>** READ TABLE ct_data INTO ls_data WITH KEY matnr = &lt;fs_hier&gt;-</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( iv_init = abap_true ).</item>
        <item>* Save the ALV internal key</item>
        <item> &lt;fs_hier&gt;-key = lo_node-&gt;get_key( ).</item>
        <item/>
        <item>* Add the data of the tree</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-index.</item>
        <item> ls_data-key = &lt;fs_hier&gt;-key.</item>
        <item> MODIFY ct_data FROM ls_data INDEX sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> &quot; calcola quantit√† diba</item>
        <item> DATA: lv_qta_diba TYPE menge_d.</item>
        <item> lv_qta_diba = 1.</item>
        <item> ls_data-qta_diba = ls_data-menge.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_2) WITH KEY node =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data_parent) WITH KEY key =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_qta_diba = ls_data_parent-qta_diba.</item>
        <item> ENDIF.</item>
        <item> IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY parentn</item>
        <item> childna</item>
        <item> counter</item>
        <item> del</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_data-qta_diba = lv_qta_diba * ls_data-menge.</item>
        <item> IF ( NOT lv_index IS INITIAL ).</item>
        <item> MODIFY gt_tree_data FROM ls_data INDEX lv_index TRANSPORTI</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> lo_node-&gt;set_data_row( ls_data ).</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier2) WITH KEY node = &lt;fs_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data WITH KEY key = ls_hier2-key</item>
        <item> azione = &apos;D&apos; TRANSPORTING NO FI</item>
        <item> ENDIF.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_negativ</item>
        <item> ELSE.</item>
        <item> CASE ls_data-azione.</item>
        <item> WHEN &apos;I&apos; .</item>
        <item> IF ( ls_data-elaborato = abap_false ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_p</item>
        <item> ELSE.</item>
        <item> lo_node-&gt;set_row_style( 0 ).</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;D&apos;.</item>
        <item> IF ( ls_data-elaborato = abap_false OR ls_data-mod_succ = &apos;D</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_n</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;U&apos;.</item>
        <item> IF ( ls_data-elaborato = abap_false ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_c</item>
        <item> ELSE.</item>
        <item> lo_node-&gt;set_row_style( 0 ).</item>
        <item> ENDIF.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item> lv_text = ls_data-matnr.</item>
        <item> lo_node-&gt;set_text( lv_text ).</item>
        <item/>
        <item> add_tree_nodes( EXPORTING iv_init = iv_init</item>
        <item> iv_until = iv_until</item>
        <item> iv_parent = &lt;fs_hier&gt;-parent</item>
        <item> iv_node = &lt;fs_hier&gt;-node</item>
        <item> CHANGING cs_hier = &lt;fs_hier&gt;</item>
        <item> co_tree = co_tree</item>
        <item> co_nodes = co_nodes</item>
        <item> ct_hier = ct_hier</item>
        <item> ct_data = ct_data ).</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </ADD_TREE_NODES>
      <ALV_DIALOG_SAVE>
        <item> METHOD alv_dialog_save.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> IF ( gv_action IS INITIAL ).</item>
        <item> CASE sy-ucomm.</item>
        <item> WHEN &apos;MOD_ODP&apos;.</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> DATA: lt_tree_data_sel_old TYPE ty_t_tree_data_sel.</item>
        <item>* Pulisco il campo AUFNR per discriminare tra la gt_tree_data_</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(lv_tree_data_sel).</item>
        <item> CLEAR: lv_tree_data_sel-aufnr.</item>
        <item> MODIFY gt_tree_data_sel FROM lv_tree_data_sel INDEX sy-tab</item>
        <item> ENDLOOP.</item>
        <item> lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item> change_odp_components( iv_action = &apos;CHANGE_ODP&apos; &quot;spac</item>
        <item> it_nodes = gt_skipped_nodes ).</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item> ENDIF.</item>
        <item> ENDCASE.</item>
        <item> ELSE.</item>
        <item> CASE sy-ucomm.</item>
        <item> WHEN &apos;MOD_ODP&apos;.</item>
        <item> MESSAGE i398(00) WITH &apos;Allineare prima le BOM&apos;.</item>
        <item> RETURN.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item> CASE gv_action.</item>
        <item> WHEN &apos;TEMPI&apos;.</item>
        <item> save_times( ).</item>
        <item> WHEN &apos;DATE&apos;.</item>
        <item> save_dates( ).</item>
        <item> WHEN &apos;DATE_ODP&apos;.</item>
        <item> save_dates_odp( ).</item>
        <item> WHEN &apos;CICLI&apos;.</item>
        <item> save_cicli( ).</item>
        <item> WHEN &apos;ODP&apos;.</item>
        <item> save_odp( ).</item>
        <item> WHEN &apos;TECO&apos;.</item>
        <item> save_teco_odp( ).</item>
        <item> WHEN &apos;DIBA&apos;.</item>
        <item> save_diba( ).</item>
        <item> WHEN &apos;ANT&apos;.</item>
        <item> save_accetta_anticipo( ).</item>
        <item> WHEN &apos;PROD&apos;.</item>
        <item> save_accetta_anticipo_prod( ).</item>
        <item> WHEN &apos;ANT_NOODP&apos;.</item>
        <item> save_accetta_ant_noodp( ).</item>
        <item> WHEN &apos;PROD_NOODP&apos;.</item>
        <item> save_accetta_ant_prod_noodp( ).</item>
        <item> WHEN &apos;CHANGE_ODP&apos;.</item>
        <item> save_odp_components( ).</item>
        <item> WHEN &apos;STORNO&apos;.</item>
        <item>* save_storno_accettato( ).</item>
        <item> WHEN &apos;PH_DIBA&apos;.</item>
        <item> save_phantom_in_diba( ).</item>
        <item> ENDCASE.</item>
        <item> ENDMETHOD.</item>
      </ALV_DIALOG_SAVE>
      <ALV_DIALOG_SHOW>
        <item> METHOD alv_dialog_show.</item>
        <item> DATA: lt_fieldcat TYPE slis_t_fieldcat_alv,</item>
        <item> ls_fieldcat TYPE slis_fieldcat_alv,</item>
        <item> lv_col_pos TYPE sy-cucol.</item>
        <item/>
        <item> REFRESH: lt_fieldcat.</item>
        <item> CLEAR: lt_fieldcat.</item>
        <item> FREE: lt_fieldcat.</item>
        <item/>
        <item> lv_col_pos = 1.</item>
        <item> LOOP AT it_fields INTO DATA(ls_fields).</item>
        <item> CLEAR: ls_fieldcat.</item>
        <item> ls_fieldcat-fieldname = ls_fields-fieldname.</item>
        <item> IF ( ls_fields-visible = abap_false ).</item>
        <item> ls_fieldcat-no_out = abap_true.</item>
        <item> ENDIF.</item>
        <item> ls_fieldcat-edit = ls_fields-editable.</item>
        <item> ls_fieldcat-col_pos = lv_col_pos.</item>
        <item> IF ( ls_fields-type = &apos;CHECKBOX&apos; ).</item>
        <item> ls_fieldcat-checkbox = abap_true.</item>
        <item> ENDIF.</item>
        <item> IF ( ls_fields-length &gt; 0 ).</item>
        <item> ls_fieldcat-outputlen = ls_fields-length.</item>
        <item> ENDIF.</item>
        <item> APPEND ls_fieldcat TO lt_fieldcat.</item>
        <item> ADD 1 TO lv_col_pos.</item>
        <item> ENDLOOP.</item>
        <item> DATA: lo_struct_descr TYPE REF TO cl_abap_structdescr.</item>
        <item> TRY.</item>
        <item> lo_struct_descr ?= cl_abap_structdescr=&gt;describe_by_name( &apos;ZPP_P</item>
        <item> LOOP AT lo_struct_descr-&gt;get_components( ) INTO DATA(ls_componen</item>
        <item> READ TABLE it_fields WITH KEY fieldname = ls_components-name T</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> CLEAR: ls_fieldcat.</item>
        <item> ls_fieldcat-fieldname = ls_components-name.</item>
        <item> ls_fieldcat-no_out = abap_true.</item>
        <item> ls_fieldcat-edit = abap_false.</item>
        <item> APPEND ls_fieldcat TO lt_fieldcat.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> DATA: lv_exit TYPE slis_exit_by_user,</item>
        <item> ls_layout TYPE slis_layout_alv.</item>
        <item> CLEAR: lv_exit.</item>
        <item> ls_layout-colwidth_optimize = abap_true.</item>
        <item> CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;</item>
        <item> EXPORTING</item>
        <item>* i_interface_check = abap_true</item>
        <item>* I_BYPASSING_BUFFER = abap_true</item>
        <item>* i_buffer_active = abap_true</item>
        <item> i_callback_program = get_program( )</item>
        <item> i_callback_pf_status_set = &apos;CALLBACK_PF_STATUS_SET&apos;</item>
        <item> i_callback_user_command = &apos;CALLBACK_USER_COMMAND&apos;</item>
        <item>* i_callback_top_of_page = &apos; &apos;</item>
        <item>* I_CALLBACK_HTML_TOP_OF_PAGE = &apos; &apos;</item>
        <item>* I_CALLBACK_HTML_END_OF_LIST = &apos; &apos;</item>
        <item> i_structure_name = &apos;ZPP_PDM_MONITOR_ALV&apos;</item>
        <item>* I_BACKGROUND_ID = &apos; &apos;</item>
        <item> i_grid_title = get_dialog_title( )</item>
        <item>* I_GRID_SETTINGS =</item>
        <item> is_layout = ls_layout</item>
        <item> it_fieldcat = lt_fieldcat</item>
        <item>* IT_EXCLUDING =</item>
        <item>* IT_SPECIAL_GROUPS =</item>
        <item>* IT_SORT =</item>
        <item>* IT_FILTER =</item>
        <item>* IS_SEL_HIDE =</item>
        <item>* I_DEFAULT = &apos;X&apos;</item>
        <item>* I_SAVE = &apos; &apos;</item>
        <item>* IS_VARIANT =</item>
        <item>* IT_EVENTS =</item>
        <item>* IT_EVENT_EXIT =</item>
        <item>* IS_PRINT =</item>
        <item>* IS_REPREP_ID =</item>
        <item> i_screen_start_column = 20</item>
        <item> i_screen_start_line = 5</item>
        <item> i_screen_end_column = 150</item>
        <item> i_screen_end_line = 20</item>
        <item>* I_HTML_HEIGHT_TOP = 0</item>
        <item>* I_HTML_HEIGHT_END = 0</item>
        <item>* IT_ALV_GRAPHICS =</item>
        <item>* IT_HYPERLINK =</item>
        <item>* IT_ADD_FIELDCAT =</item>
        <item>* IT_EXCEPT_QINFO =</item>
        <item>* IR_SALV_FULLSCREEN_ADAPTER =</item>
        <item> IMPORTING</item>
        <item>* E_EXIT_CAUSED_BY_CALLER =</item>
        <item> es_exit_caused_by_user = lv_exit</item>
        <item> TABLES</item>
        <item> t_outtab = ct_data</item>
        <item> EXCEPTIONS</item>
        <item> program_error = 1</item>
        <item> OTHERS = 2.</item>
        <item> IF ( lv_exit-back = abap_true OR lv_exit-cancel = abap_true OR lv_ex</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </ALV_DIALOG_SHOW>
      <ALV_SHOW>
        <item> METHOD alv_show.</item>
        <item> IF ( NOT ct_data[] IS INITIAL ).</item>
        <item> DATA: lt_fieldcat TYPE slis_t_fieldcat_alv,</item>
        <item> is_print TYPE slis_print_alv,</item>
        <item> lv_program TYPE sy-repid.</item>
        <item> FIELD-SYMBOLS &lt;ct_data&gt; TYPE table.</item>
        <item/>
        <item> lv_program = get_program( ).</item>
        <item/>
        <item> ASSIGN (&apos;CT_DATA[]&apos;) TO &lt;ct_data&gt;.</item>
        <item/>
        <item> DATA lo_alv TYPE REF TO cl_salv_table.</item>
        <item> DATA lo_display TYPE REF TO cl_salv_display_settings.</item>
        <item> DATA: lt_fcat TYPE lvc_t_fcat.</item>
        <item/>
        <item> DATA: lv_lenght TYPE i.</item>
        <item> DATA: lv_title TYPE char70.</item>
        <item/>
        <item> lo_alv = get_alv( ).</item>
        <item/>
        <item> TRY.</item>
        <item> cl_salv_table=&gt;factory(</item>
        <item> IMPORTING</item>
        <item> r_salv_table = lo_alv</item>
        <item> CHANGING</item>
        <item> t_table = &lt;ct_data&gt; ).</item>
        <item>* lt_fcat = cl_salv_controller_metadata=&gt;get_lvc_fieldcatalog(</item>
        <item>* r_columns = lo_alv-&gt;get_columns( ) &quot; ALV Fil</item>
        <item>* r_aggregations = lo_alv-&gt;get_aggregations( ) ).&quot;</item>
        <item>* LOOP AT lt_fcat INTO DATA(ls_fcat) WHERE fieldname = &apos;TYPE&apos;.</item>
        <item>* ls_fcat-ref_field = &apos;TIPOFILE&apos;.</item>
        <item>* ls_fcat-ref_table = &apos;ZTBC000001&apos;.</item>
        <item>* MODIFY lt_fcat FROM ls_fcat.</item>
        <item>* ENDLOOP.</item>
        <item>* cl_salv_controller_metadata=&gt;set_lvc_fieldcatalog( EXPORTING</item>
        <item>*</item>
        <item>*</item>
        <item> CATCH cx_salv_msg.</item>
        <item> ENDTRY.</item>
        <item/>
        <item> DATA: lo_functions TYPE REF TO cl_salv_functions_list.</item>
        <item/>
        <item> lo_functions = lo_alv-&gt;get_functions( ).</item>
        <item> lo_functions-&gt;set_all( abap_true ).</item>
        <item/>
        <item> lo_display = lo_alv-&gt;get_display_settings( ).</item>
        <item> lo_display-&gt;set_list_header( iv_title ).</item>
        <item> lo_display-&gt;set_striped_pattern( cl_salv_display_settings=&gt;true ).</item>
        <item/>
        <item> TRY.</item>
        <item> DATA: lv_text TYPE string VALUE &apos;button&apos;.</item>
        <item> lv_text = TEXT-b01.</item>
        <item> lo_functions-&gt;add_function(</item>
        <item> name = &apos;GET_SEL&apos;</item>
        <item> icon = &apos;ICON_EXECUTE_OBJECT&apos;</item>
        <item> text = lv_text</item>
        <item> tooltip = lv_text</item>
        <item> position = if_salv_c_function_position=&gt;right_of_salv_functi</item>
        <item> CATCH cx_salv_wrong_call cx_salv_existing cx_salv_method_not_sup</item>
        <item> ENDTRY.</item>
        <item/>
        <item> DATA: lo_columns TYPE REF TO cl_salv_columns.</item>
        <item> lo_columns = lo_alv-&gt;get_columns( ).</item>
        <item> DATA: lo_column TYPE REF TO cl_salv_column.</item>
        <item> TRY.</item>
        <item> lo_columns-&gt;set_optimize( abap_true ).</item>
        <item>* lo_column = lo_cols-&gt;get_column( &apos;TYPE&apos; ).</item>
        <item>* lo_column-&gt;set_long_text( &apos;Avl Date&apos; ). &quot;#EC NOTEXT</item>
        <item>* lo_column-&gt;set_medium_text( &apos;Avl Date&apos; ). &quot;#EC NOTEXT</item>
        <item>* lo_column-&gt;set_short_text( &apos;Avl Date&apos; ). &quot;#EC NOTEXT</item>
        <item>* lo_column-&gt;set_output_length( 10 ).</item>
        <item> CATCH cx_salv_not_found. &quot;#EC NO_HANDLER</item>
        <item> ENDTRY.</item>
        <item/>
        <item> IF ( iv_type &lt;&gt; c_alv_view_bad_mat ).</item>
        <item> DATA: lo_layout TYPE REF TO cl_salv_layout,</item>
        <item> ls_variant TYPE slis_vari.</item>
        <item> lo_layout = lo_alv-&gt;get_layout( ).</item>
        <item> lo_layout-&gt;set_save_restriction( if_salv_c_layout=&gt;restrict_none</item>
        <item> lo_layout-&gt;set_key( go_salv-&gt;get_key( ) ).</item>
        <item> IF ( NOT gs_sel-p_layout IS INITIAL ).</item>
        <item> lo_layout-&gt;set_initial_layout( gs_sel-p_layout ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> lo_alv-&gt;set_screen_status( report = get_program( )</item>
        <item> pfstatus = get_pfstatus( )</item>
        <item> set_functions = lo_alv-&gt;c_functions_all</item>
        <item/>
        <item> DATA : lo_selections TYPE REF TO cl_salv_selections,</item>
        <item> lo_events TYPE REF TO cl_salv_events_table,</item>
        <item> lo_event_handler TYPE REF TO lcl_handle_events.</item>
        <item/>
        <item> lo_events = lo_alv-&gt;get_event( ).</item>
        <item> lo_event_handler = NEW #( io_sender = me ).</item>
        <item> SET HANDLER lo_event_handler-&gt;on_user_command FOR lo_events.</item>
        <item> SET HANDLER lo_event_handler-&gt;on_double_click FOR lo_events.</item>
        <item/>
        <item> IF lo_alv IS BOUND.</item>
        <item> set_alv( CHANGING co_alv = lo_alv ).</item>
        <item> lo_alv-&gt;display( ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </ALV_SHOW>
      <BACKUP_ACCETTATO>
        <item> METHOD backup_accettato.</item>
        <item> LOOP AT it_alberob INTO DATA(ls_alberob).</item>
        <item> DELETE FROM zpp_alberob WHERE rootname = ls_alberob-rootname.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> MODIFY zpp_alberob FROM TABLE it_alberob.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDMETHOD.</item>
      </BACKUP_ACCETTATO>
      <BDC_DYNPRO>
        <item> METHOD bdc_dynpro.</item>
        <item> DATA: ls_bdcdata TYPE ty_s_bdcdata.</item>
        <item> CLEAR ls_bdcdata.</item>
        <item> ls_bdcdata-program = iv_program.</item>
        <item> ls_bdcdata-dynpro = iv_dynpro.</item>
        <item> ls_bdcdata-dynbegin = &apos;X&apos;.</item>
        <item> APPEND ls_bdcdata TO ct_bdcdata.</item>
        <item> ENDMETHOD.</item>
      </BDC_DYNPRO>
      <BDC_FIELD>
        <item> METHOD bdc_field.</item>
        <item> DATA: ls_bdcdata TYPE ty_s_bdcdata.</item>
        <item> CLEAR ls_bdcdata.</item>
        <item> ls_bdcdata-fnam = iv_fnam.</item>
        <item> ls_bdcdata-fval = iv_fval.</item>
        <item> APPEND ls_bdcdata TO ct_bdcdata.</item>
        <item> ENDMETHOD.</item>
      </BDC_FIELD>
      <BUILD_TREE_TABLE>
        <item> METHOD build_tree_table.</item>
        <item> DATA: ls_albero TYPE ty_s_albero,</item>
        <item> lv_lev TYPE zpp_pdm_level,</item>
        <item> lv_first TYPE abap_bool,</item>
        <item> lv_counter TYPE zpp_counter.</item>
        <item/>
        <item> lv_first = abap_true.</item>
        <item/>
        <item> lv_lev = iv_lev + 1.</item>
        <item>* lv_counter = 0.</item>
        <item>* SELECT MAX( counter ) INTO cv_counter FROM zpp_albero WHERE rootnam</item>
        <item>** ADD 1 TO lv_counter.</item>
        <item> ADD 1 TO cv_counter.</item>
        <item> ADD c_inc_sort TO cv_sort.</item>
        <item/>
        <item>* Elaborazione dei figli di primo livello</item>
        <item> LOOP AT ct_data_bom INTO DATA(ls_data_bom) FROM iv_index</item>
        <item> WHERE rootname = iv_roo</item>
        <item> AND parentname = iv_par</item>
        <item> AND elaborato = abap_f</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item>* READ TABLE ct_albero WITH KEY rootname = ls_data_bom-rootname</item>
        <item>* parentname = ls_data_bom-parentname</item>
        <item>* childname = ls_data_bom-childname</item>
        <item>* parent_sup = iv_parent_sup TRANSPOR</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* &quot; TODO: eventuale log</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* Costruzione del 1¬∞ Nodo dell&apos;Albero BOM</item>
        <item> IF ( iv_rootname = iv_parent AND lv_first = abap_true ).</item>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bom</item>
        <item> iv_counter = cv_counter</item>
        <item> iv_lev = lv_lev</item>
        <item> iv_sort = cv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-relqty = 1.</item>
        <item> CLEAR: ls_albero-parentname.</item>
        <item> ls_albero-childname = ls_albero-rootname.</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> APPEND ls_albero TO ct_albero.</item>
        <item> lv_first = abap_false.</item>
        <item> ADD 1 TO cv_counter.</item>
        <item> ADD c_inc_sort TO cv_sort.</item>
        <item> lv_lev = lv_lev + 1.</item>
        <item/>
        <item>* ls_data_bom-elaborato = abap_true.</item>
        <item>* MODIFY ct_data_bom FROM ls_data_bom INDEX lv_tabix TRANSPORTING</item>
        <item/>
        <item>* CONTINUE.</item>
        <item> ENDIF.</item>
        <item/>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bom</item>
        <item> iv_counter = cv_counter</item>
        <item> iv_parent_sup = iv_parent_sup</item>
        <item> iv_lev = lv_lev</item>
        <item> iv_sort = cv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> APPEND ls_albero TO ct_albero.</item>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY ct_data_bom FROM ls_data_bom INDEX lv_tabix TRANSPORTING el</item>
        <item>* build_tree_table_recursive( EXPORTING iv_rootname = iv_rootname</item>
        <item>* iv_parent = ls_data_bom</item>
        <item>* iv_parent_sup = ls_data_bom</item>
        <item>* iv_index = lv_tabix +</item>
        <item>* iv_lev = lv_lev</item>
        <item>* CHANGING ct_albero = ct_albero</item>
        <item>* ct_data_bom = ct_data_bom</item>
        <item>* cv_counter = cv_counter</item>
        <item>* cv_sort = cv_sort ).</item>
        <item/>
        <item>* Lettura della tabella ZPP_PDM_MON_BOM in ricorsione prima in profo</item>
        <item> DATA(lv_ret) =</item>
        <item> build_tree_table_recursive_2( EXPORTING iv_rootname = iv_rootn</item>
        <item> iv_parent = ls_data_</item>
        <item> iv_parent_sup = ls_data_</item>
        <item> iv_index = lv_tabix</item>
        <item> iv_lev = lv_lev</item>
        <item> CHANGING ct_albero = ct_albero</item>
        <item> ct_data_bom = ct_data_bom</item>
        <item> cv_counter = cv_counter</item>
        <item> cv_sort = cv_sort ).</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT ct_data_bom INTO DATA(ls_data_bom) FROM iv_index</item>
        <item/>
        <item> ENDMETHOD.</item>
      </BUILD_TREE_TABLE>
      <BUILD_TREE_TABLE_RECURSIVE_2>
        <item> METHOD build_tree_table_recursive_2.</item>
        <item> DATA: ls_albero TYPE ty_s_albero,</item>
        <item> lv_lev TYPE zpp_pdm_level,</item>
        <item> lv_first TYPE abap_bool,</item>
        <item> lv_counter TYPE zpp_counter,</item>
        <item> lv_lines TYPE i.</item>
        <item/>
        <item> lv_first = abap_true.</item>
        <item/>
        <item> rv_ret = 8.</item>
        <item/>
        <item> ev_index = iv_index.</item>
        <item>* lv_lev = iv_lev + 1.</item>
        <item/>
        <item> ADD 1 TO cv_counter.</item>
        <item> ADD c_inc_sort TO cv_sort.</item>
        <item/>
        <item> DESCRIBE TABLE ct_data_bom LINES lv_lines.</item>
        <item> IF ( iv_index BETWEEN 1 AND lv_lines ).</item>
        <item>* LOOP AT ct_data_bom INTO DATA(ls_data_bom) FROM iv_index</item>
        <item>* WHERE rootname = iv_ro</item>
        <item>* AND parentname = iv_pa</item>
        <item>* AND elaborato = abap_</item>
        <item> READ TABLE ct_data_bom INTO DATA(ls_data_bom) INDEX iv_index.</item>
        <item> IF sy-subrc = 0 AND</item>
        <item> ls_data_bom-rootname = iv_rootname AND</item>
        <item> ls_data_bom-parentname = iv_parent AND</item>
        <item> ls_data_bom-elaborato = abap_false.</item>
        <item/>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> lv_lev = iv_lev + 1.</item>
        <item> ev_index = lv_tabix.</item>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bom</item>
        <item> iv_counter = cv_counter</item>
        <item> iv_parent_sup = iv_parent_sup</item>
        <item> iv_lev = lv_lev</item>
        <item> iv_sort = cv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item/>
        <item>* Costruzione Albero BOM</item>
        <item> APPEND ls_albero TO ct_albero. &quot;&lt;------</item>
        <item/>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY ct_data_bom FROM ls_data_bom INDEX lv_tabix TRANSPORTING</item>
        <item> rv_ret = 0.</item>
        <item/>
        <item>* Elaborazione prima in profondit√†</item>
        <item> DATA(lv_ret) =</item>
        <item> build_tree_table_recursive_2( EXPORTING iv_rootname = iv_roo</item>
        <item> iv_parent = ls_dat</item>
        <item> iv_parent_sup = ls_dat</item>
        <item> iv_index = lv_tab</item>
        <item> iv_lev = lv_lev</item>
        <item> IMPORTING ev_index = ev_ind</item>
        <item> CHANGING ct_albero = ct_albero</item>
        <item> ct_data_bom = ct_data_b</item>
        <item> cv_counter = cv_counte</item>
        <item> cv_sort = cv_sort )</item>
        <item> &quot;IF ( lv_ret &lt;&gt; 0 ). &quot;TG01 - DEL</item>
        <item>* lv_index = iv_index.</item>
        <item/>
        <item>* Elaborazione in ampiezza</item>
        <item> lv_ret =</item>
        <item> build_tree_table_recursive_2( EXPORTING iv_rootname = iv_roo</item>
        <item> iv_parent = ls_dat</item>
        <item> iv_parent_sup = ls_dat</item>
        <item> iv_index = ev_ind</item>
        <item> iv_lev = lv_lev</item>
        <item> IMPORTING ev_index = ev_ind</item>
        <item> CHANGING ct_albero = ct_albero</item>
        <item> ct_data_bom = ct_data_b</item>
        <item> cv_counter = cv_counte</item>
        <item> cv_sort = cv_sort )</item>
        <item>* ELSE.</item>
        <item>* EXIT.</item>
        <item> &quot;ENDIF. &quot;TG01- DEL</item>
        <item>* ENDLOOP.</item>
        <item>* Siamo nel caso in cui non esiste un ulteriore livello quindi siamo a</item>
        <item>* IF sy-subrc &lt;&gt; 0.</item>
        <item> ELSE. &quot;READ TABLE ct_data_bom INTO DATA(ls_data_bom) INDEX iv_i</item>
        <item> rv_ret = 8.</item>
        <item> ENDIF. &quot;READ TABLE ct_data_bom INTO DATA(ls_data_bom) INDEX iv_i</item>
        <item> ELSE. &quot;IF ( iv_index BETWEEN 1 AND lv_lines ).</item>
        <item> rv_ret = 0.</item>
        <item> ENDIF. &quot;IF ( iv_index BETWEEN 1 AND lv_lines ).</item>
        <item/>
        <item> ENDMETHOD.</item>
      </BUILD_TREE_TABLE_RECURSIVE_2>
      <CHANGE_DATES>
        <item> METHOD change_dates.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item/>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-plnum IS NOT INITIAL ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item/>
        <item>* Aggiunta degli altri eventuali Ord.Pian.</item>
        <item> DATA: lv_plaf_1 TYPE plaf.</item>
        <item> DATA: lv_plaf_2 TYPE plaf.</item>
        <item> DATA: lt_tree_data_sel_1 TYPE ty_t_tree_data_sel.</item>
        <item> REFRESH: lt_tree_data_sel_1.</item>
        <item> CLEAR: lt_tree_data_sel_1.</item>
        <item> FREE: lt_tree_data_sel_1.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(lv_tree_data_sel_1).</item>
        <item> SELECT SINGLE * INTO lv_plaf_1</item>
        <item> FROM plaf</item>
        <item> WHERE plnum = lv_tree_data_sel_1-plnum.</item>
        <item> SELECT plnum verid psttr pedtr</item>
        <item> INTO (lv_tree_data_sel_1-plnum, lv_tree_data_sel_1-verid, lv_tre</item>
        <item> FROM plaf</item>
        <item> WHERE plnum &lt;&gt; lv_plaf_1-plnum</item>
        <item> AND matnr = lv_plaf_1-matnr</item>
        <item> AND plwrk = lv_plaf_1-plwrk</item>
        <item> AND pwwrk = lv_plaf_1-pwwrk</item>
        <item> AND pspel = lv_plaf_1-pspel.</item>
        <item> APPEND lv_tree_data_sel_1 TO lt_tree_data_sel_1.</item>
        <item> ENDSELECT.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(lv_tree_data_sel_1).</item>
        <item> LOOP AT lt_tree_data_sel_1 INTO lv_tree_data_sel_1.</item>
        <item> APPEND lv_tree_data_sel_1 TO gt_tree_data_sel.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(lv_tree_data_sel_1).</item>
        <item/>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;PLNUM&apos; visible = abap</item>
        <item> ( fieldname = &apos;VERID&apos; visible = abap</item>
        <item> ( fieldname = &apos;PSTTR&apos; visible = abap</item>
        <item> ( fieldname = &apos;PEDTR&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CHANGE_DATES>
      <CHANGE_DATES_ODP>
        <item> METHOD change_dates_odp.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item/>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-aufnr IS NOT INITIAL ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;AUFNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;GSTRP&apos; visible = abap</item>
        <item> ( fieldname = &apos;GLTRP&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CHANGE_DATES_ODP>
      <CHANGE_ODP_COMPONENTS>
        <item> METHOD change_odp_components.</item>
        <item> DATA: &quot;lv_index TYPE i,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item/>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Estrazione eventuali materiali (antenati) dell&apos;albero BOM con OdP qu</item>
        <item> select_odp( EXPORTING it_nodes = it_nodes</item>
        <item> IMPORTING et_nodes = DATA(lt_nodes) ).</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> &quot;lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos; AN</item>
        <item>* IF ( ls_tree_data-aufnr IS NOT INITIAL ). &quot;Tonolli_G - 16.0</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel. &quot;&lt;------</item>
        <item>* Valorizzazione ct_tree_data_sel</item>
        <item> select_branch( EXPORTING iv_elaborato = ls_tree_data-elaborato</item>
        <item> is_tree_data = ls_tree_data</item>
        <item> CHANGING ct_tree_data_sel = gt_tree_data_sel ).</item>
        <item> DELETE gt_tree_data_sel WHERE aufnr IS INITIAL.</item>
        <item>* ENDIF. &quot;IF ( ls_tree_data-aufnr IS NOT INITIAL ). &quot;Ton</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* aggiungo eventuali nodi padre in caso di righe selezionate phantom</item>
        <item> LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_nodes-</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos; AN</item>
        <item> IF ( ls_tree_data-aufnr IS NOT INITIAL ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO ls_hier WITH KEY ref = ls_tree_</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> DELETE gt_tree_data_sel WHERE beskz &lt;&gt; &apos;E&apos;</item>
        <item> OR disgr &lt;&gt; &apos;ZMTO&apos;</item>
        <item> OR aufnr IS INITIAL.</item>
        <item> DATA: lv_qta_261 TYPE menge_d,</item>
        <item> lv_qta_262 TYPE menge_d.</item>
        <item/>
        <item> SORT gt_tree_data_sel BY key.</item>
        <item/>
        <item> DATA: lt_tree_data_sel TYPE ty_t_tree_data_sel,</item>
        <item> lt_odp TYPE zcl_pp_pdm_monitor_3=&gt;ty_t_odp.</item>
        <item> lt_tree_data_sel[] = gt_tree_data_sel[].</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel[].</item>
        <item> CLEAR: gt_tree_data_sel[].</item>
        <item> FREE: gt_tree_data_sel[].</item>
        <item/>
        <item> LOOP AT lt_tree_data_sel INTO ls_tree_data_sel.</item>
        <item> DATA(lv_data_sel_tabix) = sy-tabix.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = ls_</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = ls_</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY ref = ls_tree_h</item>
        <item> DATA(lv_data_tabix) = sy-tabix.</item>
        <item>* Estrazione OdP</item>
        <item> get_odp_info( CHANGING cs_tree_data = ls_tree_data</item>
        <item> ct_odp = lt_odp ).</item>
        <item/>
        <item> LOOP AT lt_odp INTO DATA(ls_odp).</item>
        <item> DATA(lv_tabix_odp) = sy-tabix.</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY key = ls_tree_data_sel-ke</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY ref = ls_tree_data_sel-re</item>
        <item> aufnr = ls_odp-aufnr TRANSP</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> IF ( lv_tabix_odp &gt; 1 ).</item>
        <item> DATA: lt_stati_sistema TYPE ztpp_stati_sist_t,</item>
        <item> lt_stati_utente TYPE ztpp_stati_sist_t.</item>
        <item/>
        <item> REFRESH: lt_stati_sistema, lt_stati_utente.</item>
        <item> CLEAR: lt_stati_sistema, lt_stati_utente.</item>
        <item> FREE: lt_stati_sistema, lt_stati_utente.</item>
        <item/>
        <item> CALL FUNCTION &apos;ZPP_ESTRAI_STATI_ODP&apos;</item>
        <item> EXPORTING</item>
        <item> i_aufnr = ls_odp-aufnr</item>
        <item> IMPORTING</item>
        <item>* e_esito = lv_esito</item>
        <item>* E_DESCR_ESITO =</item>
        <item> et_stati_sistema = lt_stati_sistema</item>
        <item> et_stati_utente = lt_stati_utente.</item>
        <item> MOVE-CORRESPONDING ls_odp TO ls_tree_data_sel.</item>
        <item> CLEAR: ls_tree_data_sel-odp_utstats, ls_tree_data_sel-odp_st</item>
        <item> LOOP AT lt_stati_sistema INTO DATA(ls_stati_sistema).</item>
        <item> ls_tree_data_sel-odp_stats = ls_tree_data_sel-odp_stats &amp;&amp;</item>
        <item> ENDLOOP.</item>
        <item> LOOP AT lt_stati_utente INTO DATA(ls_stati_utente).</item>
        <item> ls_tree_data_sel-odp_utstats = ls_tree_data_sel-odp_utstat</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel.</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item/>
        <item>* Gestione OdP duplicato</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_1) TO lv_tabix</item>
        <item> WHERE aufnr = ls_tree_data_sel-aufnr.</item>
        <item> EXIT. &quot;Trovato stesso OdP</item>
        <item> ENDLOOP.</item>
        <item> IF sy-subrc = 0.</item>
        <item> DELETE gt_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Condizioni per la Rilettura: se APER rileggere odp; se non APER, q</item>
        <item>* se esistono non rileggere; se non esistono verificare che odp sia</item>
        <item> IF ( ls_tree_data_sel-odp_stats CS &apos;APER&apos; AND sy-langu = &apos;I&apos; ) OR</item>
        <item> ( ls_tree_data_sel-odp_stats CS &apos;EROF&apos; AND sy-langu = &apos;D&apos; ) OR</item>
        <item> ( ls_tree_data_sel-odp_stats CS &apos;CRTD&apos; AND sy-langu = &apos;E&apos; ).</item>
        <item> ls_tree_data_sel-odp_cons = abap_false. &quot;Consumo NO</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix TRA</item>
        <item> ELSE.</item>
        <item> CLEAR: lv_qta_261, lv_qta_262.</item>
        <item> SELECT SUM( menge ) INTO lv_qta_261 FROM aufm WHERE aufnr = ls_t</item>
        <item> AND werks = &apos;630</item>
        <item> AND bwart = &apos;261</item>
        <item> SELECT SUM( menge ) INTO lv_qta_262 FROM aufm WHERE aufnr = ls_t</item>
        <item> AND werks = &apos;630</item>
        <item> AND bwart = &apos;262</item>
        <item> IF ( lv_qta_261 - lv_qta_262 &gt; 0 ).</item>
        <item> ls_tree_data_sel-odp_cons = abap_true. &quot;Consumo SI</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix T</item>
        <item> ELSE.</item>
        <item>* Non esiste consumo, serve quindi verificare lo stato utente pe</item>
        <item> IF ( ls_tree_data_sel-odp_utstats CS &apos;PDC0&apos; AND NOT ( ls_tree_</item>
        <item> ls_tree_data_sel-odp_cons = abap_false. &quot;Consumo NO</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix</item>
        <item> ELSE.</item>
        <item>* Consumi al momento non ci sono ma la presenza della lista di</item>
        <item> ls_tree_data_sel-odp_cons = abap_true. &quot;Consumo SI</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix</item>
        <item> ENDIF. &quot;IF ( ls_tree_data_sel-odp_utstats CS &apos;PDC0&apos; ).</item>
        <item> ENDIF. &quot;IF ( lv_qta_261 - lv_qta_262 &gt; 0 ).</item>
        <item> ENDIF. &quot;IF ( ls_tree_data_sel-odp_stats CS &apos;APER&apos; AND sy-langu =</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> add_dialog_exclude( &apos;MOD_ODP&apos; ).</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible =</item>
        <item> ( fieldname = &apos;AUFNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;ODP_CONS&apos; visible = a</item>
        <item> ( fieldname = &apos;ODP_STATS&apos; visible =</item>
        <item> ( fieldname = &apos;ODP_UTSTATS&apos; visible</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </CHANGE_ODP_COMPONENTS>
      <CHANGE_TIMES>
        <item> METHOD change_times.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item>* Inizio modifiche S.B. check codici da modificare</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item> IF ( sy-subrc = 0 ) AND</item>
        <item> ( ls_tree_data-matnr(1) = &apos;K&apos; OR</item>
        <item> ls_tree_data-matnr(1) = &apos;6&apos; OR</item>
        <item> ls_tree_data-matnr(1) = &apos;8&apos; OR</item>
        <item> ls_tree_data-matnr(1) = &apos;R&apos; OR</item>
        <item> ls_tree_data-matnr(1) = &apos;5&apos; ) AND &quot;S.B. 20161229</item>
        <item> ls_tree_data-disgr = &apos;ZMTO&apos;.</item>
        <item>* fine modifiche S.B</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_tre</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item/>
        <item> READ TABLE gt_tree_data_sel INTO DATA(lv_tree_data_sel_1) WITH K</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item/>
        <item>* select_branch( EXPORTING is_tree_data = ls_tree_data</item>
        <item>* CHANGING ct_tree_data_sel = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;BESKZ&apos; visible = abap</item>
        <item> ( fieldname = &apos;SOBSL&apos; visible = abap</item>
        <item> ( fieldname = &apos;DZEIT&apos; visible = abap</item>
        <item> ( fieldname = &apos;PLIFZ&apos; visible = abap</item>
        <item> ( fieldname = &apos;WEBAZ&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATKL&apos; visible = abap</item>
        <item> ( fieldname = &apos;DISMM&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap_</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CHANGE_TIMES>
      <CHECK_COMPONENTS>
        <item> METHOD check_components.</item>
        <item> DATA: lv_matnr TYPE matnr,</item>
        <item> ls_bad_comp TYPE ty_s_bad_comp,</item>
        <item> lt_matnr TYPE TABLE OF matnr,</item>
        <item> ls_matnr TYPE matnr,</item>
        <item> lt_albero TYPE ty_t_albero.</item>
        <item/>
        <item/>
        <item>* Tonolli_G - 10.01.2017 - Al doppio click sull&apos;ALV delle anagrafiche</item>
        <item>* &quot; esegue acquisizione del file vincolato alla presenza dello specif</item>
        <item>* get_data( EXPORTING is_sel = gs_sel CHANGING ct_data_bom = gt_</item>
        <item>* ct_data_anag = gt_</item>
        <item>* &quot; Esegue il caricamento dei file nelle tabelle ZPP_PDM_MON_ANAG e Z</item>
        <item>* &quot; NON ALIMENTA la tabella ZPP_ALBERO.</item>
        <item>* process_files( iv_no_alv = abap_true</item>
        <item>* iv_no_init = abap_true ).</item>
        <item/>
        <item> REFRESH: gt_bad_comp, lt_matnr, gt_tree_hier, gt_tree_data, gt_alber</item>
        <item> CLEAR: gt_bad_comp, lt_matnr, gt_tree_hier, gt_tree_data, gt_alber</item>
        <item> FREE: gt_bad_comp, lt_matnr, gt_tree_hier, gt_tree_data, gt_alber</item>
        <item> FREE: go_tree.</item>
        <item/>
        <item> BREAK kosmedev. &quot;Tonolli_G - Ins per Debug</item>
        <item/>
        <item> READ TABLE gt_alv_data INTO DATA(ls_alv_data) INDEX iv_row.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> gs_current_alv_data = ls_alv_data.</item>
        <item/>
        <item>************************************************************************</item>
        <item>* Caricamento Albero BOM (ZPP_ALBERO)</item>
        <item> search_changes( iv_check = abap_false</item>
        <item> iv_rootname = gs_current_alv_data-rootname ).</item>
        <item>************************************************************************</item>
        <item/>
        <item> SELECT SINGLE matnr INTO lv_matnr FROM marc WHERE matnr = ls_alv_d</item>
        <item> AND werks = &apos;6301&apos;.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> CLEAR: ls_bad_comp.</item>
        <item> ls_bad_comp-matnr = ls_alv_data-rootname.</item>
        <item> COLLECT ls_bad_comp INTO gt_bad_comp.</item>
        <item> ENDIF.</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero FROM zpp_alb</item>
        <item> ORDER BY sort.</item>
        <item> LOOP AT lt_albero INTO DATA(ls_albero) WHERE rootname = ls_alv_dat</item>
        <item> IF ( NOT ls_albero-parentname IS INITIAL ).</item>
        <item> CLEAR ls_matnr.</item>
        <item> ls_matnr = ls_albero-parentname.</item>
        <item> COLLECT ls_matnr INTO lt_matnr.</item>
        <item> ENDIF.</item>
        <item> CLEAR ls_matnr.</item>
        <item> ls_matnr = ls_albero-childname.</item>
        <item> COLLECT ls_matnr INTO lt_matnr.</item>
        <item> ENDLOOP.</item>
        <item> LOOP AT lt_matnr INTO ls_matnr.</item>
        <item> SELECT SINGLE matnr INTO lv_matnr FROM marc WHERE matnr = ls_mat</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> CLEAR: ls_bad_comp.</item>
        <item> ls_bad_comp-matnr = ls_matnr.</item>
        <item> COLLECT ls_bad_comp INTO gt_bad_comp.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> IF ( gs_sel-p_test = abap_true ).</item>
        <item> REFRESH: gt_bad_comp. &quot;per test, da cancellare</item>
        <item> CLEAR: gt_bad_comp. &quot;per test, da cancellare</item>
        <item> FREE: gt_bad_comp. &quot;per test, da cancellare</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF gt_bad_comp[] IS INITIAL .</item>
        <item> IF lt_albero[] IS NOT INITIAL.</item>
        <item> set_tree_data( EXPORTING is_alv_data = ls_alv_data ).</item>
        <item> tree_show( CHANGING ct_hier = gt_tree_hier</item>
        <item> ct_data = gt_tree_data ).</item>
        <item> ELSE.</item>
        <item>* Gestione eccezione dove la struttura Albero BOM √® vuota</item>
        <item> CLEAR: ls_bad_comp.</item>
        <item> ls_bad_comp-matnr = ls_alv_data-rootname.</item>
        <item> COLLECT ls_bad_comp INTO gt_bad_comp.</item>
        <item> alv_show( EXPORTING iv_type = c_alv_view_bad_mat &quot;c_alv_view_d</item>
        <item> iv_title = &apos;Nessun componente per il seguent</item>
        <item> CHANGING ct_data = gt_bad_comp ).</item>
        <item/>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> alv_show( EXPORTING iv_type = c_alv_view_bad_mat &quot;c_alv_view_dat</item>
        <item> iv_title = &apos;Componenti non esistenti&apos;</item>
        <item> CHANGING ct_data = gt_bad_comp ).</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CHECK_COMPONENTS>
      <CONSTRUCTOR>
        <item> METHOD constructor.</item>
        <item> super-&gt;constructor( iv_program = iv_program</item>
        <item> iv_language = iv_language</item>
        <item> iv_pfstatus = iv_pfstatus ).</item>
        <item> gv_pfstatus_tree = iv_pfstatus_tree.</item>
        <item> gv_pfstatus_tree_2 = iv_pfstatus_tree_2.</item>
        <item> gv_pfstatus_dialog = iv_pfstatus_dialog.</item>
        <item> gv_to_be_refresh = abap_false.</item>
        <item> gv_tree_current_level = 2.</item>
        <item> CLEAR: gv_tipo_anticipo.</item>
        <item> ENDMETHOD.</item>
      </CONSTRUCTOR>
      <CREATE_CICLI>
        <item> METHOD create_cicli.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos;</item>
        <item>* IF ( get_ciclo( EXPORTING iv_matnr = ls_tree_data-matnr ) IS</item>
        <item>* READ TABLE gt_tree_hier WITH KEY parent = ls_tree_data-matn</item>
        <item>* REM: La tabella gt_tree_hier √® sortata per KEY crescente e mappa</item>
        <item>* Nel caso nel sotto ramo del LOOP ci siano soddisfatte pi√π volte</item>
        <item> LOOP AT gt_tree_hier INTO ls_tree_hier WHERE key &lt; ls_node</item>
        <item> AND node = ls_tree</item>
        <item> AND level = ls_tree</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 OR ls_tree_hier-parent IS INITIAL ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> ls_ztpp_cicli = get_par_cicli_ref( iv_matnr = ls_tree_data</item>
        <item> ls_tree_data_sel-plnnr_ref = ls_ztpp_cicli-plnnr.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref =</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item>* select_branch_root( EXPORTING is_tree_data = ls_tree_data</item>
        <item>* CHANGING ct_tree_data_sel = gt_tree_d</item>
        <item> select_branch_root_2( EXPORTING is_tree_data = ls_tree_dat</item>
        <item> iv_beskz = &apos;E&apos;</item>
        <item> CHANGING ct_tree_data_sel = gt_tree_</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> DELETE gt_tree_data_sel WHERE beskz &lt;&gt; &apos;E&apos;</item>
        <item> OR disgr &lt;&gt; &apos;ZMTO&apos;.</item>
        <item> SORT gt_tree_data_sel BY key.</item>
        <item> DELETE ADJACENT DUPLICATES FROM gt_tree_data_sel COMPARING matnr.</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel. &quot; WHERE plnnr_ref IS</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> &quot; verifica che non esista il ciclo</item>
        <item> IF ( NOT ls_tree_data_sel-plnnr IS INITIAL ).</item>
        <item> DELETE gt_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> &quot; verifica se esiste il ciclo di riferimento</item>
        <item> IF ( NOT get_ciclo( EXPORTING iv_matnr = ls_tree_data_sel-matnr )</item>
        <item> DELETE gt_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ls_ztpp_cicli = get_par_cicli_ref( iv_matnr = ls_tree_data_sel-mat</item>
        <item> ls_tree_data_sel-plnnr_ref = ls_ztpp_cicli-plnnr.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDLOOP.</item>
        <item> BREAK kosmedev.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> SET PARAMETER ID &apos;PTY&apos; FIELD &apos;S&apos;.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;PLNNR_REF&apos; visible =</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CREATE_CICLI>
      <CREATE_DIBA>
        <item> METHOD create_diba.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv,</item>
        <item> lv_first TYPE abap_bool,</item>
        <item> lt_nodes TYPE salv_t_nodes. &quot;Tabella interna finale</item>
        <item> DATA: ls_colore1 TYPE zpp_pdm_monitor_alv-colore, &quot;Tonolli_G - Ins</item>
        <item> ls_colore2 TYPE zpp_pdm_monitor_alv-colore. &quot;Tonolli_G - Ins</item>
        <item/>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> IF ( gv_pspnr IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Wbs non presente&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> BREAK kosmedev.</item>
        <item> lv_first = abap_true.</item>
        <item/>
        <item> REFRESH: lt_nodes.</item>
        <item> CLEAR: lt_nodes.</item>
        <item> FREE: lt_nodes.</item>
        <item/>
        <item> &quot; GT_SKIPPED_NODES &lt;-- tabella globale. La tabella it_nodes √® epurat</item>
        <item> skip_duplicates_in_branch( it_nodes = it_nodes ).</item>
        <item/>
        <item>*gt_skipped_nodes[] = it_nodes[].</item>
        <item>* Nellla tabella it_nodes abbiamo i record selezionati dall&apos;utente</item>
        <item>* 1¬∞ Aggiunta del padre</item>
        <item>* Importante √® che il padre non sia ROSSO altrimenti il comando non fu</item>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_nodes).</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = l</item>
        <item> disgr =</item>
        <item> CHECK sy-subrc = 0. &quot; verifico che il nodo sia ZMTO.</item>
        <item> ls_colore1 = ls_tree_data-colore.</item>
        <item>* Tonolli_G - Start Del - La READ non garantisce che si posizioni</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY node = ls_t</item>
        <item>* level = ls_t</item>
        <item>* Tonolli_G - Start Del -</item>
        <item>* Tonolli_G - Start Ins</item>
        <item>* REM: La tabella gt_tree_hier √® sortata per KEY crescente e mappa</item>
        <item>* Nel caso nel sotto ramo del LOOP ci siano soddisfatte pi√π volte</item>
        <item> LOOP AT gt_tree_hier INTO ls_tree_hier WHERE key &lt; ls_nodes-ke</item>
        <item> AND key &lt;&gt; space</item>
        <item> AND node = ls_tree_hie</item>
        <item> AND level = ls_tree_hie</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE lt_nodes WITH KEY key = ls_tree_hier-key TRANSPORTI</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ). &quot; ho bisogno sempre del padre per o</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_tr</item>
        <item> ls_colore2 = ls_tree_data-colore.</item>
        <item> DATA(ls_nodes_tmp) = ls_nodes.</item>
        <item> CLEAR ls_nodes_tmp.</item>
        <item> ls_nodes_tmp-key = ls_tree_hier-key.</item>
        <item> IF NOT ( ls_colore1 = &apos;ROSSO&apos; AND ls_colore2 = &apos;ROSSO&apos; ). &quot;</item>
        <item> APPEND ls_nodes_tmp TO lt_nodes. &quot;&lt;------</item>
        <item> ENDIF. &quot;</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> IF NOT ( ls_colore1 = &apos;ROSSO&apos; AND ls_colore2 = &apos;ROSSO&apos; ). &quot;Tono</item>
        <item> APPEND ls_nodes TO lt_nodes. &quot;&lt;------</item>
        <item> ENDIF. &quot;Tono</item>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item/>
        <item> IF NOT ( ls_colore1 = &apos;ROSSO&apos; AND ls_colore2 = &apos;ROSSO&apos; ). &quot;Tonoll</item>
        <item>* 2¬∞ Aggiunta dei figli</item>
        <item> LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY key = ls_node</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot; verifica che il nodo sia un ramo e non una foglia</item>
        <item> READ TABLE gt_tree_hier WITH KEY parent = ls_tree_hier-node TR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CHECK NOT ( ls_tree_data-colore = &apos;ROSSO&apos; AND ls_tree_data</item>
        <item>* CHECK ls_tree_data-colore &lt;&gt; &apos;GRIGIO&apos;.</item>
        <item> IF ( ls_tree_data-colore = &apos;GIALLO&apos; ).</item>
        <item>* CHECK ls_tree_data-azione = &apos;U&apos; AND ls_tree_data-mod_succ</item>
        <item> ENDIF.</item>
        <item>* IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMT</item>
        <item> IF ( ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item>* READ TABLE gt_tree_hier WITH KEY parent = ls_tree_data-</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = ls_tree_hier-level.</item>
        <item/>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> &quot; va in ricorsione solo se il nodo √® stato effettivament</item>
        <item> READ TABLE it_nodes WITH KEY key = ls_nodes-key TRANSPOR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* select_branch_root( EXPORTING is_tree_data = ls_tree_d</item>
        <item>* In ricorsione aggiunge tutti i figli</item>
        <item> select_branch_root_2( EXPORTING is_tree_data = ls_tree</item>
        <item> iv_beskz = space</item>
        <item> CHANGING ct_tree_data_sel = gt_t</item>
        <item> ENDIF.</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> ENDIF.</item>
        <item/>
        <item> DELETE gt_tree_data_sel WHERE matnr &lt;&gt; gs_current_alv_data-rootname</item>
        <item> AND ( &quot;beskz &lt;&gt; &apos;E&apos; OR</item>
        <item> disgr &lt;&gt; &apos;ZMTO&apos; ).</item>
        <item> &quot; OR colore &lt;&gt; &apos;GRIGIO&apos;.</item>
        <item/>
        <item>* NON ATTIVARE IL SEGUENTE CODICE PERCHE&apos; SAVE_DIBA CERCA I FIGLI IN g</item>
        <item>* Non funziona il DELETE ADJACENT DUPLICATES e non si vuole perdere l</item>
        <item> &quot;DELETE ADJACENT DUPLICATES FROM gt_tree_data_sel COMPARING matnr.</item>
        <item>* LOOP AT gt_tree_data_sel INTO DATA(lv_tree_data_sel_1).</item>
        <item>* DATA(lv_tabix_1) = sy-tabix.</item>
        <item>* LOOP AT gt_tree_data_sel INTO DATA(lv_tree_data_sel_2) FROM lv_ta</item>
        <item>* WHERE matnr = lv_tree_data_sel_1-matnr.</item>
        <item>* DATA(lv_tabix_2) = sy-tabix.</item>
        <item>* DELETE gt_tree_data_sel INDEX lv_tabix_2.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDLOOP.</item>
        <item>* NON ATTIVARE IL SEGUENTE CODICE PERCHE&apos; SAVE_DIBA CERCA I FIGLI IN g</item>
        <item/>
        <item> IF ( iv_action = &apos;ANT&apos; OR iv_action = &apos;PROD&apos; ).</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_sel) WHERE NOT aufnr IS INIT</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Nessun odp da aggiornare. Verificare il p</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_sel WHERE NOT aufnr IS INITIAL</item>
        <item> AND colore = &apos;ROSSO&apos;.</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Odp presenti su componenti da cancellare.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> &quot; assegna la chiave di raggruppamento sel_key per poter eseguire la</item>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_skipped_nodes).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> &quot; raggruppo per pacchetti</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY key = ls_skipped_nodes-key TR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_2) = sy-tabix.</item>
        <item> LOOP AT gt_tree_data_sel FROM lv_tabix_2 - 1 INTO ls_tree_data_s</item>
        <item> ls_tree_data_sel-sel_key = ls_skipped_nodes-key.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX sy-tabix.</item>
        <item> ENDLOOP.</item>
        <item> ELSE.</item>
        <item> &quot;DELETE gt_skipped_nodes INDEX lv_tabix.</item>
        <item> &quot; se arrivo qui ho selezionato uno ZMTO che √® foglia e bisogna a</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY key = ls_ski</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot; associa la chiave di raggruppamento sul padre</item>
        <item> ls_tree_data_sel-sel_key = ls_skipped_nodes-key.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> &quot; aggiunge nella tabella selezionati il nodo foglia</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data) WITH KEY ref = ls_h</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_data TO ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> ls_tree_data_sel-sel_key = ls_skipped_nodes-key.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* READ TABLE gt_tree_data_sel INTO ls_tree_data_sel WITH KEY colore =</item>
        <item>* disgr =</item>
        <item>* IF ( NOT ls_tree_data_sel-aufnr IS INITIAL ).</item>
        <item>* DATA(lv_tabix_data) = sy-tabix.</item>
        <item>* DATA(lv_tabix_data_up) = sy-tabix + 1.</item>
        <item>* DATA(lv_tabix_data_down) = sy-tabix.</item>
        <item>* DATA(lv_lines) = 0.</item>
        <item>* DESCRIBE TABLE gt_tree_data_sel LINES lv_lines.</item>
        <item>* DO.</item>
        <item>* IF ( lv_tabix_data_up &gt;= 1 ).</item>
        <item>* READ TABLE gt_tree_data_sel INTO DATA(ls_tree_data_sel_2) IND</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY key = ls</item>
        <item>* LOOP AT gt_tree_hier INTO ls_tree_hier WHERE node = ls_tre</item>
        <item>* AND level = ls_tre</item>
        <item>* READ TABLE gt_tree_data_sel INTO DATA(ls_sel) WITH KEY ke</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix) = sy-tabix.</item>
        <item>* ls_sel-log = &apos;Cancellazione ramo con OdP&apos;.</item>
        <item>* ls_sel-light = icon_red_light.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_sel INDEX lv_tabix.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* IF ( lv_tabix_data_down &lt;= lv_lines ).</item>
        <item>* READ TABLE gt_tree_data_sel INTO ls_tree_data_sel_2 INDEX lv_</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY key = ls</item>
        <item>* LOOP AT gt_tree_hier INTO ls_tree_hier FROM lv_tabix_data_d</item>
        <item>* &quot;WHERE node = ls_tr</item>
        <item>* WHERE level = ls_tre</item>
        <item>* READ TABLE gt_tree_data_sel INTO ls_sel WITH KEY key = ls</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* lv_tabix = sy-tabix.</item>
        <item>* ls_sel-log = &apos;Cancellazione ramo con OdP&apos;.</item>
        <item>* ls_sel-light = icon_red_light.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_sel INDEX lv_tabix.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* IF ( lv_tabix_data_up &lt;= 1 AND lv_tabix_data_down &gt;= lv_lines )</item>
        <item>* EXIT.</item>
        <item>* ENDIF.</item>
        <item>* SUBTRACT 1 FROM lv_tabix_data_up.</item>
        <item>* ADD 1 TO lv_tabix_data_down.</item>
        <item>* ENDDO.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> IF ( iv_action = &apos;ANT&apos; OR iv_action = &apos;PROD&apos; ).</item>
        <item> remove_dialog_exclude( &apos;MOD_ODP&apos; ).</item>
        <item> ENDIF.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible =</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap_true editable = abap_fa</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CREATE_DIBA>
      <CREATE_ODP>
        <item> METHOD create_odp.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-plnum IS NOT INITIAL AND</item>
        <item> ls_tree_data-beskz = &apos;E&apos; AND</item>
        <item> ls_tree_data-disgr = &apos;ZMTO&apos; AND</item>
        <item> ( ls_tree_data-sobsl = space OR</item>
        <item> ls_tree_data-itsob = space ) ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item>* Bisogna evitare di inserire pi√π volte lo stesso Ord.Pian. - St</item>
        <item> READ TABLE gt_tree_data_sel INTO DATA(ls_tree_data_sel_1) WITH</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item>* Bisogna evitare di inserire pi√π volte lo stesso Ord.Pian. - En</item>
        <item>* Bisogna verificare se il materiale ha pi√π Ord.Pian. - Start</item>
        <item> DATA: lv_plaf TYPE plaf.</item>
        <item> SELECT * INTO lv_plaf</item>
        <item> FROM plaf</item>
        <item> WHERE plnum &lt;&gt; ls_tree_data_sel-plnum</item>
        <item> AND matnr = ls_tree_data_sel-matnr</item>
        <item> AND plwrk = &apos;6301&apos;</item>
        <item> AND pspel = gv_pspnr.</item>
        <item> ls_tree_data_sel-plnum = lv_plaf-plnum.</item>
        <item> READ TABLE gt_tree_data_sel INTO ls_tree_data_sel_1 WITH KEY</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDSELECT.</item>
        <item>* Bisogna verificare se il materiale ha pi√π Ord.Pian. - Start</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;PLNUM&apos; visible = abap</item>
        <item> ( fieldname = &apos;VERID&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CREATE_ODP>
      <CREATE_SELECTIONS>
        <item> METHOD create_selections.</item>
        <item> DATA: lref_sel TYPE REF TO data.</item>
        <item> CREATE DATA lref_sel TYPE ty_s_sel.</item>
        <item> set_selections( CHANGING cref_sel = lref_sel ).</item>
        <item> FIELD-SYMBOLS: &lt;sel&gt; TYPE any.</item>
        <item> ASSIGN lref_sel-&gt;* TO &lt;sel&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> gs_sel = &lt;sel&gt;.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CREATE_SELECTIONS>
      <DELETE_BRANCH>
        <item> METHOD delete_branch.</item>
        <item>* LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent = is_tree</item>
        <item>* AND node = is_tree</item>
        <item> LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent = is_tree_</item>
        <item>** IF ( ls_tree_hier &lt;&gt; is_tree_hier ).</item>
        <item>* READ TABLE gt_tree_hier into data(ls_hier) WITH KEY parent = ls</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY tipofi</item>
        <item>* rootna</item>
        <item>* parent</item>
        <item>* childn</item>
        <item>* del</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* delete_branch( is_tree_hier = ls_tree_hier</item>
        <item>* is_data_bom = ls_data_bom ).</item>
        <item>* ENDIF.</item>
        <item>** ENDIF.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> ls_tree_data-color = if_salv_c_tree_style=&gt;intensified_critical.</item>
        <item> ls_tree_data-relenddate = is_data_bom-relenddate.</item>
        <item> ls_tree_data-elaborato = ls_tree_data-elaborato.</item>
        <item> ls_tree_data-azione = ls_tree_data-azione.</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix.</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY tipofile</item>
        <item>* rootname</item>
        <item>* parentna</item>
        <item>* childnam</item>
        <item>* del</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix2) = sy-tabix.</item>
        <item>* ls_data_bom-relenddate = ls_tree_data-relenddate.</item>
        <item>* ls_data_bom-elaborato = ls_tree_data-elaborato.</item>
        <item>* ls_data_bom-mod_succ = ls_tree_data-mod_succ.</item>
        <item>* ls_data_bom-azione = ls_tree_data-azione.</item>
        <item>* MODIFY gt_data_bom FROM ls_data_bom INDEX lv_tabix2.</item>
        <item>* MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* ENDIF.</item>
        <item>* IF ( ls_tree_data-elaborato = abap_true ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY tipofi</item>
        <item>* rootna</item>
        <item>* parent</item>
        <item>* childn</item>
        <item>* del</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix2) = sy-tabix.</item>
        <item>* UPDATE zpp_pdm_mon_bom SET del = abap_true</item>
        <item>* WHERE tipofile = ls_data_bom-tipof</item>
        <item>* AND rootname = ls_data_bom-rootn</item>
        <item>* AND parentname = ls_data_bom-paren</item>
        <item>* AND childname = ls_data_bom-child</item>
        <item>* AND elaborato = abap_true</item>
        <item>* AND del = abap_false.</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* UPDATE zpp_pdm_mon_bom SET elaborato = abap_true mod_succ =</item>
        <item>* WHERE tipofile = ls_data_bom-tipof</item>
        <item>* AND rootname = ls_data_bom-rootn</item>
        <item>* AND parentname = ls_data_bom-paren</item>
        <item>* AND childname = ls_data_bom-child</item>
        <item>* AND elaborato = abap_false</item>
        <item>* AND del = abap_false.</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* DELETE gt_data_bom INDEX lv_tabix2.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY parent = is</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY parent = ls_</item>
        <item> node = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY tipofil</item>
        <item> rootnam</item>
        <item> parentn</item>
        <item> childna</item>
        <item> counter</item>
        <item> del</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> delete_branch( is_tree_hier = ls_hier</item>
        <item> is_data_bom = ls_data_bom ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </DELETE_BRANCH>
      <DELETE_ORPHAN>
        <item> METHOD delete_orphan.</item>
        <item> LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent IS NOT INI</item>
        <item/>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY node = ls_tree</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> DELETE gt_tree_hier WHERE key = ls_tree_hier-key.</item>
        <item> DELETE gt_tree_data WHERE key = ls_tree_hier-key.</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY parentnam</item>
        <item> childname</item>
        <item> counter</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DELETE gt_data_bom INDEX sy-tabix.</item>
        <item> DELETE FROM zpp_pdm_mon_bom WHERE datum = ls_data_bom-datum</item>
        <item> AND uzeit = ls_data_bom-uzeit</item>
        <item> AND tipofile = ls_data_bom-tipof</item>
        <item> AND counter = ls_data_bom-counte</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </DELETE_ORPHAN>
      <ELABORAZIONI_SUCCESSIVE>
        <item> METHOD elaborazioni_successive.</item>
        <item> DATA: lt_data_bom_new TYPE ty_t_data_bom,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname,</item>
        <item> ls_data_bom1 TYPE ty_s_data_bom,</item>
        <item> ls_albero_tmp TYPE ty_s_albero,</item>
        <item> lt_data_bom_db TYPE ty_t_data_bom,</item>
        <item> lt_data_bom TYPE ty_t_data_bom,</item>
        <item> lt_albero TYPE ty_t_albero,</item>
        <item> lv_end_1 TYPE abap_bool,</item>
        <item> lv_end_2 TYPE abap_bool.</item>
        <item> DATA: l_check TYPE c.</item>
        <item> DATA: l_tfill LIKE sy-tfill.</item>
        <item> DATA: lv_counter TYPE zpp_counter,</item>
        <item> lv_sort TYPE i.</item>
        <item> DATA: ct_albero TYPE ty_t_albero.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_data_bom_db</item>
        <item> FROM zpp_pdm_mon_bom</item>
        <item> WHERE datum = iv_datum</item>
        <item> AND uzeit = iv_uzeit</item>
        <item> AND rootname = iv_rootname</item>
        <item> AND elaborato = abap_false</item>
        <item> ORDER BY counter.</item>
        <item/>
        <item>* BREAK kosmedev.</item>
        <item> rv_end = abap_true. &quot;Nessuna modifica all&apos;Albero BOM</item>
        <item/>
        <item>* I record in lt_data_bom_db devono essere elaborati in stretta succes</item>
        <item>* - √® possibile avere una modifiche di un record non ancora inserito,</item>
        <item>* - √® possibile avere una cancellazione e a seguire un inserimento</item>
        <item>* - √® possibile avere un inserimento del legame padre-figlio prima del</item>
        <item/>
        <item>* NB: NON E&apos; POSSIBILE PER LO STESSO PADRE AVERE 2 COMPONENTI UGUALI I</item>
        <item> LOOP AT lt_data_bom_db INTO DATA(ls_data_bom).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item/>
        <item>* NB: NON E&apos; POSSIBILE AVERE BOM RICORSIVE SIA DIRETTE (IL PADRE A&apos;</item>
        <item> IF ls_data_bom-parentname = ls_data_bom-childname.</item>
        <item> ls_data_bom-elaborato = abap_true. &quot;Il record non sar√† p</item>
        <item> ls_data_bom-log = &apos;ERROR : BOM RICORSIVA&apos;.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;&lt;------</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* MODIFICA START *****************************************************</item>
        <item>* La modifica di un legame padre-figlio si deve propagare in automatic</item>
        <item>* DATA(lv_end_1) = identifica_modifiche( CHANGING ct_data_bom = lt_</item>
        <item>* ct_albero = lt_</item>
        <item> IF ls_data_bom-relenddate &lt;&gt; c_data_infinito. &quot; &apos;31/12/2099 00:0</item>
        <item/>
        <item>* Record con relenddate non infinito, pu√≤ essere una pura cancellazi</item>
        <item>* Verificare se il record immediatamente successivo √® di modifica (r</item>
        <item> CLEAR: l_check.</item>
        <item> DESCRIBE TABLE lt_data_bom_db LINES l_tfill.</item>
        <item> IF ( ( lv_tabix + 1 ) &lt;= l_tfill ).</item>
        <item> LOOP AT lt_data_bom_db INTO DATA(ls_data_bom_2) FROM lv_tabix</item>
        <item> IF ls_data_bom_2-rootname = ls_data_bom-rootname AND</item>
        <item> ls_data_bom_2-parentname = ls_data_bom-parentname AND</item>
        <item> ls_data_bom_2-childname = ls_data_bom-childname AND</item>
        <item> ls_data_bom_2-relstartdate = ls_data_bom-relenddate AND</item>
        <item> ls_data_bom_2-relenddate = c_data_infinito AND</item>
        <item> ls_data_bom_2-del = abap_false.</item>
        <item> l_check = &apos;Y&apos;.</item>
        <item> ENDIF.</item>
        <item> EXIT. &quot;---&gt; USCITA LOOP DOPO LA PRIMA ELABORAZIONE</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> IF ( l_check = &apos;Y&apos; ). &quot; Trovata coppia di record in stretta s</item>
        <item>* Bisogna modificare tutti i legami gi√† presenti nell&apos;albero</item>
        <item>* Estrazione dei rami dell&apos;Albero BOM da modificare in lt_albero,</item>
        <item/>
        <item> REFRESH: lt_albero, ct_albero.</item>
        <item> CLEAR: lt_albero, ct_albero.</item>
        <item> FREE: lt_albero, ct_albero.</item>
        <item/>
        <item>* Estrazione Albero BOM</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE ct_albero FROM zpp</item>
        <item> ORDER BY sort.</item>
        <item>* Estrazione record da aggiornare</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero</item>
        <item> FROM zpp_albero WHERE rootname = ls_data_bom-root</item>
        <item> AND parentname = ls_data_bom-pare</item>
        <item> AND childname = ls_data_bom-chil</item>
        <item> AND relstartdate = ls_data_bom-rels</item>
        <item> AND relenddate = c_data_infinito</item>
        <item> ORDER BY sort.</item>
        <item> LOOP AT lt_albero INTO DATA(ls_albero).</item>
        <item>* Estrazione dell&apos;indice nell&apos;Albero BOM (sortato per il campo S</item>
        <item/>
        <item>* Posizionamento sull&apos;Albero BOM in assoluto</item>
        <item> READ TABLE ct_albero INTO ls_albero WITH KEY rootname = ls_a</item>
        <item> counter = ls_a</item>
        <item> DATA(ct_albero_tabix_2) = sy-tabix.</item>
        <item/>
        <item>* Posizionamento sul singolo record</item>
        <item> READ TABLE lt_albero INTO ls_albero WITH KEY rootname = ls_a</item>
        <item> counter = ls_a</item>
        <item> DATA(ls_tabix_2) = sy-tabix.</item>
        <item/>
        <item> ls_albero-relstartdate = ls_data_bom_2-relstartdate. &quot;Modi</item>
        <item> ls_albero-relqty_old = ls_albero-relqty. &quot;Memo</item>
        <item> ls_albero-relqty = ls_data_bom_2-relqty. &quot;Aggi</item>
        <item> IF ( ls_albero-elaborato = abap_false ). &quot;Mate</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item>* Tonolli_G - Gestione del GIALLO solo al cambio di qt√† e non</item>
        <item> ELSEIF ls_albero-relqty_old = ls_albero-relqty.</item>
        <item>* La qt√† non √® cambiata</item>
        <item>* Tonolli_G - Gestione del GIALLO solo al cambio di qt√† e non</item>
        <item> ELSE. &quot;Mate</item>
        <item> ls_albero-azione = &apos;U&apos;.</item>
        <item> ls_albero-mod_succ = &apos;U&apos;. &quot;Solo</item>
        <item> ls_albero-colore = &apos;GIALLO&apos;.</item>
        <item> ENDIF.</item>
        <item> UPDATE zpp_albero SET relstartdate = ls_albero-relstartdate</item>
        <item> relqty_old = ls_albero-relqty_old</item>
        <item> relqty = ls_albero-relqty</item>
        <item> azione = ls_albero-azione</item>
        <item> mod_succ = ls_albero-mod_succ</item>
        <item> colore = ls_albero-colore</item>
        <item> WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item/>
        <item> MODIFY lt_albero FROM ls_albero INDEX ls_tabix_2. &quot;&lt;------</item>
        <item> CLEAR: ls_data_bom-log.</item>
        <item> ls_data_bom-elaborato = abap_true. &quot;elaborato = X pe</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;&lt;------</item>
        <item> CLEAR: ls_data_bom_2-log.</item>
        <item> ls_data_bom_2-elaborato = abap_true. &quot;elaborato = X pe</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom_2. &quot;&lt;------</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> rv_end = abap_false. &quot;E&apos; stato modific</item>
        <item/>
        <item/>
        <item>************************************************************************</item>
        <item>* Tonolli_g - Start Ins * RECORD ACCETTATO - GRIGIO **************</item>
        <item>* Propagazione del SOLO colore GIALLO ai sotto-livelli</item>
        <item> IF ls_albero-colore = &apos;GIALLO&apos;.</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero_2) FROM ct_albero_ta</item>
        <item> IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item> EXIT. &quot;------&gt; USCITA LOOP : Il sotto ramo √® termina</item>
        <item> ENDIF.</item>
        <item> ls_albero_2-azione = ls_albero-azione. &quot;azione = &apos;U&apos;</item>
        <item> ls_albero_2-colore = ls_albero-colore. &quot;colore = &apos;GI</item>
        <item> UPDATE zpp_albero SET azione = ls_albero_2-azione</item>
        <item>* Per discriminare tra una vera modifica della qt√† vs un GIA</item>
        <item>* Se mod_succ = &apos;U&apos; allora √® una vera modifica. Se mod_succ</item>
        <item>* Questo impatter√† sulla tabella zpp_alberob che conterr√† so</item>
        <item>* Non √® possibile forzare mod_succ perch√® potrebbe essere ar</item>
        <item>* mod_succ = &apos;&apos;</item>
        <item> colore = ls_albero_2-colore</item>
        <item> WHERE rootname = ls_albero_2-rootname</item>
        <item> AND counter = ls_albero_2-counter.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO DATA(ls_albero_2) FROM</item>
        <item> ENDIF.</item>
        <item>* Tonolli_g - End Ins * RECORD ACCETTATO - GRIGIO *************</item>
        <item>************************************************************************</item>
        <item/>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero.</item>
        <item> IF lt_albero[] IS INITIAL. &quot;LOOP AT lt_albero INTO ls_albero</item>
        <item/>
        <item> DATA: lt_alberox TYPE ty_s_albero.</item>
        <item>* Gestire il fatto che una stessa modifica pu√≤ essere presente p</item>
        <item>* Verificare se il ramo PARENTNAME - CHILDNAME √® gi√† presente ne</item>
        <item> SELECT SINGLE * INTO lt_alberox</item>
        <item> FROM zpp_albero WHERE rootname = ls_data_bom-rootname</item>
        <item> AND parentname = ls_data_bom-parentname</item>
        <item> AND childname = ls_data_bom-childname.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* E&apos; gi√† presente quindi i 2 record proveniente da file (ct_da</item>
        <item> ls_data_bom-elaborato = abap_true. &quot;elaborato = X</item>
        <item> ls_data_bom_2-elaborato = abap_true. &quot;elaborato = X</item>
        <item> ELSE.</item>
        <item> ls_data_bom-log = &apos;ERROR : 1. RECORD DI MODIFICA SPEGNI.</item>
        <item> ls_data_bom_2-log = &apos;ERROR : 2. RECORD DI MODIFICA ACCENDI</item>
        <item> ENDIF.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;&lt;------</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom_2. &quot;&lt;------</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF. &quot;IF sy-subrc = 0. &quot;LOOP AT lt_albero INTO ls_albero</item>
        <item> &quot; Eliminazione dalla tab.interna del 1¬∞ record di delete</item>
        <item> DELETE lt_data_bom_db WHERE rootname = ls_data_bom-rootname</item>
        <item> AND parentname = ls_data_bom-parentname</item>
        <item> AND childname = ls_data_bom-childname</item>
        <item> AND counter = ls_data_bom-counter.</item>
        <item> &quot; Eliminazione dalla tab.interna del 2¬∞ record di replace</item>
        <item> DELETE lt_data_bom_db WHERE rootname = ls_data_bom_2-rootnam</item>
        <item> AND parentname = ls_data_bom_2-parentname</item>
        <item> AND childname = ls_data_bom_2-childname</item>
        <item> AND counter = ls_data_bom_2-counter.</item>
        <item/>
        <item>* Il sort non serve perch√® nella modifica non si cancella o inseri</item>
        <item> CONTINUE. &quot;------&gt; SI PASSA AL RECORD SUCCESSIVO</item>
        <item> ENDIF. &quot;IF ( l_check = &apos;Y&apos; ).</item>
        <item> ENDIF. &quot;IF ls_data_bom-relenddate &lt;&gt; c_data_infinito AND &quot; &apos;3</item>
        <item>* MODIFICA END *****************************************************</item>
        <item/>
        <item/>
        <item>* CANCELLAZIONE START ************************************************</item>
        <item>* La cancellazione di un legame padre-figlio si deve propagare in auto</item>
        <item>* altrimenti la cancellazione √® fisica (se non accettato)</item>
        <item>* Attenzione: se nello stesso file abbiamo sia una cancellazione sia u</item>
        <item>* solo se il legame nonno-padre √® cancellato.</item>
        <item>* Il limte √® che le cancellazioni nel file, a parit√† di ra</item>
        <item>* DATA(lv_end_2) = identifica_cancellazioni( CHANGING ct_data_bom =</item>
        <item>* ct_albero =</item>
        <item> IF ls_data_bom-relenddate &lt;&gt; c_data_infinito. &quot; &apos;31/12/2099 00:0</item>
        <item> ls_data_bom-mod_succ = &apos;D&apos;.</item>
        <item> ls_data_bom-azione = &apos;D&apos;.</item>
        <item>* REM: Sono in LOOP AT lt_data_bom_db INTO DATA(ls_data_bom). DAT</item>
        <item> DELETE lt_data_bom_db INDEX lv_tabix. &quot;&lt;------ Eliminazione da</item>
        <item/>
        <item> REFRESH: lt_albero, ct_albero.</item>
        <item> CLEAR: lt_albero, ct_albero, l_check.</item>
        <item> FREE: lt_albero, ct_albero, l_check.</item>
        <item/>
        <item>* Estrazione Albero BOM</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE ct_albero FROM zpp_a</item>
        <item> ORDER BY sort.</item>
        <item>* Estrazione dei record da cancellare dalla tabella Albero BOM</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero FROM zpp_a</item>
        <item> WHERE rootname = ls_data_bom-rootname</item>
        <item> AND parentname = ls_data_bom-parentname</item>
        <item> AND childname = ls_data_bom-childname</item>
        <item> AND relstartdate = ls_data_bom-relstartdate &quot;Data S</item>
        <item> AND relenddate = c_data_infinito &quot; &apos;31/12/2099 00</item>
        <item> ORDER BY sort.</item>
        <item> LOOP AT lt_albero INTO ls_albero.</item>
        <item> READ TABLE ct_albero INTO ls_albero WITH KEY rootname = ls_alb</item>
        <item> counter = ls_alb</item>
        <item> ct_albero_tabix_2 = sy-tabix.</item>
        <item> IF ( ls_albero-elaborato = abap_false ). &quot;Materiale non acce</item>
        <item>* Il record dell&apos;Albero BOM non √® mai stato accettato quindi la</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item> DELETE lt_albero WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item> DELETE ct_albero WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item> l_check = &apos;Y&apos;.</item>
        <item/>
        <item>************************************************************************</item>
        <item>* 1 *** Tonolli_g - Start Ins * RECORD NON ACCETTATO - VERDE *******</item>
        <item>* Propagazione della cancellazione ai sotto-livelli</item>
        <item>* Un record √® stato cancellato quindi entro con lo stesso indice</item>
        <item> LOOP AT ct_albero INTO ls_albero_2 FROM ct_albero_tabix_2.</item>
        <item>* REM: Man mano che cancello i record sy-tabix ritorna indietr</item>
        <item> IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item>* Il sotto ramo √® terminato</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item/>
        <item> DELETE lt_albero WHERE rootname = ls_albero_2-rootna</item>
        <item> AND counter = ls_albero_2-counte</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_albero_2-rootna</item>
        <item> AND counter = ls_albero_2-counte</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO ls_albero_2 FROM ct_alber</item>
        <item>* 1 *** Tonolli_g - End Ins * RECORD NON ACCETTATO - VERDE ******</item>
        <item>************************************************************************</item>
        <item/>
        <item> ELSE. &quot;IF ( ls_albero-elaborato = abap_false ). &quot;Materiale</item>
        <item/>
        <item>*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</item>
        <item>* Attenzione: se nello stesso file abbiamo sia una cancellazione sia u</item>
        <item>* solo se il legame nonno-padre √® cancellato. Ma solo se n</item>
        <item> IF ls_data_bom-rootname &lt;&gt; ls_data_bom-parentname.</item>
        <item>* Dalla tabella ct_data_bom √® gi√† stato cancellato il record</item>
        <item> LOOP AT lt_data_bom_db INTO DATA(ls_data_bom_1) FROM lv_ta</item>
        <item> WHERE rootname = ls_data_bom-rootname</item>
        <item> AND parentname = ls_data_bom-parentname</item>
        <item> AND childname = ls_data_bom-childname</item>
        <item> AND relenddate = c_data_infinito. &quot;&apos;31/12/2099 0</item>
        <item>* Esiste un record successivo di inserimento</item>
        <item> EXIT. &quot;------&gt; USCITA</item>
        <item> ENDLOOP.</item>
        <item> IF sy-subrc = 0.</item>
        <item>* Estrazione del legame nonno-padre</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero_3) TO ct_albero_ta</item>
        <item> WHERE rootname = ls_albero-rootname</item>
        <item> AND childname = ls_albero-parentname &quot;Legame</item>
        <item> AND lev = ls_albero-lev - 1.</item>
        <item> ENDLOOP.</item>
        <item> IF sy-subrc = 0.</item>
        <item>* Selezionato il legame nonno-padre immediatamente sopra</item>
        <item> IF ls_albero_3-relenddate = c_data_infinito. &quot;&apos;31/12/</item>
        <item>* Non posso accettare la cancellazione il legame nonno</item>
        <item>*-----------------------------------------------------------------------</item>
        <item> ls_data_bom-log = &apos;INFO: CANCELLAZIONE NON ACCETTATA</item>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item>*-----------------------------------------------------------------------</item>
        <item> CONTINUE. &quot;------&gt;</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF sy-subrc = 0.</item>
        <item> ENDIF. &quot;IF sy-subrc = 0.</item>
        <item> ENDIF. &quot;IF ls_data_bom-rootname &lt;&gt; ls_data_bom-parentname.</item>
        <item>*&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</item>
        <item/>
        <item>* Il record dell&apos;Albero BOM √® stato accettato quindi la cancella</item>
        <item> ls_albero-relenddate = ls_data_bom-relenddate. &quot;Data FIN</item>
        <item> ls_albero-mod_succ = &apos;D&apos;.</item>
        <item> ls_albero-azione = &apos;D&apos;.</item>
        <item> ls_albero-colore = &apos;ROSSO&apos;.</item>
        <item> MODIFY lt_albero FROM ls_albero INDEX ct_albero_tabix_2.</item>
        <item> UPDATE zpp_albero SET relenddate = ls_albero-relenddate</item>
        <item> mod_succ = ls_albero-mod_succ</item>
        <item> azione = ls_albero-azione</item>
        <item> colore = ls_albero-colore</item>
        <item> WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item/>
        <item>************************************************************************</item>
        <item>* 2 *** Tonolli_g - Start Ins * RECORD ACCETTATO - ROSSO ANCHE I FIG</item>
        <item>* Propagazione della cancellazione ai sotto-livelli</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> LOOP AT ct_albero INTO ls_albero_2 FROM ct_albero_tabix_2 +</item>
        <item> IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item>* Il sotto ramo √® terminato</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ls_albero_2-relenddate = ls_data_bom-relenddate.</item>
        <item>* Per disciminare tra vero ROSSO e ROSSO ereditato mod_succ</item>
        <item> ls_albero_2-mod_succ = &apos; &apos;.</item>
        <item> ls_albero_2-azione = &apos;D&apos;.</item>
        <item> ls_albero_2-colore = &apos;ROSSO&apos;.</item>
        <item/>
        <item> UPDATE zpp_albero SET relenddate = ls_albero_2-relenddat</item>
        <item> mod_succ = ls_albero_2-mod_succ</item>
        <item> azione = ls_albero_2-azione</item>
        <item> colore = ls_albero_2-colore</item>
        <item> WHERE rootname = ls_albero_2-rootname</item>
        <item> AND counter = ls_albero_2-counter.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero_2 FROM lv_tabix</item>
        <item>* 2 *** Tonolli_g - End Ins * RECORD ACCETTATO - ROSSO ANCHE I FIGLI</item>
        <item>************************************************************************</item>
        <item/>
        <item> ENDIF. &quot;IF ( ls_albero-elaborato = abap_false ).</item>
        <item/>
        <item> CLEAR: ls_data_bom-log.</item>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> rv_end = abap_false. &quot;E&apos; stato inserito</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero.</item>
        <item> IF lt_albero[] IS INITIAL. &quot;LOOP AT lt_albero INTO ls_albero.</item>
        <item/>
        <item>* Verificare se √® un vero errore o solo una cancellazione duplicat</item>
        <item>* SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero FROM zpp_</item>
        <item>* WHERE rootname = ls_data_bom-rootname</item>
        <item>* AND parentname = ls_data_bom-parentname</item>
        <item>* AND childname = ls_data_bom-childname</item>
        <item>* AND relstartdate = ls_data_bom-relstartdate.</item>
        <item/>
        <item> ls_data_bom-log = &apos;INFO: RELENDDATE NON INFINITO SENZA RECORD</item>
        <item> UPDATE zpp_pdm_mon_bom SET log = ls_data_bom-log</item>
        <item> elaborato = abap_true</item>
        <item> WHERE datum = ls_data_bom-datum</item>
        <item> AND uzeit = ls_data_bom-uzeit</item>
        <item> AND counter = ls_data_bom-counter</item>
        <item> AND tipofile = ls_data_bom-tipofile</item>
        <item> AND elaborato = abap_false.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ELSE.</item>
        <item> IF l_check = &apos;Y&apos;.</item>
        <item> sort_tree_table( EXPORTING iv_index = ct_albero_tabix_2</item>
        <item> CHANGING ct_albero = lt_albero ).</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF lt_albero[] IS INITIAL.</item>
        <item> CONTINUE.</item>
        <item> ENDIF. &quot;IF ls_data_bom-relenddate &lt;&gt; c_data_infinito. &quot; &apos;31/12</item>
        <item>* CANCELLAZIONE END ************************************************</item>
        <item/>
        <item/>
        <item>* INSERIMENTO START **************************************************</item>
        <item>* DATA(lv_end_3) = identifica_inserimenti( CHANGING ct_data_bom = l</item>
        <item>* ct_albero = l</item>
        <item/>
        <item> IF ls_data_bom-relenddate = c_data_infinito. &quot;&apos;31/12/2099 00:00:0</item>
        <item/>
        <item>************************************************************************</item>
        <item>* INIZIO CODICE RIPETUTO IN SEARCH_CHANGES - VEDI * INSERIME</item>
        <item>************************************************************************</item>
        <item/>
        <item> REFRESH: lt_albero.</item>
        <item> CLEAR: lt_albero.</item>
        <item> FREE: lt_albero.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero</item>
        <item> FROM zpp_albero WHERE rootname = ls_data_bom-rootname</item>
        <item> ORDER BY sort.</item>
        <item/>
        <item>* Estrazione del figlio da trasformare in padre. Chiaramente il fi</item>
        <item> LOOP AT lt_albero INTO ls_albero WHERE rootname = ls_data_bom-</item>
        <item> AND childname = ls_data_bom-</item>
        <item> AND relenddate = c_data_infin</item>
        <item>* Il record a cui appendere esiste e non √® cancellato</item>
        <item> DATA(lv_index) = sy-tabix.</item>
        <item> CLEAR: lv_counter, l_check.</item>
        <item/>
        <item>* Verifica se il ramo da appendere √® gi√† appeso considerando anc</item>
        <item> LOOP AT lt_albero INTO ls_albero_2 FROM lv_index + 1.</item>
        <item> IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item>* Il sotto ramo √® terminato. Non esistono componenti</item>
        <item> l_check = &apos;N&apos;.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( ls_albero_2-rootname = ls_data_bom-rootname AND</item>
        <item> ls_albero_2-parentname = ls_data_bom-parentname AND</item>
        <item> ls_albero_2-childname = ls_data_bom-childname AND</item>
        <item> &quot;ls_albero_2-relstartdate = ls_data_bom-relstartdate AND</item>
        <item> ls_albero_2-relenddate = c_data_infinito AND</item>
        <item> ls_albero_2-lev = ls_albero-lev + 1 ).</item>
        <item>* Esiste gi√† il ramo</item>
        <item> IF ls_albero_2-relstartdate &lt;&gt; ls_data_bom-relstartdate.</item>
        <item>* NB: NON E&apos; POSSIBILE PER LO STESSO PADRE AVERE 2 COMPONENTI UGUALI I</item>
        <item> ls_data_bom-log = &apos;ERROR : RECORD GIA PRESENTE CON ALTRA</item>
        <item> ELSE.</item>
        <item> ls_data_bom-log = &apos;INFO : RECORD GIA PRESENTE&apos;.</item>
        <item> ENDIF.</item>
        <item> l_check = &apos;Y&apos;.</item>
        <item> EXIT. &quot;------&gt; USCITA LOOP</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero_2 FROM lv_index +</item>
        <item/>
        <item> IF l_check = &apos;Y&apos;.</item>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> CONTINUE. &quot;------&gt;</item>
        <item> ENDIF.</item>
        <item/>
        <item> rv_end = abap_false. &quot;Si procede ad inse</item>
        <item> SELECT MAX( counter ) INTO lv_counter FROM zpp_albero WHERE ro</item>
        <item> ADD 1 TO lv_counter.</item>
        <item/>
        <item> lv_sort = ls_albero-sort + 1.</item>
        <item/>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bom</item>
        <item> iv_counter = lv_counter</item>
        <item> iv_parent_sup = ls_albero-parent</item>
        <item> iv_lev = ls_albero-lev +</item>
        <item> iv_sort = lv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> ls_albero-relenddate = c_data_infinito.</item>
        <item/>
        <item> APPEND ls_albero TO lt_albero.</item>
        <item/>
        <item> sort_tree_table( EXPORTING iv_index = lv_index</item>
        <item> CHANGING ct_albero = lt_albero ).</item>
        <item/>
        <item> CLEAR: ls_data_bom-log.</item>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero WHERE rootname =</item>
        <item/>
        <item>************************************************************************</item>
        <item>* INIZIO CODICE RIPETUTO IN SEARCH_CHANGES - VEDI * INSERIME</item>
        <item>************************************************************************</item>
        <item/>
        <item> ENDIF. &quot;IF ls_data_bom-relenddate &lt;&gt; c_data_infinito. &quot; &apos;31/12</item>
        <item>* INSERIMENTO END **************************************************</item>
        <item/>
        <item>* Verifica se √® successo qualcosa all&apos;Albero BOM</item>
        <item>* IF ( lv_end_1 = abap_true AND lv_end_2 = abap_true AND lv_end_3</item>
        <item>** Nessuna modifica e nessuna cancellazione e nessun inserimento</item>
        <item>* rv_end = abap_true.</item>
        <item>* ELSE.</item>
        <item>* rv_end = abap_false.</item>
        <item>** &quot;Ricalcola campo sort</item>
        <item>* sort_tree_table( CHANGING ct_albero = lt_albero ).</item>
        <item>* ENDIF.</item>
        <item> MODIFY lt_data_bom_db FROM ls_data_bom INDEX lv_tabix.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_data_bom_db INTO DATA(ls_data_bom).</item>
        <item/>
        <item> ENDMETHOD.</item>
      </ELABORAZIONI_SUCCESSIVE>
      <ELIMINA_DUPLICATI>
        <item> METHOD elimina_duplicati.</item>
        <item> DATA: ls_albero TYPE ty_s_albero,</item>
        <item> ls_albero_tmp TYPE ty_s_albero,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname.</item>
        <item> LOOP AT ct_data_bom INTO DATA(ls_data_bom).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_albero_tmp FROM zp</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot; cancella se gi√† presenti nell&apos;albero</item>
        <item> SELECT SINGLE rootname INTO lv_rootname FROM zpp_albero WHERE ro</item>
        <item> AND pa</item>
        <item> AND ch</item>
        <item> AND re</item>
        <item> AND re</item>
        <item> AND re</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DELETE ct_data_bom INDEX lv_tabix.</item>
        <item> ls_data_bom-log = &apos;INFO (NO ACC ‚Äì INS): RECORD GIA&apos;&apos;&apos;.</item>
        <item> UPDATE zpp_pdm_mon_bom SET log = ls_data_bom-log</item>
        <item> elaborato = abap_true</item>
        <item> WHERE datum = ls_data_bom-datum</item>
        <item> AND uzeit = ls_data_bom-uzeit</item>
        <item> AND counter = ls_data_bom-counter</item>
        <item> AND tipofile = ls_data_bom-tipofile</item>
        <item> AND elaborato = abap_false.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </ELIMINA_DUPLICATI>
      <EXCLUDE_BUTTONS>
        <item> METHOD exclude_buttons.</item>
        <item> DATA: lt_zpp_pdm_mon_auth TYPE TABLE OF zpp_pdm_mon_auth,</item>
        <item> lv_name TYPE salv_de_function.</item>
        <item> &quot;ls_zpp_pdm_mon_auth TYPE zpp_pdm_mon_auth.</item>
        <item/>
        <item>* DATA(lt_function_list) = co_functions-&gt;get_functions( ).</item>
        <item>* LOOP AT lt_function_list INTO DATA(lo_function).</item>
        <item>* lv_name = lo_function-r_function-&gt;get_name( ).</item>
        <item>* IF ( NOT lv_name IS INITIAL AND lv_name(1) &lt;&gt; &apos;&amp;&apos; ).</item>
        <item>* CLEAR: ls_zpp_pdm_mon_auth.</item>
        <item>* SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_zpp_pdm_mon_aut</item>
        <item>*</item>
        <item>** lv_name = ls_zpp_pdm_mon_auth-fcode.</item>
        <item>* TRY.</item>
        <item>* CALL METHOD co_functions-&gt;set_function</item>
        <item>* EXPORTING</item>
        <item>* name = lv_name</item>
        <item>* boolean = ls_zpp_pdm_mon_auth-attivo.</item>
        <item>* CATCH cx_root .</item>
        <item>* ENDTRY.</item>
        <item>* ENDIF..</item>
        <item>* ENDLOOP.</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_zpp_pdm_mon_auth FROM</item>
        <item/>
        <item> LOOP AT lt_zpp_pdm_mon_auth INTO DATA(ls_zpp_pdm_mon_auth).</item>
        <item> lv_name = ls_zpp_pdm_mon_auth-fcode.</item>
        <item> TRY.</item>
        <item> CALL METHOD co_functions-&gt;set_function</item>
        <item> EXPORTING</item>
        <item> name = lv_name</item>
        <item> boolean = ls_zpp_pdm_mon_auth-attivo.</item>
        <item> CATCH cx_root .</item>
        <item> ENDTRY.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_name = &apos;TEMPI&apos;.</item>
        <item> TRY.</item>
        <item> CALL METHOD co_functions-&gt;set_function</item>
        <item> EXPORTING</item>
        <item> name = lv_name</item>
        <item> boolean = abap_false.</item>
        <item> CATCH cx_root .</item>
        <item> ENDTRY.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </EXCLUDE_BUTTONS>
      <EXECUTE>
        <item> METHOD execute.</item>
        <item> create_selections( ).</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> &quot; esegue acquisizione del file vincolato alla presenza dello specifi</item>
        <item> get_data( EXPORTING is_sel = gs_sel CHANGING ct_data_bom = gt_d</item>
        <item> ct_data_anag = gt_d</item>
        <item> &quot; Esegue il caricamento dei file nelle tabelle ZPP_PDM_MON_ANAG e ZP</item>
        <item> &quot; NON ALIMENTA la tabella ZPP_ALBERO.</item>
        <item> process_files( iv_no_alv = iv_no_alv ).</item>
        <item> ENDMETHOD.</item>
      </EXECUTE>
      <EXECUTE_MD51>
        <item> METHOD execute_md51.</item>
        <item> DATA: lt_bdcdata TYPE ty_t_bdcdata.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_bdcdata.</item>
        <item> CLEAR: gt_tree_data_sel, lt_bdcdata.</item>
        <item> FREE: gt_tree_data_sel, lt_bdcdata.</item>
        <item/>
        <item> IF ( gv_posid IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;WBS mancante&apos;(021).</item>
        <item> RETURN.</item>
        <item> ELSE.</item>
        <item> bdc_dynpro( EXPORTING iv_program = &apos;SAPMM61X&apos; iv_dynpro = &apos;0170&apos;</item>
        <item> CHANGING ct_bdcdata = lt_bdcdata ).</item>
        <item> bdc_field( EXPORTING iv_fnam = &apos;RM61X-PSPEL&apos; iv_fval = gv_posid</item>
        <item> CHANGING ct_bdcdata = lt_bdcdata ).</item>
        <item> CALL TRANSACTION &apos;MD51&apos; USING lt_bdcdata MODE &apos;E&apos;.&quot; UPDATE &apos;L&apos;.</item>
        <item/>
        <item> gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </EXECUTE_MD51>
      <GET_ALV_DATA>
        <item> METHOD get_alv_data.</item>
        <item> et_alv_data = gt_alv_data.</item>
        <item> ENDMETHOD.</item>
      </GET_ALV_DATA>
      <GET_CICLO>
        <item> METHOD get_ciclo.</item>
        <item> CLEAR: rv_plnnr.</item>
        <item> SELECT SINGLE plnnr INTO rv_plnnr FROM mapl</item>
        <item> WHERE matnr = iv_matnr</item>
        <item> AND werks = iv_werks</item>
        <item> AND loekz = space.</item>
        <item> ENDMETHOD.</item>
      </GET_CICLO>
      <GET_DATA>
        <item> METHOD get_data.</item>
        <item> read_files( EXPORTING is_sel = is_sel</item>
        <item> CHANGING ct_data_bom = ct_data_bom</item>
        <item> ct_data_anag = ct_data_anag ).</item>
        <item> ENDMETHOD.</item>
      </GET_DATA>
      <GET_DATA_BOM>
        <item> METHOD get_data_bom.</item>
        <item/>
        <item> DATA: lv_tipofile TYPE zinter_tipofile.</item>
        <item> CLEAR: lv_tipofile.</item>
        <item> CASE iv_tipofile.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_labelling.</item>
        <item> lv_tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_labelling.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_filling.</item>
        <item> lv_tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_filling.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_packaging.</item>
        <item> lv_tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_packaging.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_prod_labelling.</item>
        <item> lv_tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_labelling.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_filling.</item>
        <item> lv_tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_filling.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_packaging.</item>
        <item> lv_tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_packaging.</item>
        <item> ENDCASE.</item>
        <item/>
        <item> REFRESH: gt_data_bom.</item>
        <item> CLEAR: gt_data_bom.</item>
        <item> FREE: gt_data_bom.</item>
        <item/>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE gt_data_bo</item>
        <item> WHERE rootname = iv_rootname</item>
        <item> AND del = abap_false</item>
        <item> AND tipofile = lv_tipofile</item>
        <item> ORDER BY datum uzeit counter. &quot;Tonolli_G - Ins</item>
        <item/>
        <item>* SORT gt_data_bom BY tipofile datum uzeit counter.</item>
        <item/>
        <item>* DATA: lt_data_bom TYPE ty_t_data_bom.</item>
        <item>* REFRESH: lt_data_bom.</item>
        <item>* LOOP AT gt_data_bom INTO DATA(ls_data_bom).</item>
        <item>* DATA(lv_tabix) = sy-tabix.</item>
        <item>* IF ( ls_data_bom-rootname = ls_data_bom-parentname ).</item>
        <item>* APPEND ls_data_bom TO lt_data_bom.</item>
        <item>* DELETE gt_data_bom INDEX lv-tabix.</item>
        <item>* CONTINUE.</item>
        <item>* ELSE.</item>
        <item>* loop at gt_data_bom into data(ls_data_bom_2) where parentname =</item>
        <item>* endloop.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </GET_DATA_BOM>
      <GET_DIBA>
        <item> METHOD get_diba.</item>
        <item> CLEAR: es_mast.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF es_mast FROM mast WHERE</item>
        <item> AND</item>
        <item> AND</item>
        <item> ev_ret = sy-subrc.</item>
        <item> ENDMETHOD.</item>
      </GET_DIBA>
      <GET_LAST_NODE>
        <item> METHOD get_last_node.</item>
        <item> DATA: lv_lev TYPE zpp_albero-lev.</item>
        <item> READ TABLE it_albero INTO DATA(ls_albero) WITH KEY ref = cs_albero-r</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> lv_lev = ls_albero-lev.</item>
        <item> DO.</item>
        <item> READ TABLE it_albero INTO DATA(ls_albero_2) INDEX lv_tabix + 1.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_albero_2-lev &lt;= lv_lev ).</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> cs_albero = ls_albero_2.</item>
        <item> ELSE.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ADD 1 TO lv_tabix.</item>
        <item> ENDDO.</item>
        <item> ENDIF.</item>
        <item>* LOOP AT it_albero INTO DATA(ls_albero) WHERE rootname = cs_albero</item>
        <item>* AND parentname = cs_albero</item>
        <item>* get_last_node( EXPORTING it_albero = it_albero</item>
        <item>* CHANGING cs_albero = ls_albero ).</item>
        <item>* ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </GET_LAST_NODE>
      <GET_MARC>
        <item> METHOD get_marc.</item>
        <item> CLEAR: es_marc.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF es_marc FROM marc WHERE</item>
        <item> AND</item>
        <item> ev_ret = sy-subrc.</item>
        <item> ENDMETHOD.</item>
      </GET_MARC>
      <GET_MATERIAL>
        <item> METHOD get_material.</item>
        <item> CLEAR: es_mara.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF es_mara FROM mara WHERE</item>
        <item> ev_ret = sy-subrc.</item>
        <item> ENDMETHOD.</item>
      </GET_MATERIAL>
      <GET_MATERIAL_DATA>
        <item> METHOD get_material_data.</item>
        <item> CLEAR: cs_tree_data-beskz, cs_tree_data-sobsl, cs_tree_data-dispo, c</item>
        <item> cs_tree_data-plifz, cs_tree_data-webaz, cs_tree_data-disgr, c</item>
        <item> cs_tree_data-matkl.</item>
        <item>* SELECT SINGLE * INTO CORRESPONDING FIELDS OF cs_tree_data</item>
        <item>* FROM marc LEFT JOIN makt ON makt~matnr = marc~matnr AND makt</item>
        <item>* WHERE marc~matnr = cs_tree_data-matnr</item>
        <item>* AND marc~werks = &apos;6301&apos;.</item>
        <item>* SELECT SINGLE meins INTO cs_tree_data-meins FROM mara WHERE matnr =</item>
        <item> ENDMETHOD.</item>
      </GET_MATERIAL_DATA>
      <GET_ODP_INFO>
        <item> METHOD get_odp_info.</item>
        <item>* TYPES: BEGIN OF ty_s_odp,</item>
        <item>* aufnr TYPE afpo-aufnr,</item>
        <item>* gstrp TYPE co_gstrp,</item>
        <item>* gltrp TYPE co_gltrp,</item>
        <item>* END OF ty_s_odp,</item>
        <item>* ty_t_odp TYPE TABLE OF ty_s_odp.</item>
        <item> DATA: &quot;lt_odp TYPE ty_t_odp,</item>
        <item> lo_lock TYPE REF TO zcl_bc_lock_handler,</item>
        <item> lv_garg TYPE seqg3-garg,</item>
        <item> lv_str TYPE string.</item>
        <item/>
        <item> REFRESH: ct_odp.</item>
        <item> CLEAR: ct_odp.</item>
        <item> FREE: ct_odp.</item>
        <item/>
        <item> CLEAR: cs_tree_data-aufnr, cs_tree_data-extra_aufnr, cs_tree_data-od</item>
        <item> cs_tree_data-gltrp, cs_tree_data-gstrp.</item>
        <item/>
        <item> SELECT afpo~aufnr afko~gstrp afko~gltrp INTO CORRESPONDING FIELDS OF</item>
        <item> FROM afpo INNER JOIN afko ON afko~aufnr = afpo~aufnr</item>
        <item> BYPASSING BUFFER</item>
        <item> WHERE matnr = cs_tree_data-matnr</item>
        <item> AND projn = gv_pspnr</item>
        <item> AND dauat &lt;&gt; &apos;ZP90&apos;</item>
        <item> AND dnrel = space &quot;Codice: posizione ordine non rile</item>
        <item> ORDER BY afko~aufnr ASCENDING.</item>
        <item/>
        <item/>
        <item> DATA: lt_stati_sistema TYPE ztpp_stati_sist_t,</item>
        <item> lt_stati_utente TYPE ztpp_stati_sist_t,</item>
        <item> lv_esito TYPE zdbc_esito,</item>
        <item> lv_found TYPE abap_bool,</item>
        <item> lv_continue TYPE abap_bool.</item>
        <item> lv_found = abap_false.</item>
        <item> lv_continue = abap_false.</item>
        <item/>
        <item>* Primo LOOP ma solo per il primo OdP valido</item>
        <item> LOOP AT ct_odp INTO DATA(ls_odp).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> IF ( lv_found = abap_true ).</item>
        <item> EXIT. &quot;------&gt; USCITA LOOP</item>
        <item> ENDIF.</item>
        <item/>
        <item> DO.</item>
        <item>* Per evitare rallentamenti nell&apos;estrazione dei dati dovuti a lock</item>
        <item>* CLEAR: lv_garg.</item>
        <item>* CONCATENATE sy-mandt ls_odp-aufnr INTO lv_garg RESPECTING BLANK</item>
        <item>* lv_str = lv_garg.</item>
        <item>* lo_lock = NEW #( iv_gname = &apos;AUFK&apos;</item>
        <item>* iv_time = 10</item>
        <item>* iv_garg = lv_str ).</item>
        <item>* lo_lock-&gt;wait_lock( ).</item>
        <item/>
        <item> COMMIT WORK.</item>
        <item/>
        <item> CALL FUNCTION &apos;ZPP_ESTRAI_STATI_ODP&apos;</item>
        <item> EXPORTING</item>
        <item> i_aufnr = ls_odp-aufnr</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item>* E_DESCR_ESITO =</item>
        <item> et_stati_sistema = lt_stati_sistema</item>
        <item> et_stati_utente = lt_stati_utente</item>
        <item>* I_AUFNR =</item>
        <item>* E_CHECK_AUFM =</item>
        <item> .</item>
        <item> IF ( NOT lt_stati_sistema[] IS INITIAL OR NOT lt_stati_utente IS</item>
        <item> READ TABLE lt_stati_sistema INTO DATA(ls_stati) WITH KEY stat</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DELETE ct_odp INDEX lv_tabix. &quot;1.</item>
        <item> lv_continue = abap_true.</item>
        <item> EXIT. &quot;------&gt; USCITA DO</item>
        <item> ENDIF.</item>
        <item> READ TABLE lt_stati_sistema INTO ls_stati WITH KEY stat = &apos;I00</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DELETE ct_odp INDEX lv_tabix. &quot;1.</item>
        <item> lv_continue = abap_true.</item>
        <item> EXIT. &quot;------&gt; USCITA DO</item>
        <item> ENDIF.</item>
        <item> MOVE-CORRESPONDING ls_odp TO cs_tree_data.</item>
        <item> LOOP AT lt_stati_sistema INTO DATA(ls_stati_sistema).</item>
        <item> cs_tree_data-odp_stats = cs_tree_data-odp_stats &amp;&amp; ` ` &amp;&amp; ls</item>
        <item> ENDLOOP.</item>
        <item> LOOP AT lt_stati_utente INTO DATA(ls_stati_utente).</item>
        <item> cs_tree_data-odp_utstats = cs_tree_data-odp_utstats &amp;&amp; ` ` &amp;</item>
        <item> ENDLOOP.</item>
        <item> lv_found = abap_true. &quot;USCITA LOOP</item>
        <item> EXIT. &quot;------&gt; USCITA DO</item>
        <item> ELSE.</item>
        <item>* OdP senza stati di sistema e senza stati utente. Condizione ma</item>
        <item> DELETE ct_odp INDEX lv_tabix. &quot;1.</item>
        <item> lv_continue = abap_true.</item>
        <item> EXIT. &quot;------&gt; USCITA DO</item>
        <item> ENDIF.</item>
        <item> FREE lo_lock.</item>
        <item> ENDDO.</item>
        <item> IF ( lv_continue = abap_true ). CONTINUE. ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_odp INTO DATA(ls_odp).</item>
        <item/>
        <item>* Estrazione degl&apos;eventuali altri 4 OdP</item>
        <item> LOOP AT ct_odp INTO ls_odp FROM 2 TO 5.</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> CALL FUNCTION &apos;ZPP_ESTRAI_STATI_ODP&apos;</item>
        <item> EXPORTING</item>
        <item> i_aufnr = ls_odp-aufnr</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item>* E_DESCR_ESITO =</item>
        <item> et_stati_sistema = lt_stati_sistema</item>
        <item> et_stati_utente = lt_stati_utente</item>
        <item>* I_AUFNR =</item>
        <item>* E_CHECK_AUFM =</item>
        <item> .</item>
        <item> READ TABLE lt_stati_sistema WITH KEY stat = &apos;I0045&apos; TRANSPORTING N</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DELETE ct_odp INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> READ TABLE lt_stati_sistema WITH KEY stat = &apos;I0012&apos; TRANSPORTING N</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DELETE ct_odp INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item/>
        <item> CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_OUTPUT&apos;</item>
        <item> EXPORTING</item>
        <item> input = ls_odp-aufnr</item>
        <item> IMPORTING</item>
        <item> output = ls_odp-aufnr.</item>
        <item> IF ( cs_tree_data-extra_aufnr IS INITIAL ).</item>
        <item> cs_tree_data-extra_aufnr = cs_tree_data-extra_aufnr &amp;&amp; ls_odp-au</item>
        <item> ELSE.</item>
        <item> cs_tree_data-extra_aufnr = cs_tree_data-extra_aufnr &amp;&amp; `-` &amp;&amp; ls</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* Estrazione dell&apos;eventuale altro OdP</item>
        <item> READ TABLE ct_odp INTO ls_odp INDEX 6.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> cs_tree_data-extra_aufnr = cs_tree_data-extra_aufnr &amp;&amp; `-*`.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Cancellazione degli OdP TECO</item>
        <item> LOOP AT ct_odp INTO ls_odp FROM 2.</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> CALL FUNCTION &apos;ZPP_ESTRAI_STATI_ODP&apos;</item>
        <item> EXPORTING</item>
        <item> i_aufnr = ls_odp-aufnr</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item>* E_DESCR_ESITO =</item>
        <item> et_stati_sistema = lt_stati_sistema</item>
        <item> et_stati_utente = lt_stati_utente</item>
        <item>* I_AUFNR =</item>
        <item>* E_CHECK_AUFM =</item>
        <item> .</item>
        <item> READ TABLE lt_stati_sistema WITH KEY stat = &apos;I0045&apos; TRANSPORTING N</item>
        <item> CHECK sy-subrc = 0.</item>
        <item> DELETE ct_odp INDEX lv_tabix.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </GET_ODP_INFO>
      <GET_OTHER_DATA>
        <item> METHOD get_other_data.</item>
        <item> ENDMETHOD.</item>
      </GET_OTHER_DATA>
      <GET_PAR_CICLI_REF>
        <item> METHOD get_par_cicli_ref.</item>
        <item> DATA: ls_mara TYPE mara,</item>
        <item> lv_maktx TYPE maktx,</item>
        <item> ls_par_cicli_ref TYPE ztpp_cicli,</item>
        <item> lr_matnr TYPE RANGE OF matnr,</item>
        <item> lr_maktx TYPE RANGE OF maktx,</item>
        <item> ls_matnr LIKE LINE OF lr_matnr,</item>
        <item> ls_maktx LIKE LINE OF lr_maktx.</item>
        <item/>
        <item> get_material( EXPORTING iv_matnr = iv_matnr IMPORTING es_mara = l</item>
        <item> CLEAR: lv_maktx.</item>
        <item> SELECT SINGLE maktx INTO lv_maktx FROM makt WHERE matnr = iv_matnr</item>
        <item> AND spras = sy-langu.</item>
        <item> IF ( gt_ztpp_cicli[] IS INITIAL ).</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_ztpp_cicli FROM ztp</item>
        <item> ENDIF.</item>
        <item> CLEAR: es_par_cicli_ref.</item>
        <item> LOOP AT gt_ztpp_cicli INTO ls_par_cicli_ref.</item>
        <item/>
        <item> REFRESH: lr_maktx, lr_matnr.</item>
        <item> CLEAR: lr_maktx, lr_matnr.</item>
        <item> FREE: lr_maktx, lr_matnr.</item>
        <item/>
        <item> ls_matnr-sign = &apos;I&apos;.</item>
        <item> ls_matnr-option = &apos;CP&apos;.</item>
        <item> ls_matnr-low = ls_par_cicli_ref-matnr.</item>
        <item> APPEND ls_matnr TO lr_matnr.</item>
        <item> CLEAR: ls_maktx.</item>
        <item> ls_maktx-sign = &apos;I&apos;.</item>
        <item> ls_maktx-option = &apos;CP&apos;.</item>
        <item> ls_maktx-low = ls_par_cicli_ref-maktx.</item>
        <item> APPEND ls_maktx TO lr_maktx.</item>
        <item> IF ( iv_matnr IN lr_matnr AND</item>
        <item> ls_par_cicli_ref-zemmm_caratt = ls_mara-zzcaratt AND</item>
        <item> ls_par_cicli_ref-matkl = ls_mara-matkl AND</item>
        <item> lv_maktx IN lr_maktx ).</item>
        <item> es_par_cicli_ref = ls_par_cicli_ref.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_matnr IN lr_matnr AND</item>
        <item> ls_par_cicli_ref-zemmm_caratt = ls_mara-zzcaratt AND</item>
        <item> ls_par_cicli_ref-matkl = ls_mara-matkl AND</item>
        <item> ls_par_cicli_ref-maktx = space ).</item>
        <item> es_par_cicli_ref = ls_par_cicli_ref.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_matnr IN lr_matnr AND</item>
        <item> ls_par_cicli_ref-zemmm_caratt = ls_mara-zzcaratt AND</item>
        <item> ls_par_cicli_ref-matkl = space AND</item>
        <item> ls_par_cicli_ref-maktx = space ).</item>
        <item> es_par_cicli_ref = ls_par_cicli_ref.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_matnr IN lr_matnr AND</item>
        <item> ls_par_cicli_ref-zemmm_caratt = space AND</item>
        <item> ls_par_cicli_ref-matkl = ls_mara-matkl AND</item>
        <item> ls_par_cicli_ref-maktx = space ).</item>
        <item> es_par_cicli_ref = ls_par_cicli_ref.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_matnr IN lr_matnr AND</item>
        <item> ls_par_cicli_ref-zemmm_caratt = space AND</item>
        <item> ls_par_cicli_ref-matkl = space AND</item>
        <item> ls_par_cicli_ref-maktx = space ).</item>
        <item> es_par_cicli_ref = ls_par_cicli_ref.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP..</item>
        <item> ENDMETHOD.</item>
      </GET_PAR_CICLI_REF>
      <GET_PLAF_DATA>
        <item> METHOD get_plaf_data.</item>
        <item> CLEAR: cs_tree_data-plnum, cs_tree_data-psttr, cs_tree_data-pedtr, c</item>
        <item>* SELECT SINGLE plnum psttr pedtr INTO CORRESPONDING FIELDS OF cs_tre</item>
        <item>* FROM plaf</item>
        <item>* WHERE matnr = Cs_tree_data-matnr</item>
        <item>* AND pwwrk = &apos;6301&apos;.</item>
        <item> ENDMETHOD.</item>
      </GET_PLAF_DATA>
      <GET_REVISION_LEVEL>
        <item> METHOD get_revision_level.</item>
        <item> CLEAR: es_aeoi.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF es_aeoi FROM aeoi WHERE</item>
        <item> AND</item>
        <item> AND</item>
        <item> ev_ret = sy-subrc.</item>
        <item> ENDMETHOD.</item>
      </GET_REVISION_LEVEL>
      <GET_SALV>
        <item> METHOD get_salv.</item>
        <item> eo_salv = go_salv.</item>
        <item> ENDMETHOD.</item>
      </GET_SALV>
      <GET_TREE_DATA>
        <item> METHOD get_tree_data.</item>
        <item> ct_data[] = gt_tree_data[].</item>
        <item> ENDMETHOD.</item>
      </GET_TREE_DATA>
      <GET_TREE_SEL>
        <item> METHOD get_tree_sel.</item>
        <item> DATA: lo_salv_item TYPE REF TO cl_salv_item,</item>
        <item> lo_salv_node TYPE REF TO cl_salv_node,</item>
        <item> lv_node_key TYPE salv_de_node_key.</item>
        <item/>
        <item> REFRESH: rt_nodes.</item>
        <item> CLEAR: rt_nodes.</item>
        <item> FREE: rt_nodes.</item>
        <item/>
        <item> TRY.</item>
        <item> rt_nodes = io_sel-&gt;get_selected_nodes( ).</item>
        <item> IF ( rt_nodes[] IS INITIAL ).</item>
        <item> lo_salv_item = io_sel-&gt;get_selected_item( ).</item>
        <item> lo_salv_node = lo_salv_item-&gt;get_node( ).</item>
        <item> lv_node_key = lo_salv_node-&gt;get_key( ).</item>
        <item> DATA: ls_nodes TYPE salv_s_nodes.</item>
        <item> CLEAR: ls_nodes.</item>
        <item> ls_nodes-key = lo_salv_node-&gt;get_key( ).</item>
        <item> ls_nodes-node = lo_salv_item-&gt;get_node( ).</item>
        <item> APPEND ls_nodes TO rt_nodes.</item>
        <item> ENDIF.</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> ENDMETHOD.</item>
      </GET_TREE_SEL>
      <IDENTIFICA_MODIFICHE>
        <item> METHOD identifica_modifiche.</item>
        <item> DATA: l_check TYPE c.</item>
        <item> CLEAR: l_check.</item>
        <item> rv_end = abap_true. &quot;Nessun materiale modificato</item>
        <item>* Prima elaborazione dei record con relenddate non infinito (delete).</item>
        <item> LOOP AT ct_data_bom INTO DATA(ls_data_bom) WHERE relenddate &lt;&gt; c_dat</item>
        <item> AND del = abap_</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item>* Seconda elaborazione per verificare se il record immediatamente su</item>
        <item> LOOP AT ct_data_bom INTO DATA(ls_data_bom_2) FROM lv_tabix + 1.</item>
        <item> IF ls_data_bom_2-rootname = ls_data_bom-rootname AND</item>
        <item> ls_data_bom_2-parentname = ls_data_bom-parentname AND</item>
        <item> ls_data_bom_2-childname = ls_data_bom-childname AND</item>
        <item> ls_data_bom_2-relstartdate = ls_data_bom-relenddate AND</item>
        <item> ls_data_bom_2-relenddate = c_data_infinito AND &quot;&apos;3</item>
        <item> ls_data_bom_2-del = abap_false.</item>
        <item> l_check = &apos;Y&apos;.</item>
        <item> ENDIF.</item>
        <item> EXIT. &quot;---&gt; USCITA LOOP DOPO LA PRIMA ELABORAZIONE</item>
        <item> ENDLOOP.</item>
        <item> IF ( l_check = &apos;Y&apos; ). &quot; Trovata coppia di record in stretta suc</item>
        <item>* Bisogna modificare i record gi√† presenti nell&apos;albero</item>
        <item> DATA: lt_albero TYPE ty_t_albero.</item>
        <item>* Estrazione dei rami dell&apos;Albero BOM da modificare in lt_albero,</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero</item>
        <item> FROM zpp_albero WHERE rootname = ls_data_bom-rootna</item>
        <item> AND parentname = ls_data_bom-parent</item>
        <item> AND childname = ls_data_bom-childn</item>
        <item> AND relstartdate = ls_data_bom-relsta</item>
        <item> LOOP AT lt_albero INTO DATA(ls_albero).</item>
        <item>* Estrazione dell&apos;indice nell&apos;Albero BOM (sortato per il campo S</item>
        <item> READ TABLE ct_albero INTO ls_albero WITH KEY rootname = ls_alb</item>
        <item> counter = ls_alb</item>
        <item> DATA(ls_tabix_2) = sy-tabix.</item>
        <item> ls_albero-relstartdate = ls_data_bom_2-relstartdate. &quot;Modifi</item>
        <item> ls_albero-relqty_old = ls_albero-relqty. &quot;Memori</item>
        <item> ls_albero-relqty = ls_data_bom_2-relqty. &quot;Aggior</item>
        <item> IF ( ls_albero-elaborato = abap_false ). &quot;Materi</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> ELSE. &quot;Materi</item>
        <item> ls_albero-azione = &apos;U&apos;.</item>
        <item> ls_albero-mod_succ = &apos;U&apos;. &quot;Solo p</item>
        <item> ls_albero-colore = &apos;GIALLO&apos;.</item>
        <item> ENDIF.</item>
        <item> UPDATE zpp_albero SET relstartdate = ls_albero-relstartdate</item>
        <item> relqty_old = ls_albero-relqty_old</item>
        <item> relqty = ls_albero-relqty</item>
        <item> azione = ls_albero-azione</item>
        <item> mod_succ = ls_albero-mod_succ</item>
        <item> colore = ls_albero-colore</item>
        <item> WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item/>
        <item> MODIFY ct_albero FROM ls_albero INDEX ls_tabix_2. &quot;&lt;------</item>
        <item> CLEAR: ls_data_bom-log.</item>
        <item> ls_data_bom-elaborato = abap_true. &quot;elaborato = X per</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;&lt;------</item>
        <item> CLEAR: ls_data_bom_2-log.</item>
        <item> ls_data_bom_2-elaborato = abap_true. &quot;elaborato = X per</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom_2. &quot;&lt;------</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> rv_end = abap_false. &quot;E&apos; stato modificat</item>
        <item/>
        <item/>
        <item>************************************************************************</item>
        <item>* Tonolli_g - Start Ins * RECORD ACCETTATO - GRIGIO **************</item>
        <item>* Propagazione del SOLO colore GIALLO ai sotto-livelli</item>
        <item> IF ls_albero-colore = &apos;GIALLO&apos;.</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero_2) FROM ls_tabix_2 + 1</item>
        <item> DATA(ls_tabix_3) = sy-tabix.</item>
        <item> IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item> EXIT. &quot;------&gt; USCITA LOOP : Il sotto ramo √® terminato</item>
        <item> ENDIF.</item>
        <item> ls_albero_2-azione = ls_albero-azione. &quot;azione = &apos;U&apos;.</item>
        <item> ls_albero_2-colore = ls_albero-colore. &quot;colore = &apos;GIAL</item>
        <item> UPDATE zpp_albero SET azione = ls_albero_2-azione</item>
        <item>* Per discriminare tra una vera modifica della qt√† vs un GIA</item>
        <item>* Se mod_succ = &apos;U&apos; allora √® una vera modifica. Se mod_succ</item>
        <item>* Questo impatter√† sulla tabella zpp_alberob che conterr√† so</item>
        <item> mod_succ = &apos;&apos;</item>
        <item> colore = ls_albero_2-colore</item>
        <item> WHERE rootname = ls_albero_2-rootname</item>
        <item> AND counter = ls_albero_2-counter.</item>
        <item/>
        <item> MODIFY ct_albero FROM ls_albero_2 INDEX ls_tabix_3. &quot;&lt;--</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO DATA(ls_albero_2) FROM ls</item>
        <item> ENDIF.</item>
        <item>* Tonolli_g - End Ins * RECORD ACCETTATO - GRIGIO *************</item>
        <item>************************************************************************</item>
        <item/>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero.</item>
        <item> IF lt_albero[] IS INITIAL. &quot;LOOP AT lt_albero INTO ls_albero.</item>
        <item> ls_data_bom-log = &apos;ERROR : RELSTARTDATE NON INFINITO SENZA REC</item>
        <item/>
        <item> DATA: lt_alberox TYPE ty_s_albero.</item>
        <item>* Gestire il fatto che una stessa modifica pu√≤ essere presente p</item>
        <item>* Verificare se il ramo PARENTNAME - CHILDNAME √® gi√† presente ne</item>
        <item> SELECT SINGLE * INTO lt_alberox</item>
        <item> FROM zpp_albero WHERE rootname = ls_data_bom-rootname</item>
        <item> AND parentname = ls_data_bom-parentname</item>
        <item> AND childname = ls_data_bom-childname.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* E&apos; gi√† presente quindi i 2 record proveniente da file (ct_da</item>
        <item> ls_data_bom-elaborato = abap_true. &quot;elaborato = X pe</item>
        <item> ls_data_bom_2-elaborato = abap_true. &quot;elaborato = X pe</item>
        <item> ENDIF.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;&lt;------</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom_2. &quot;&lt;------</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF. &quot;IF sy-subrc = 0. &quot;LOOP AT lt_albero INTO ls_albero.</item>
        <item> &quot; Eliminazione dalla tab.interna del 1¬∞ record di delete</item>
        <item> DELETE ct_data_bom WHERE rootname = ls_data_bom-rootname</item>
        <item> AND parentname = ls_data_bom-parentname</item>
        <item> AND childname = ls_data_bom-childname</item>
        <item> AND counter = ls_data_bom-counter.</item>
        <item> &quot; Eliminazione dalla tab.interna del 2¬∞ record di replace</item>
        <item> DELETE ct_data_bom WHERE rootname = ls_data_bom_2-rootname</item>
        <item> AND parentname = ls_data_bom_2-parentname</item>
        <item> AND childname = ls_data_bom_2-childname</item>
        <item> AND counter = ls_data_bom_2-counter.</item>
        <item/>
        <item>* Il sort non serve perch√® nella modifica non si cancella o inseri</item>
        <item>* sort_tree_table( EXPORTING iv_index = lv_tabix_2</item>
        <item>* CHANGING ct_albero = ct_albero ).</item>
        <item> ENDIF. &quot;IF ( l_check = &apos;Y&apos; ).</item>
        <item> ENDLOOP. &quot;LOOP AT ct_data_bom INTO ls_data_bom WHERE relenddate &lt;&gt;</item>
        <item> ENDMETHOD.</item>
      </IDENTIFICA_MODIFICHE>
      <MARK_BRANCH_AS_DELETED>
        <item> METHOD mark_branch_as_deleted.</item>
        <item> DATA: ls_tree_data_sel TYPE ty_s_tree_data_sel.</item>
        <item> LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent = is_tree_</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> ls_tree_data-elaborato = iv_elaborato.</item>
        <item> ls_tree_data-mod_succ = iv_mod_succ.</item>
        <item> ls_tree_data-azione = iv_azione.</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix.</item>
        <item/>
        <item> IF ( ls_tree_hier-parent IS INITIAL ).</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY parentn</item>
        <item> childna</item>
        <item> counter</item>
        <item> ELSE.</item>
        <item> READ TABLE gt_data_bom INTO ls_data_bom WITH KEY parentname =</item>
        <item> childname =</item>
        <item> counter =</item>
        <item> ENDIF.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> ls_data_bom-elaborato = iv_elaborato.</item>
        <item> ls_data_bom-mod_succ = iv_mod_succ.</item>
        <item> ls_data_bom-azione = iv_azione.</item>
        <item> MODIFY gt_data_bom FROM ls_data_bom INDEX lv_tabix.</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item/>
        <item> READ TABLE gt_tree_hier WITH KEY parent = ls_tree_hier-node TRAN</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> mark_branch_as_deleted( EXPORTING iv_elaborato = iv_elaborato</item>
        <item> iv_mod_succ = iv_mod_succ</item>
        <item> iv_azione = iv_azione</item>
        <item> is_tree_hier = ls_tree_hier</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </MARK_BRANCH_AS_DELETED>
      <PHANTOM_IN_BOM>
        <item> METHOD phantom_in_bom.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = lv_</item>
        <item> CHECK ls_tree_hier-parent IS NOT INITIAL.</item>
        <item/>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> CHECK NOT ( ls_tree_data-itsob = space AND NOT ls_tree_data-au</item>
        <item>* IF ( get_ciclo( EXPORTING iv_matnr = ls_tree_data-matnr ) IS</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item>* ls_ztpp_cicli = get_par_cicli_ref( iv_matnr = ls_tree_data-</item>
        <item>* ls_tree_data_sel-plnnr_ref = ls_ztpp_cicli-plnnr.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> IF NOT ls_tree_data-aufnr IS INITIAL.</item>
        <item> MESSAGE i398(00) WITH &apos;Presenza ODP; non pu√≤ essere inserito P</item>
        <item> ELSE.</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> SET PARAMETER ID &apos;PTY&apos; FIELD &apos;S&apos;.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;ITSOB&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </PHANTOM_IN_BOM>
      <PRIMA_ELABORAZIONE>
        <item> METHOD prima_elaborazione.</item>
        <item> DATA: lt_albero TYPE ty_t_albero,</item>
        <item> lt_data_bom TYPE ty_t_data_bom.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_data_bom FROM zpp_pdm</item>
        <item/>
        <item/>
        <item/>
        <item>* In prima elaborazione non considero i record con data di fine validi</item>
        <item/>
        <item/>
        <item>* Lettura della tabella ZPP_PDM_MON_BOM in ricorsione prima in profond</item>
        <item> build_tree_table( EXPORTING iv_rootname = iv_rootname</item>
        <item> iv_parent = iv_rootname</item>
        <item> iv_index = 1</item>
        <item> CHANGING ct_albero = lt_albero</item>
        <item> ct_data_bom = lt_data_bom ).</item>
        <item/>
        <item>* &quot;Ricalcola campo sort</item>
        <item> sort_tree_table( CHANGING ct_albero = lt_albero ).</item>
        <item/>
        <item> ENDMETHOD.</item>
      </PRIMA_ELABORAZIONE>
      <PRIMA_ELABORAZIONE_NEW>
        <item> METHOD prima_elaborazione_new.</item>
        <item> DATA: lv_lev TYPE zpp_albero-lev,</item>
        <item> lv_counter TYPE zpp_albero-counter,</item>
        <item> lv_sort TYPE zpp_albero-sort,</item>
        <item> lt_albero TYPE ty_t_albero,</item>
        <item> ls_albero TYPE ty_s_albero.</item>
        <item/>
        <item> rv_ret = 8.</item>
        <item> lv_lev = 1.</item>
        <item> lv_counter = 1.</item>
        <item> lv_sort = c_inc_sort.</item>
        <item/>
        <item>* Verifica se √® presente un figlio del ROOTNAME: ROOTNAME = PARENTNAME</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY rootname =</item>
        <item> parentname =</item>
        <item> datum =</item>
        <item> uzeit =</item>
        <item> elaborato =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> DATA(ls_data_bom_1) = ls_data_bom.</item>
        <item>* Il 1¬∞ Nodo dell&apos;Albero BOM non deve avere RELTYPE valorizzato in q</item>
        <item> CLEAR: ls_data_bom_1-reltype.</item>
        <item>* Costruzione del 1¬∞ Nodo dell&apos;Albero BOM</item>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bom_1</item>
        <item> iv_counter = lv_counter</item>
        <item> iv_lev = lv_lev</item>
        <item> iv_sort = lv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-relqty = 1.</item>
        <item> CLEAR: ls_albero-parentname.</item>
        <item> ls_albero-childname = ls_albero-rootname.</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> CLEAR: ls_albero-reltype.</item>
        <item> APPEND ls_albero TO lt_albero.</item>
        <item/>
        <item> ADD 1 TO lv_counter.</item>
        <item> ADD c_inc_sort TO lv_sort.</item>
        <item> lv_lev = lv_lev + 1.</item>
        <item/>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bom</item>
        <item> iv_counter = lv_counter</item>
        <item> iv_parent_sup = &apos;&apos;</item>
        <item> iv_lev = lv_lev</item>
        <item> iv_sort = lv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> APPEND ls_albero TO lt_albero.</item>
        <item/>
        <item> ls_data_bom-elaborato = abap_true.</item>
        <item> CLEAR: ls_data_bom-log.</item>
        <item> MODIFY gt_data_bom FROM ls_data_bom INDEX lv_tabix TRANSPORTING el</item>
        <item> MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item/>
        <item> &quot;Ricalcola campo sort</item>
        <item> sort_tree_table( CHANGING ct_albero = lt_albero ).</item>
        <item> rv_ret = 0.</item>
        <item> ELSE.</item>
        <item>* Il record corrente non √® un figlio di 1¬∞ livello del ROOTNAME. Bis</item>
        <item/>
        <item> &quot; al momento marchiamo come errati tutti i record.</item>
        <item> &quot; verificheremo se invece processarli in elaborazioni successive (</item>
        <item> ls_data_bom-log = &apos;ERROR: PRIMO RECORD SENZA PARENTNAME = ROOTNAME</item>
        <item> UPDATE zpp_pdm_mon_bom SET log = ls_data_bom-log</item>
        <item>* elaborato = abap_true</item>
        <item> WHERE rootname = iv_rootname</item>
        <item> AND datum = iv_datum</item>
        <item> AND uzeit = iv_uzeit</item>
        <item> AND elaborato = abap_false..</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </PRIMA_ELABORAZIONE_NEW>
      <PROCESS_FILES>
        <item> METHOD process_files.</item>
        <item> DATA: lo_pdm_file TYPE REF TO zcl_pp_pdm_file,</item>
        <item> lv_padre TYPE matnr,</item>
        <item> lv_datum TYPE datum,</item>
        <item> lv_uzeit TYPE uzeit,</item>
        <item> lt_data_bom TYPE ty_t_data_bom,</item>
        <item> lv_time TYPE uzeit.</item>
        <item/>
        <item> &quot; istanza della classe centralizzata di caricamento/salvataggio/back</item>
        <item> &quot; Il tutto dipendente dalle parametrizzazioni contenute nella tabell</item>
        <item> lo_pdm_file = NEW #( iv_werks = &apos;6301&apos; ).</item>
        <item>* Anticipo</item>
        <item> IF ( gs_sel-p_ant = abap_true ).</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_ant_fill</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_ant_labe</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_ant_pack</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_fill</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_labe</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_pack</item>
        <item> ENDIF.</item>
        <item>* Lancio</item>
        <item> IF ( gs_sel-p_prod = abap_true ).</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_prod_fil</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_prod_lab</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_prod_pac</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_fil</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_lab</item>
        <item> lo_pdm_file-&gt;backup( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_pac</item>
        <item> ENDIF.</item>
        <item/>
        <item> lv_time = sy-uzeit.</item>
        <item> CLEAR: lv_padre, lv_datum.</item>
        <item/>
        <item> &quot;Esegue il caricamento dei file nelle tabelle ZPP_PDM_MON_ANAG e ZPP</item>
        <item> IF ( NOT gt_data_anag[] IS INITIAL ).</item>
        <item> INSERT zpp_pdm_mon_anag FROM TABLE gt_data_anag. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item> IF ( NOT gt_data_bom[] IS INITIAL ).</item>
        <item> INSERT zpp_pdm_mon_bom FROM TABLE gt_data_bom. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item/>
        <item>* Tonolli_G - Start Ins - Gestione file PDM mancanti nella parte anagr</item>
        <item> DATA: lv_matnr_1 TYPE mara-matnr.</item>
        <item> DATA: lv_matnr_2 TYPE mara-matnr.</item>
        <item> DATA: lt_data_anag TYPE ty_t_data_anag.</item>
        <item> DATA: lv_data_anag TYPE ty_s_data_anag.</item>
        <item> CLEAR: lv_data_anag, lv_matnr_1, lv_matnr_2.</item>
        <item> REFRESH: lt_data_anag.</item>
        <item> LOOP AT gt_data_bom INTO DATA(lv_data_bom).</item>
        <item> IF lv_matnr_2 &lt;&gt; lv_data_bom-rootname.</item>
        <item> lv_matnr_2 = lv_data_bom-rootname.</item>
        <item> SELECT SINGLE rootname INTO lv_matnr_1</item>
        <item> FROM zpp_pdm_mon_anag</item>
        <item> WHERE rootname = lv_matnr_2.</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item> CLEAR: lv_data_anag.</item>
        <item> REFRESH: lt_data_anag.</item>
        <item> lv_data_anag-datum = lv_data_bom-datum.</item>
        <item> lv_data_anag-uzeit = lv_data_bom-uzeit.</item>
        <item> lv_data_anag-tipofile = lv_data_bom-tipofile - 3.</item>
        <item> SELECT MAX( counter ) INTO lv_data_anag-counter</item>
        <item> FROM zpp_pdm_mon_anag</item>
        <item> WHERE datum = lv_data_bom-datum</item>
        <item> AND uzeit = lv_data_bom-uzeit</item>
        <item> AND tipofile = lv_data_bom-tipofile.</item>
        <item> lv_data_anag-counter = lv_data_anag-counter + 1.</item>
        <item> lv_data_anag-rootname = lv_matnr_2.</item>
        <item> lv_data_anag-log = &apos;CREATO IN AUTOMATICO&apos;.</item>
        <item> APPEND lv_data_anag TO lt_data_anag.</item>
        <item> APPEND lv_data_anag TO gt_data_anag.</item>
        <item> TRY.</item>
        <item> INSERT zpp_pdm_mon_anag FROM TABLE lt_data_anag. &quot;&lt;---</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> SELECT SINGLE rootname INTO lv_matnr_1</item>
        <item> FROM zpp_pdm_mon_anag</item>
        <item> WHERE rootname = lv_matnr_2</item>
        <item> AND log = &apos;CREATO IN AUTOMATICO&apos;.</item>
        <item> IF sy-subrc = 0.</item>
        <item> DATA: l_testo TYPE string.</item>
        <item> CALL FUNCTION &apos;POPUP_TO_INFORM&apos;</item>
        <item> EXPORTING</item>
        <item> titel = &apos;GESTIONE ANAGRAFICA ROOTNAME DA PDM&apos;</item>
        <item> txt1 = &apos;IL PDM NON HA INVIATO L&apos;&apos;ANAGRAFICA DEL ROOTNAM</item>
        <item> txt2 = lv_matnr_2</item>
        <item> txt3 = &apos;ANAGRAFICA CREATA IN ATOMATICO&apos;</item>
        <item> txt4 = &apos;&apos;.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item>* Tonolli_G - Start Ins - Gestione file PDM mancanti nella parte anagr</item>
        <item/>
        <item>* Lettura delle tabelle ZPP_PDM_MON_ANAG e ZPP_PDM_MON_BOM</item>
        <item> read_records( EXPORTING is_sel = gs_sel</item>
        <item> CHANGING ct_data_bom = gt_data_bom</item>
        <item> ct_data_mat = gt_data_anag ).</item>
        <item/>
        <item> IF ( iv_no_init = abap_false ).</item>
        <item> set_alv_data_new( EXPORTING it_data_anag = gt_data_anag</item>
        <item> CHANGING ct_alv_data = gt_alv_data ).</item>
        <item/>
        <item>* &quot;Elabora i dati caricati alimentando la tabella ZPP_ALBERO, se da p</item>
        <item>* search_changes( iv_check = abap_true ).</item>
        <item/>
        <item> IF ( sy-batch = abap_false ).</item>
        <item>* read_records( EXPORTING is_sel = gs_sel</item>
        <item>* CHANGING ct_data_bom = gt_data_bom</item>
        <item>* ct_data_mat = gt_data_anag ).</item>
        <item>* set_alv_data_new( EXPORTING it_data_anag = gt_data_anag</item>
        <item>* CHANGING ct_alv_data = gt_alv_data ).</item>
        <item> DELETE gt_alv_data WHERE NOT dispo IN gs_sel-s_dispo.</item>
        <item/>
        <item> DELETE gt_alv_data WHERE NOT rootname IN gs_sel-s_root.</item>
        <item> DELETE gt_alv_data WHERE NOT posid IN gs_sel-s_wbs.</item>
        <item/>
        <item> DATA: lv_title TYPE lvc_title.</item>
        <item> lv_title = &apos;Elenco Lista Commesse aperte&apos;(020).</item>
        <item> IF ( iv_no_alv = abap_false ).</item>
        <item> alv_show( EXPORTING iv_type = c_alv_view_log</item>
        <item> iv_title = lv_title</item>
        <item> CHANGING ct_data = gt_alv_data ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </PROCESS_FILES>
      <READ_FILES>
        <item> METHOD read_files.</item>
        <item> DATA: lref_sel TYPE REF TO data,</item>
        <item> lv_meins TYPE meins,</item>
        <item> lv_language TYPE sy-langu,</item>
        <item> lv_ps_psp_pnr TYPE vbap-ps_psp_pnr,</item>
        <item> lv_disgr TYPE marc-disgr,</item>
        <item> lv_ersda TYPE mara-ersda.</item>
        <item/>
        <item> REFRESH: ct_data_bom, ct_data_anag.</item>
        <item> CLEAR: ct_data_bom, ct_data_anag.</item>
        <item> FREE: ct_data_bom, ct_data_anag.</item>
        <item/>
        <item> lref_sel = get_selections( ).</item>
        <item> DATA: ls_data TYPE ty_s_data_anag.</item>
        <item> lv_language = get_language( ).</item>
        <item/>
        <item> DATA: lo_pdm_file TYPE REF TO zcl_pp_pdm_file,</item>
        <item> lt_file TYPE zcl_pp_pdm_file=&gt;ty_t_file.</item>
        <item/>
        <item> lo_pdm_file = NEW #( iv_werks = &apos;6301&apos; ).</item>
        <item/>
        <item> &quot; anticipi</item>
        <item> IF ( NOT is_sel-p_ant IS INITIAL ).</item>
        <item> &quot; ROOT ----------------------------</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_an</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_an</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_anag ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_an</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_an</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_anag ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_an</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_an</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_anag ).</item>
        <item> ENDIF.</item>
        <item> &quot; BOM ----------------------</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_an</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_an</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_bom ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_an</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_an</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_bom ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_an</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_an</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_bom ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> &quot; produzione</item>
        <item> IF ( NOT is_sel-p_prod IS INITIAL ).</item>
        <item> &quot; ROOT ----------------------------</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_pr</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_pr</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_anag ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_pr</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_pr</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_anag ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_pr</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_mat_pdm_pr</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_anag ).</item>
        <item> ENDIF.</item>
        <item> &quot; BOM ----------------------</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_pr</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_pr</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_bom ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_pr</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_pr</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_bom ).</item>
        <item> ENDIF.</item>
        <item> IF ( lo_pdm_file-&gt;is_busy( iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_pr</item>
        <item> lo_pdm_file-&gt;read( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pd</item>
        <item> CHANGING ct_data = lt_file ).</item>
        <item> set_sap_table( EXPORTING iv_type = zcl_pp_pdm_file=&gt;c_bom_pdm_pr</item>
        <item> it_file = lt_file</item>
        <item> CHANGING ct_data = ct_data_bom ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </READ_FILES>
      <READ_RECORDS>
        <item> METHOD read_records.</item>
        <item> DATA: lref_sel TYPE REF TO data,</item>
        <item> lv_meins TYPE meins,</item>
        <item> lv_language TYPE sy-langu,</item>
        <item> lv_ps_psp_pnr TYPE vbap-ps_psp_pnr,</item>
        <item> lv_disgr TYPE marc-disgr,</item>
        <item> lv_ersda TYPE mara-ersda.</item>
        <item/>
        <item> REFRESH: ct_data_bom, ct_data_mat.</item>
        <item> CLEAR: ct_data_bom, ct_data_mat.</item>
        <item> FREE: ct_data_bom, ct_data_mat.</item>
        <item/>
        <item> DATA: ls_data TYPE ty_s_data_anag.</item>
        <item> lv_language = get_language( ).</item>
        <item/>
        <item>* IF ( NOT is_sel-p_ant IS INITIAL ). &quot;ANTICIPO</item>
        <item>* ANAGRAFICA</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_ma</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_mat_pdm_ant_filling.</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_ma</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_mat_pdm_ant_labelling</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_ma</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_mat_pdm_ant_packaging</item>
        <item>* BOM</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_bo</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_filling.</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_bo</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_labelling</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_bo</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_ant_packaging</item>
        <item>* ENDIF.</item>
        <item>* IF ( NOT is_sel-p_prod IS INITIAL ). &quot;LANCIO</item>
        <item>* ANAGRAFICA</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_ma</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_mat_pdm_prod_filling.</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_ma</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_mat_pdm_prod_labellin</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_ma</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_mat_pdm_prod_packagin</item>
        <item>* BOM</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_bo</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_filling.</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_bo</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_labellin</item>
        <item> SELECT DISTINCT * APPENDING CORRESPONDING FIELDS OF TABLE ct_data_bo</item>
        <item> WHERE elaborato = abap_false</item>
        <item> AND tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_packagin</item>
        <item>* ENDIF.</item>
        <item>* Tonolli_G - Start Ins</item>
        <item>* Sulla tabella interna ct_data_mat (vedi la relativa globale gt_data_</item>
        <item>* quindi l&apos;ultimo DATUM UZEIT</item>
        <item> DATA lv_rootname TYPE zpp_pdm_rootname.</item>
        <item> DATA lv_ct_data_mat TYPE zpp_pdm_mon_bom.</item>
        <item> CLEAR: lv_rootname, lv_ct_data_mat.</item>
        <item> SORT ct_data_mat BY rootname tipofile DESCENDING datum DESCENDING uz</item>
        <item> LOOP AT ct_data_mat INTO DATA(ls_ct_data_mat).</item>
        <item> IF ( lv_ct_data_mat-datum = ls_ct_data_mat-datum AND</item>
        <item> lv_ct_data_mat-uzeit = ls_ct_data_mat-uzeit AND</item>
        <item> lv_ct_data_mat-tipofile = ls_ct_data_mat-tipofile ).</item>
        <item> CONTINUE.</item>
        <item> ELSE.</item>
        <item> MOVE-CORRESPONDING ls_ct_data_mat TO lv_ct_data_mat.</item>
        <item> ENDIF.</item>
        <item> IF lv_rootname = ls_ct_data_mat-rootname.</item>
        <item> DELETE ct_data_mat WHERE datum = ls_ct_data_mat-datum</item>
        <item> AND uzeit = ls_ct_data_mat-uzeit</item>
        <item> AND tipofile = ls_ct_data_mat-tipofile</item>
        <item> AND rootname = ls_ct_data_mat-rootname.</item>
        <item> ELSE.</item>
        <item> lv_rootname = ls_ct_data_mat-rootname.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> SORT ct_data_mat BY datum uzeit counter.</item>
        <item>* Tonolli_G - End Ins</item>
        <item>* SORT ct_data_mat BY tipofile datum uzeit counter.</item>
        <item>* SORT ct_data_bom BY tipofile datum uzeit counter.</item>
        <item> ENDMETHOD.</item>
      </READ_RECORDS>
      <SAVE_ACCETTAZIONE>
        <item> METHOD save_accettazione.</item>
        <item> DATA: lt_albero TYPE ty_t_albero,</item>
        <item> lt_alberob TYPE ty_t_albero,</item>
        <item> lt_tree_data_sel_old TYPE ty_t_tree_data_sel,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli.</item>
        <item/>
        <item> DATA: lt_nodes TYPE salv_t_nodes,</item>
        <item> ls_nodes TYPE salv_s_nodes.</item>
        <item/>
        <item> DATA: lv_mod_attive TYPE abap_bool.</item>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> DATA: lv_key TYPE ty_s_tree_data_sel-key.</item>
        <item> CLEAR: lv_key.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_first).</item>
        <item>* CASE gv_tipo_anticipo.</item>
        <item>* WHEN c_anticipo.</item>
        <item>* IF ( NOT lv_key IS INITIAL ).</item>
        <item>** IF ( ls_tree_data_sel_first-level &gt; 1 ).</item>
        <item>* EXIT.</item>
        <item>* ENDIF.</item>
        <item>* WHEN c_produzione.</item>
        <item>* EXIT.</item>
        <item>* ENDCASE.</item>
        <item>* lv_key = ls_tree_data_sel_first-key.</item>
        <item> DATA(lv_tabix_1) = sy-tabix.</item>
        <item> IF ( lv_tabix_1 = 2 ). &quot;Il secondo record nella tabella pop-up</item>
        <item> CASE gv_tipo_anticipo. &quot;Tipo di file: Anticipo o Lancio produz</item>
        <item> WHEN c_anticipo. &quot;Acquisizione anticipo</item>
        <item> lv_key = ls_tree_data_sel_first-key.</item>
        <item> WHEN c_produzione. &quot;Acquisizione lancio di produzione</item>
        <item> lv_key = ls_tree_data_sel_first-key.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>** lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-ke</item>
        <item>*</item>
        <item>* &quot; Crea diba -----------------------------------------------------</item>
        <item>** create_diba( iv_action = space</item>
        <item>** iv_no_show_alv = abap_true</item>
        <item>** it_nodes = lt_nodes ).</item>
        <item>* save_diba( ).</item>
        <item>*</item>
        <item>* lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item>*</item>
        <item>* CHECK NOT gt_tree_data_sel[] IS INITIAL.</item>
        <item>*</item>
        <item>* &quot; esegue solo se non ci sono errori nelle bom</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANS</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item>* &quot;lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-</item>
        <item>* LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE key</item>
        <item>* CLEAR: ls_nodes.</item>
        <item>* ls_nodes-key = ls_tree_data_sel-key.</item>
        <item>* APPEND ls_nodes TO lt_nodes.</item>
        <item>* ENDLOOP.</item>
        <item>*</item>
        <item>** accettazione( iv_action = space</item>
        <item>** iv_no_show_alv = abap_true</item>
        <item>** iv_no_diba = abap_true &quot; non effettua sele</item>
        <item>** it_nodes = lt_nodes ).</item>
        <item>*</item>
        <item>* &quot; Crea cicli --------------------------------------------------</item>
        <item>* create_cicli( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item>* save_cicli( ).</item>
        <item>*</item>
        <item>*</item>
        <item>* &quot; Modifica componenti OdP -------------------------------------</item>
        <item>* change_odp_components( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item>* save_odp_components( ).</item>
        <item>*</item>
        <item>* ENDIF.</item>
        <item/>
        <item> ENDIF.</item>
        <item/>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key )</item>
        <item> lt_nodes = VALUE salv_t_nodes( ( key = lv_key ) ).</item>
        <item> accettazione( iv_action = space</item>
        <item> iv_no_show_alv = abap_true</item>
        <item> iv_no_diba = abap_true &quot; non effettua selezione</item>
        <item> it_nodes = lt_nodes ).</item>
        <item/>
        <item> REFRESH: lt_alberob.</item>
        <item> CLEAR: lt_alberob.</item>
        <item> FREE: lt_alberob.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> ls_tree_data_sel-elaborato = abap_true.</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = &apos;OK&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_data) = sy-tabix.</item>
        <item> ls_tree_data-elaborato = abap_true.</item>
        <item> CLEAR: ls_tree_data-color, ls_tree_data-opname.</item>
        <item> ls_tree_data-colore = &apos;GRIGIO&apos;.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_data.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_hier) = sy-tabix.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY rootname =</item>
        <item> counter =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_albero) = sy-tabix.</item>
        <item> ls_albero-itsob = ls_tree_data-itsob.</item>
        <item> IF ( ls_albero-azione = &apos;D&apos; ).</item>
        <item> DELETE gt_albero INDEX lv_tabix_albero.</item>
        <item> DELETE gt_tree_hier INDEX lv_tabix_hier.</item>
        <item> DELETE gt_tree_data INDEX lv_tabix_data.</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item> sort_tree_table( CHANGING ct_albero = gt_albero ).</item>
        <item> ELSE.</item>
        <item> ls_albero-elaborato = abap_true.</item>
        <item> CLEAR: ls_albero-opname, ls_albero-mod_succ.</item>
        <item> ls_albero-colore = &apos;GRIGIO&apos;.</item>
        <item> ls_albero-itsob = ls_tree_data-itsob.</item>
        <item> MODIFY gt_albero FROM ls_albero INDEX sy-tabix.</item>
        <item> MODIFY zpp_albero FROM ls_albero.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> APPEND ls_albero TO lt_alberob.</item>
        <item> ENDIF.</item>
        <item> DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_parent TYPE REF TO cl_salv_node.</item>
        <item> lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item> lo_node = lo_nodes-&gt;get_node( ls_tree_hier-key ).</item>
        <item> IF ( lo_node IS BOUND ).</item>
        <item> lo_parent = lo_node-&gt;get_parent( ).</item>
        <item> lo_node-&gt;set_visible( abap_false ).</item>
        <item> FREE lo_node.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> &quot; Backup accettato -------------------------------------------------</item>
        <item> &quot; bisogna non trasferire alla tabella degli storni i record settati</item>
        <item> &quot; (solo per colorarli di giallo nell&apos;albero)</item>
        <item> DELETE lt_alberob WHERE azione = &apos;U&apos; AND mod_succ = space.</item>
        <item> backup_accettato( it_alberob = lt_alberob ).</item>
        <item/>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTAZIONE>
      <SAVE_ACCETTA_ANTICIPO>
        <item> METHOD save_accetta_anticipo.</item>
        <item>* save_accettazione( ).</item>
        <item> save_accettazione_2( ).</item>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTA_ANTICIPO>
      <SAVE_ACCETTA_ANTICIPO_PROD>
        <item> METHOD save_accetta_anticipo_prod.</item>
        <item>* save_accettazione( ).</item>
        <item> save_accettazione_2( ).</item>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTA_ANTICIPO_PROD>
      <SAVE_CICLI>
        <item> METHOD save_cicli.</item>
        <item> DATA: lv_plnnr_agg TYPE abap_bool,</item>
        <item> lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel).</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> CLEAR: lv_plnnr_agg.</item>
        <item> IF ( ls_tree_data_sel-plnnr IS INITIAL AND</item>
        <item> get_ciclo( EXPORTING iv_matnr = ls_tree_data_sel-matnr ) IS I</item>
        <item>* READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item>* plnnr = ls_tree_data_sel-plnnr</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_plnnr_agg = abap_true.</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( lv_plnnr_agg = abap_true ).</item>
        <item> CALL FUNCTION &apos;ZPP_CREA_CICLO&apos;</item>
        <item> EXPORTING</item>
        <item> iv_matnr = ls_tree_data_sel-matnr</item>
        <item>* IV_WERKS = &apos;6301&apos;</item>
        <item> iv_plnnr = ls_tree_data_sel-plnnr_ref</item>
        <item>* IV_STATU = &apos;4&apos;</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito</item>
        <item>* ET_MESSTAB =</item>
        <item> .</item>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item>* DATA: lr_matnr TYPE RANGE OF matnr,</item>
        <item>* ls_matnr LIKE LINE OF lr_matnr.</item>
        <item>* REFRESH: lr_matnr.</item>
        <item>* CLEAR: ls_matnr.</item>
        <item>* ls_matnr-sign = &apos;I&apos;.</item>
        <item>* ls_matnr-option = &apos;EQ&apos;.</item>
        <item>* ls_matnr-low = ls_tree_data_sel-matnr.</item>
        <item>* APPEND ls_matnr TO lr_matnr.</item>
        <item>*</item>
        <item>* SUBMIT zpp_load_vers_prod WITH s_matnr IN lr_matnr[]</item>
        <item>* WITH p_werks = &apos;6301&apos;</item>
        <item>* WITH p_test = space</item>
        <item>* WITH p_submit = &apos;X&apos;</item>
        <item>* AND RETURN.</item>
        <item/>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> DATA: lv_tabix_2 TYPE i,</item>
        <item> lv_plnnr TYPE plnnr.</item>
        <item> lv_plnnr = get_ciclo( EXPORTING iv_matnr = ls_tree_data_sel-ma</item>
        <item/>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> ls_tree_data-plnnr = lv_plnnr.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SAVE_CICLI>
      <SAVE_DATES>
        <item> METHOD save_dates.</item>
        <item> DATA: lv_psttr_agg TYPE abap_bool,</item>
        <item> lv_pedtr_agg TYPE abap_bool,</item>
        <item> lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> ls_plaf TYPE plaf,</item>
        <item> lv_tabix TYPE i.</item>
        <item>* inizio modifica S.B. per bug modifica date in ordine pianificatp</item>
        <item>* LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light =</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel).</item>
        <item>* fine modifica S.B. per bug modifica date in ordine pianificato</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> CLEAR: lv_psttr_agg, lv_pedtr_agg.</item>
        <item>* Verifica se la Data Inizio √® stata modificata</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> psttr = ls_tree_data_sel-psttr TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_psttr_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item>* Verifica se la Data Fine √® stata modificata</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> pedtr = ls_tree_data_sel-pedtr TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_pedtr_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( lv_psttr_agg = abap_true OR lv_pedtr_agg = abap_true ).</item>
        <item> CALL FUNCTION &apos;ZPP_CHANGE_PLAF&apos;</item>
        <item> EXPORTING</item>
        <item> i_plnum = ls_tree_data_sel-plnum</item>
        <item> i_psttr = ls_tree_data_sel-psttr</item>
        <item> i_pedtr = ls_tree_data_sel-pedtr</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item/>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_plaf FROM pl</item>
        <item> WHERE plnum = ls_tree_data-plnum.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data_sel-psttr &lt;&gt; ls_plaf-psttr OR</item>
        <item> ls_tree_data_sel-pedtr &lt;&gt; ls_plaf-pedtr ).</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = &apos;Date non modificate&apos;.</item>
        <item> ls_tree_data_sel-psttr = ls_plaf-psttr.</item>
        <item> ls_tree_data_sel-pedtr = ls_plaf-pedtr.</item>
        <item> ELSE.</item>
        <item> ls_tree_data-psttr = ls_tree_data_sel-psttr.</item>
        <item> ls_tree_data-pedtr = ls_tree_data_sel-pedtr.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* ls_tree_data-psttr = ls_tree_data_sel-psttr.</item>
        <item>* ls_tree_data-pedtr = ls_tree_data_sel-pedtr.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> ENDLOOP.</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SAVE_DATES>
      <SAVE_DATES_ODP>
        <item> METHOD save_dates_odp.</item>
        <item> DATA: lv_gstrp_agg TYPE abap_bool,</item>
        <item> lv_gltrp_agg TYPE abap_bool,</item>
        <item> lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> ls_afko TYPE afko,</item>
        <item> lv_gg_gstrp TYPE i,</item>
        <item> lv_gg_gltrp TYPE i,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> CONSTANTS: lc_gg_sub TYPE n LENGTH 3 VALUE 300.</item>
        <item/>
        <item>* inizio modifica S.B. per bug salvataggio date in ordine di produzione</item>
        <item>* LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light =</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel).</item>
        <item>* fine modifica S.B. per bug salvataggio date in ordine di produzione</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data_old) WITH KEY matnr</item>
        <item> lv_gg_gstrp = ls_tree_data_old-gstrp - ls_tree_data_sel-gstrp.</item>
        <item> IF ( lv_gg_gstrp &gt; lc_gg_sub ).</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = `Data inizio cardine antecedente a ` &amp;&amp; l</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> IF ( lv_gg_gstrp &lt; -1 * lc_gg_sub ).</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = `Data inizio cardine posteriore di` &amp;&amp; lc</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> lv_gg_gltrp = ls_tree_data_old-gltrp - ls_tree_data_sel-gltrp.</item>
        <item> IF ( lv_gg_gltrp &gt; lc_gg_sub ).</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = `Data fine cardine antecedente a ` &amp;&amp; lc_</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> IF ( lv_gg_gltrp &lt; -1 * lc_gg_sub ).</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = `Data fine cardine posteriore di ` &amp;&amp; lc_</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> CLEAR: lv_gstrp_agg, lv_gltrp_agg.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> gstrp = ls_tree_data_sel-gstrp TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_gstrp_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> gltrp = ls_tree_data_sel-gltrp TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_gltrp_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( lv_gstrp_agg = abap_true OR lv_gltrp_agg = abap_true ).</item>
        <item> CALL FUNCTION &apos;ZPP_CHANGE_AFPO&apos;</item>
        <item> EXPORTING</item>
        <item> i_aufnr = ls_tree_data_sel-aufnr</item>
        <item> i_gstrp = ls_tree_data_sel-gstrp</item>
        <item> i_gltrp = ls_tree_data_sel-gltrp</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> DATA: lv_tabix_2 TYPE i,</item>
        <item> lv_garg TYPE seqg3-garg,</item>
        <item> lv_str TYPE string,</item>
        <item> lo_lock TYPE REF TO zcl_bc_lock_handler.</item>
        <item> CLEAR: lv_garg.</item>
        <item>* CONCATENATE sy-mandt lv_padre &apos;6301&apos; &apos;2&apos; INTO lv_garg RESPECTING BL</item>
        <item> CONCATENATE sy-mandt ls_tree_data_sel-aufnr INTO lv_garg RESPE</item>
        <item> lv_str = lv_garg.</item>
        <item/>
        <item> lo_lock = NEW #( iv_gname = &apos;AUFK&apos;</item>
        <item> iv_time = 10</item>
        <item> iv_garg = lv_str ).</item>
        <item> IF ( lo_lock-&gt;wait_lock( ) = 0 ).</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = l</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item>* IF ( lo_lock-&gt;wait_lock( ) = 0 ).</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_afko FROM</item>
        <item> WHERE aufnr = ls_tree_data-aufnr.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data_sel-gstrp &lt;&gt; ls_afko-gstrp AND</item>
        <item> ls_tree_data_sel-gltrp &lt;&gt; ls_afko-gltrp ).</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = &apos;Date non modificate&apos;.</item>
        <item> ls_tree_data_sel-gstrp = ls_afko-gstrp.</item>
        <item> ls_tree_data_sel-gltrp = ls_afko-gltrp.</item>
        <item> ELSE.</item>
        <item> ls_tree_data-gstrp = ls_tree_data_sel-gstrp.</item>
        <item> ls_tree_data-gltrp = ls_tree_data_sel-gltrp.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_dat</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* ls_tree_data-psttr = ls_tree_data_sel-psttr.</item>
        <item>* ls_tree_data-pedtr = ls_tree_data_sel-pedtr.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tab</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item>* ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> FREE lo_lock.</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SAVE_DATES_ODP>
      <SAVE_ODP>
        <item> METHOD save_odp.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_aufnr TYPE afko-aufnr,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> lv_tabix = sy-tabix.</item>
        <item/>
        <item> CALL FUNCTION &apos;ZPP_CREA_ODP&apos;</item>
        <item> EXPORTING</item>
        <item>* I_BADGE =</item>
        <item>* I_MATNR =</item>
        <item>* I_WERKS =</item>
        <item>* I_PSPNR =</item>
        <item>* I_MENGE =</item>
        <item>* I_GLTRP =</item>
        <item> i_plnum = ls_tree_data_sel-plnum</item>
        <item> IMPORTING</item>
        <item> e_aufnr = lv_aufnr</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_tr</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> ls_tree_data-aufnr = lv_aufnr.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SAVE_ODP>
      <SAVE_ODP_COMPONENTS>
        <item> METHOD save_odp_components.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> ls_afko TYPE afko,</item>
        <item>* lv_tabix TYPE i,</item>
        <item> lt_tree_data_sel TYPE ty_t_tree_data_sel,</item>
        <item> ls_tree_data_sel_2 TYPE ty_s_tree_data_sel,</item>
        <item> lv_aufnr TYPE aufnr,</item>
        <item> lt_tree_data_sel_old TYPE ty_t_tree_data_sel,</item>
        <item> lt_components TYPE ty_t_tree_data_sel.</item>
        <item> DATA: lv_number TYPE nrlevel.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item> gv_change_odp_err = abap_false.</item>
        <item/>
        <item> REFRESH: lt_components, lt_tree_data_sel_old.</item>
        <item> CLEAR: lt_components, lt_tree_data_sel_old.</item>
        <item> FREE: lt_components, lt_tree_data_sel_old.</item>
        <item/>
        <item> CLEAR: lv_number.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item>* Estrazione del numovo progressivo che sar√† la parte finale del MOP</item>
        <item> CALL FUNCTION &apos;NUMBER_GET_NEXT&apos;</item>
        <item> EXPORTING</item>
        <item> nr_range_nr = &apos;01&apos;</item>
        <item> object = &apos;ZRANGE_MOP&apos;</item>
        <item>* QUANTITY = &apos;1&apos;</item>
        <item>* SUBOBJECT = &apos; &apos;</item>
        <item> toyear = sy-datum(4)</item>
        <item>* IGNORE_BUFFER = &apos; &apos;</item>
        <item> IMPORTING</item>
        <item> number = lv_number &quot;Parte finale del MOP, i</item>
        <item>* QUANTITY =</item>
        <item>* RETURNCODE =</item>
        <item> EXCEPTIONS</item>
        <item> interval_not_found = 1</item>
        <item> number_range_not_intern = 2</item>
        <item> object_not_found = 3</item>
        <item> quantity_is_0 = 4</item>
        <item> quantity_is_not_1 = 5</item>
        <item> interval_overflow = 6</item>
        <item> buffer_overflow = 7</item>
        <item> OTHERS = 8.</item>
        <item> EXIT.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHE</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE light = space A</item>
        <item> DATA(lv_tabix_sel) = sy-tabix.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = ls_</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = l</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data_sel-odp_cons = abap_true ).</item>
        <item> save_odp_con_consumi( EXPORTING iv_storno = iv_storno</item>
        <item> iv_index = lv_tabix_sel</item>
        <item> iv_number = lv_number</item>
        <item> CHANGING cs_tree_data_sel = ls_tree_data_</item>
        <item> ELSE.</item>
        <item>* L&apos;OdP non ha avuto prelievi ed √® in stato utente PDC0 si procede</item>
        <item> save_odp_senza_consumi( EXPORTING iv_storno = iv_storno</item>
        <item> iv_index = lv_tabix_sel</item>
        <item> CHANGING cs_tree_data_sel = ls_tree_dat</item>
        <item> ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHE</item>
        <item/>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANSPOR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare semafori rossi&apos;.</item>
        <item> gv_change_odp_err = abap_true.</item>
        <item> ELSE.</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE aufnr &lt;&gt; spac</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* Colorazione dell&apos;Albero (1¬∞ Step)</item>
        <item> lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item> REFRESH: gt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel.</item>
        <item/>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_nodes).</item>
        <item> DATA(lv_index) = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR ls_tree_data-mod_su</item>
        <item>* ls_tree_data-mod_succ = &apos;U&apos; ).</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel. &quot;&lt;------</item>
        <item>* ENDIF.</item>
        <item> select_branch( EXPORTING iv_elaborato = ls_tree_data-elabora</item>
        <item> is_tree_data = ls_tree_data</item>
        <item> CHANGING ct_tree_data_sel = gt_tree_data_sel</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item>* Colorazione dell&apos;Albero (2¬∞ Step)</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel. &quot; WHERE light =</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> ls_tree_data_sel-elaborato = abap_true.</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = &apos;OK&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_tr</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY ref = ls_tr</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_data) = sy-tabix.</item>
        <item> DATA(ls_tree_data_old) = ls_tree_data.</item>
        <item> ls_tree_data-elaborato = abap_true.</item>
        <item> CLEAR: ls_tree_data-color, ls_tree_data-opname.</item>
        <item> ls_tree_data-colore = &apos;GRIGIO&apos;.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_data TR</item>
        <item> IF ( ls_tree_data_old &lt;&gt; ls_tree_data ).</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDIF.</item>
        <item> &quot;READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY ke</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_hier) = sy-tabix.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY rootnam</item>
        <item> counter</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_albero) = sy-tabix.</item>
        <item> IF ( ls_albero-azione = &apos;D&apos; ).</item>
        <item> DELETE gt_albero INDEX lv_tabix_albero.</item>
        <item> DELETE gt_tree_hier INDEX lv_tabix_hier.</item>
        <item> DELETE gt_tree_data INDEX lv_tabix_data.</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_albero-root</item>
        <item> AND counter = ls_albero-coun</item>
        <item> sort_tree_table( CHANGING ct_albero = gt_albero ).</item>
        <item> DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_parent TYPE REF TO cl_salv_node.</item>
        <item> lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item> lo_node = lo_nodes-&gt;get_node( ls_tree_hier-key ).</item>
        <item> IF ( lo_node IS BOUND ).</item>
        <item> lo_parent = lo_node-&gt;get_parent( ).</item>
        <item> lo_node-&gt;set_visible( abap_false ).</item>
        <item> FREE lo_node.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> ls_albero-elaborato = abap_true.</item>
        <item> CLEAR: ls_albero-opname, ls_albero-mod_succ.</item>
        <item> ls_albero-colore = &apos;GRIGIO&apos;.</item>
        <item> ls_albero-itsob = ls_tree_data-itsob.</item>
        <item> MODIFY gt_albero FROM ls_albero INDEX sy-tabix.</item>
        <item> MODIFY zpp_albero FROM ls_albero.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item>* APPEND ls_albero TO lt_alberob.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO ls_tree_data_sel.</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_ODP_COMPONENTS>
      <SAVE_PHANTOM_IN_DIBA>
        <item> METHOD save_phantom_in_diba.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> lv_tabix = sy-tabix.</item>
        <item/>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = ls_</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = ls_</item>
        <item> CHECK sy-subrc = 0.</item>
        <item/>
        <item/>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY parentname = ls</item>
        <item> ref = ls</item>
        <item> CHECK sy-subrc = 0.</item>
        <item> DATA(lv_tabix_albero) = sy-tabix.</item>
        <item/>
        <item> zcl_pp_pdm_monitor_sec=&gt;set_phantom( CHANGING cs_tree_data_sel = l</item>
        <item> cs_albero = l</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> IF ( ls_tree_data_sel-light = icon_green_light ).</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = l</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = l</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> ls_tree_data-itsob = ls_tree_data_sel-itsob.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> ls_albero-itsob = ls_tree_data_sel-itsob.</item>
        <item> MODIFY gt_albero FROM ls_albero INDEX lv_tabix_albero.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHE</item>
        <item> &quot; eventuale controllo di integrit√† albero dopo la modifica del phant</item>
        <item> &quot;diff_branch_nodes( ).</item>
        <item> ENDMETHOD.</item>
      </SAVE_PHANTOM_IN_DIBA>
      <SAVE_STORNO_ACCETTATO>
        <item> METHOD save_storno_accettato.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_aufnr TYPE afko-aufnr,</item>
        <item> lv_tabix TYPE i,</item>
        <item> ls_tree_data_first TYPE ty_s_tree_data_sel.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> IF ( ls_tree_data_first IS INITIAL ).</item>
        <item> ls_tree_data_first = ls_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* CALL FUNCTION &apos;ZPP_CREA_ODP&apos;</item>
        <item>* EXPORTING</item>
        <item>** I_BADGE =</item>
        <item>** I_MATNR =</item>
        <item>** I_WERKS =</item>
        <item>** I_PSPNR =</item>
        <item>** I_MENGE =</item>
        <item>** I_GLTRP =</item>
        <item>* i_plnum = ls_tree_data_sel-plnum</item>
        <item>* IMPORTING</item>
        <item>* e_aufnr = lv_aufnr</item>
        <item>* e_esito = lv_esito</item>
        <item>* e_descr_esito = lv_descr_esito.</item>
        <item>* IF ( lv_esito = &apos;000&apos; ).</item>
        <item>* ls_tree_data_sel-light = icon_green_light.</item>
        <item>* ls_tree_data_sel-log = lv_descr_esito.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* DATA: lv_tabix_2 TYPE i.</item>
        <item>* LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_t</item>
        <item>* lv_tabix_2 = sy-tabix.</item>
        <item>* ls_tree_data-aufnr = lv_aufnr.</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item>* ENDLOOP.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item>* ELSE.</item>
        <item>* ls_tree_data_sel-light = icon_red_light.</item>
        <item>* ls_tree_data_sel-log = lv_descr_esito.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> DATA: lt_tree_data_sel_old TYPE ty_t_tree_data_sel.</item>
        <item/>
        <item> lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item/>
        <item> DATA(lt_nodes) = VALUE salv_t_nodes( ( key = ls_tree_data_first-key</item>
        <item/>
        <item> DATA: lv_mod_attive TYPE abap_bool.</item>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item/>
        <item>* &quot; Storno diba -----------------------------------------------------</item>
        <item>** create_diba( iv_action = space</item>
        <item>** iv_no_show_alv = abap_true</item>
        <item>** it_nodes = lt_nodes ).</item>
        <item>** save_storno_diba( ).</item>
        <item>*</item>
        <item>* &quot; Resetta modifiche OdP -------------------------------------------</item>
        <item>* change_odp_components( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item>* save_odp_components( iv_storno = abap_true ).</item>
        <item>*</item>
        <item>**RESTORE_ACCETTATO( it_tree_data_sel = gt_tree_data_sel ).</item>
        <item>*</item>
        <item>* gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item/>
        <item> ENDIF.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_STORNO_ACCETTATO>
      <SAVE_TECO_ODP>
        <item> METHOD save_teco_odp.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_tabix TYPE i,</item>
        <item> lv_garg TYPE seqg3-garg,</item>
        <item> lv_str TYPE string,</item>
        <item> lo_lock TYPE REF TO zcl_bc_lock_handler.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> lv_tabix = sy-tabix.</item>
        <item/>
        <item> set_odp_teco( EXPORTING iv_order = ls_tree_data_sel-aufnr</item>
        <item> CHANGING cv_esito = lv_esito</item>
        <item> cv_descr_esito = lv_descr_esito ).</item>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item> CLEAR: lv_garg.</item>
        <item> CONCATENATE sy-mandt ls_tree_data_sel-aufnr INTO lv_garg RESPECT</item>
        <item> lv_str = lv_garg.</item>
        <item/>
        <item> lo_lock = NEW #( iv_gname = &apos;AUFK&apos;</item>
        <item> iv_time = 10</item>
        <item> iv_garg = lv_str ).</item>
        <item> IF ( lo_lock-&gt;wait_lock( ) = 0 ).</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item>* ls_tree_data-aufnr = lv_aufnr.</item>
        <item> get_odp_info( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> FREE lo_lock.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SAVE_TECO_ODP>
      <SAVE_TIMES>
        <item> METHOD save_times.</item>
        <item> DATA: lv_dzeit_agg TYPE abap_bool,</item>
        <item> lv_plifz_agg TYPE abap_bool,</item>
        <item> lv_webaz_agg TYPE abap_bool,</item>
        <item> lv_beskz_agg TYPE abap_bool,</item>
        <item> lv_sobsl_agg TYPE abap_bool,</item>
        <item> lv_matkl_agg TYPE abap_bool,</item>
        <item> lv_dismm_agg TYPE abap_bool,</item>
        <item> lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel). &quot; WHERE light</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> CLEAR: lv_dzeit_agg, lv_plifz_agg, lv_webaz_agg, lv_beskz_agg, lv_</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> dzeit = ls_tree_data_sel-dzeit TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_dzeit_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> plifz = ls_tree_data_sel-plifz TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_plifz_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> webaz = ls_tree_data_sel-webaz TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_webaz_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> beskz = ls_tree_data_sel-beskz TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_beskz_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> sobsl = ls_tree_data_sel-sobsl TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_sobsl_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> matkl = ls_tree_data_sel-matkl TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> lv_matkl_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> dismm = ls_tree_data_sel-dismm TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> IF ( ls_tree_data_sel-dismm &lt;&gt; &apos;PD&apos; AND ls_tree_data_sel-dismm &lt;</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = &apos;Valori consentiti: PD o ND&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> lv_dismm_agg = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item> READ TABLE gt_tree_data WITH KEY matnr = ls_tree_data_sel-matnr</item>
        <item> beskz = ls_tree_data_sel-beskz TR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> IF ( ls_tree_data_sel-beskz &lt;&gt; &apos;E&apos; AND ls_tree_data_sel-beskz &lt;&gt;</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = &apos;Valori consentiti E o F&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( lv_dzeit_agg = abap_true OR lv_plifz_agg = abap_true OR lv_we</item>
        <item> lv_beskz_agg = abap_true OR lv_sobsl_agg = abap_true OR lv_ma</item>
        <item> lv_dismm_agg = abap_true ).</item>
        <item> CALL FUNCTION &apos;ZPP_CHANGE_AM_TEMPI&apos;</item>
        <item> EXPORTING</item>
        <item> i_matnr = ls_tree_data_sel-matnr</item>
        <item> i_werks = &apos;6301&apos;</item>
        <item> i_dzeit = ls_tree_data_sel-dzeit</item>
        <item> i_dzeit_agg = lv_dzeit_agg</item>
        <item> i_plifz = ls_tree_data_sel-plifz</item>
        <item> i_plifz_agg = lv_plifz_agg</item>
        <item> i_webaz = ls_tree_data_sel-webaz</item>
        <item> i_webaz_agg = lv_webaz_agg</item>
        <item> i_beskz = ls_tree_data_sel-beskz</item>
        <item> i_beskz_agg = lv_beskz_agg</item>
        <item> i_sobsl = ls_tree_data_sel-sobsl</item>
        <item> i_sobsl_agg = lv_sobsl_agg</item>
        <item> i_matkl = ls_tree_data_sel-matkl</item>
        <item> i_matkl_agg = lv_matkl_agg</item>
        <item> i_dismm = ls_tree_data_sel-dismm</item>
        <item> i_dismm_agg = lv_dismm_agg</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item/>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> ls_tree_data-dzeit = ls_tree_data_sel-dzeit.</item>
        <item> ls_tree_data-plifz = ls_tree_data_sel-plifz.</item>
        <item> ls_tree_data-webaz = ls_tree_data_sel-webaz.</item>
        <item> ls_tree_data-beskz = ls_tree_data_sel-beskz.</item>
        <item> ls_tree_data-sobsl = ls_tree_data_sel-sobsl.</item>
        <item> ls_tree_data-matkl = ls_tree_data_sel-matkl.</item>
        <item> ls_tree_data-dismm = ls_tree_data_sel-dismm.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> ls_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SAVE_TIMES>
      <SEARCH_CHANGES>
        <item> METHOD search_changes.</item>
        <item> DATA: lt_data_bom_new TYPE ty_t_data_bom,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname,</item>
        <item> ls_data_bom TYPE ty_s_data_bom,</item>
        <item> ls_data_bom1 TYPE ty_s_data_bom,</item>
        <item> ls_albero_tmp TYPE ty_s_albero,</item>
        <item> lt_data_bom TYPE ty_t_data_bom,</item>
        <item> lt_data_anag TYPE ty_t_data_anag,</item>
        <item> ls_ztpp000 TYPE ztpp000,</item>
        <item> lv_anticipo TYPE c.</item>
        <item> DATA: ct_albero TYPE ty_t_albero,</item>
        <item> lt_albero TYPE ty_t_albero.</item>
        <item/>
        <item> IF ( iv_check = abap_true ).</item>
        <item>* Estrazione se da parametro i dati nei file elaborati devono alimen</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_ztpp000 FROM ztpp0</item>
        <item> WHERE zzcd1 = &apos;CRUSCOTTO_DI_PRODUZIONE&apos;</item>
        <item> AND zzcd2 = &apos;ZPP_PDM_MONITOR&apos;</item>
        <item> AND zzcd3 = &apos;ZPP_ALBERO&apos;</item>
        <item> AND zzcd4 = &apos;BATCH&apos;</item>
        <item> AND zzds1 = abap_true.</item>
        <item> ENDIF.</item>
        <item> IF ( sy-subrc = 0 ). &quot;SELECT SINGLE * INTO CORRESPONDING FIELDS OF</item>
        <item> TYPES: BEGIN OF ty_s_elab,</item>
        <item> datum TYPE datum,</item>
        <item> uzeit TYPE uzeit,</item>
        <item> rootname TYPE zpp_pdm_rootname,</item>
        <item> END OF ty_s_elab.</item>
        <item> DATA: ls_elab TYPE ty_s_elab,</item>
        <item> lt_elab TYPE TABLE OF ty_s_elab.</item>
        <item> CLEAR: lv_anticipo.</item>
        <item/>
        <item/>
        <item>* Nel file, i record PARENTNAME-CHILDNAME possono essere non in ordi</item>
        <item>* dell&apos;Albero BOM. Quindi pu√≤ arrivare un legame PARENTNAME-CHILDNAM</item>
        <item>* attribuito all&apos;Albero BOM, lo sar√† ma in un record successivo.</item>
        <item>* Si rende quindi necessario un ciclo DO - ENDDO di 20 volte (il val</item>
        <item>* attualmente possono avere al massimo fino a 10 livelli di BOM) per</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> DATA(lv_end) = abap_false.</item>
        <item/>
        <item>************************************************************************</item>
        <item> DO 20 TIMES.</item>
        <item/>
        <item> REFRESH: lt_elab.</item>
        <item> CLEAR: lt_elab.</item>
        <item> FREE: lt_elab.</item>
        <item/>
        <item>* Questa logica non andrebbe bene nel caso un legame non attribuit</item>
        <item>* che mi permette di agganciare all&apos;albero questo legame ma (atten</item>
        <item>* Quindi eventuali legami non attribuiti potenzialmente posso caus</item>
        <item>* Quindi il codice non √® 100% error free</item>
        <item> IF ( iv_rootname IS INITIAL ).</item>
        <item> SELECT datum uzeit rootname INTO CORRESPONDING FIELDS OF TABLE</item>
        <item> GROUP BY datum uzeit rootname ORDER BY datum uzeit rootname.</item>
        <item> ELSE.</item>
        <item> SELECT datum uzeit rootname INTO CORRESPONDING FIELDS OF TABLE</item>
        <item/>
        <item> GROUP BY datum uzeit rootname ORDER BY datum uzeit rootname.</item>
        <item> ENDIF.</item>
        <item> LOOP AT lt_elab INTO ls_elab. &quot;SELECT datum uzeit rootname INT</item>
        <item> CLEAR: ls_albero_tmp.</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_albero_tmp FRO</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE * INTO CORRESPONDING FI</item>
        <item>* ROOTNAME non √® sull&apos;Albero BOM</item>
        <item/>
        <item>* Lettura della tabella ZPP_PDM_MON_BOM in ricorsione prima in p</item>
        <item>* Infine aggiornmento tabella ZPP_ALBERO</item>
        <item>* prima_elaborazione( EXPORTING iv_rootname = ls_elab-rootname</item>
        <item>* iv_datum = ls_elab-datum</item>
        <item>* iv_uzeit = ls_elab-uzeit ).</item>
        <item/>
        <item> &quot; leggo il primo record per rootname</item>
        <item> IF ( prima_elaborazione_new( EXPORTING iv_rootname = ls_elab</item>
        <item> iv_datum = ls_elab</item>
        <item> iv_uzeit = ls_elab</item>
        <item> lv_end = elaborazioni_successive( EXPORTING iv_rootname =</item>
        <item> iv_datum =</item>
        <item> iv_uzeit =</item>
        <item> ELSE.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE. &quot;SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_alber</item>
        <item>* ROOTNAME √® sull&apos;Albero BOM</item>
        <item>* BREAK kosmedev.</item>
        <item/>
        <item>************************************************************************</item>
        <item>* ESISTE DIFFERENZA TRA ANTICIPO E LANCIO CIOE&apos; IL LANCIO VA V</item>
        <item>* PREMESSA: IL ROOTNAME E&apos; COMPOSTO DA 3 GRUPPI: PARTE MECCANI</item>
        <item>* TEORICAMENTE SI ANTICIPA SOLO E SOLTANTO LA PARTE</item>
        <item>* IL LANCIO DELLA PARTE MECCANICA IMPLICA LA CANCELL</item>
        <item>* IL PROGRAMMA, GRAZIE AL CAMPO ZPP_ALBERO-RELTYPE,</item>
        <item>* IL PROGRAMMA, GRAZIE AL CAMPO ZPP_ALBERO-TIPOFILE,</item>
        <item>* POSSIAMO AVERE PIU&apos; ANTICIPI E PIU&apos; LANCI DELLA ST</item>
        <item>* LA CANCELLAZIONE DELL&apos;ANTICIPO ALL&apos;ARRIVO DEL PRIM</item>
        <item>* LA TABELLA ZPP_ALBERO_ANT SERVIRA&apos; PER VALORIZZARE</item>
        <item/>
        <item> DATA: lt_data_bom_db TYPE ty_t_data_bom.</item>
        <item/>
        <item> REFRESH: lt_data_bom_db.</item>
        <item> CLEAR: lt_data_bom_db.</item>
        <item> FREE: lt_data_bom_db.</item>
        <item/>
        <item>* &quot; Se arriva un file di lancio produzione RELTYPE=PBOMMEC ca</item>
        <item>* &quot; Si verifica che l&apos;albero sia stato generato da files di a</item>
        <item> DATA: lt_data_bom_lancio TYPE ty_t_data_bom.</item>
        <item> DATA: lt_albero_ant_1 TYPE ty_t_albero.</item>
        <item> DATA: lt_albero_ant TYPE ty_t_albero.</item>
        <item/>
        <item> DATA: ls_albero_ant_1 TYPE ty_s_albero.</item>
        <item> DATA: ls_albero_ant_2 TYPE ty_s_albero.</item>
        <item> DATA: ls_albero_ant TYPE ty_s_albero.</item>
        <item/>
        <item> REFRESH: lt_data_bom_lancio, lt_albero_ant_1, lt_albero_ant.</item>
        <item> CLEAR: lt_data_bom_lancio, lt_albero_ant_1, lt_albero_ant.</item>
        <item> FREE: lt_data_bom_lancio, lt_albero_ant_1, lt_albero_ant.</item>
        <item/>
        <item> SELECT tipofile reltype INTO CORRESPONDING FIELDS OF TABLE l</item>
        <item> FROM zpp_pdm_mon_bom</item>
        <item> WHERE rootname = ls_elab-rootname</item>
        <item> AND ( tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_fi</item>
        <item> tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_la</item>
        <item> tipofile = zcl_pp_pdm_file=&gt;c_bom_pdm_prod_pa</item>
        <item> AND elaborato = abap_false</item>
        <item> GROUP BY tipofile reltype.</item>
        <item> LOOP AT lt_data_bom_lancio INTO DATA(ls_data_bom_lancio).</item>
        <item/>
        <item>* Estrazione dei primi livelli di Anticipo a parit√† di RELTY</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero_ant_</item>
        <item> FROM zpp_albero WHERE rootname = ls_elab-rootna</item>
        <item> AND parentname = ls_elab-rootna</item>
        <item> AND ( tipofile = zcl_pp_pdm_file=</item>
        <item> tipofile = zcl_pp_pdm_file=</item>
        <item> tipofile = zcl_pp_pdm_file=</item>
        <item> AND reltype = ls_data_bom_lanc</item>
        <item> IF sy-subrc = 0.</item>
        <item> READ TABLE lt_albero_ant_1 INTO ls_albero_ant_1 INDEX 1.</item>
        <item> &quot; bisogna settare come elaborati eventuali record di ant</item>
        <item> UPDATE zpp_pdm_mon_bom SET elaborato = abap_true</item>
        <item> log = &apos;WARNING: MAI ELABORATO</item>
        <item> WHERE tipofile = ls_albero_ant_1-tipofile</item>
        <item> AND rootname = ls_elab-rootname</item>
        <item> AND reltype = ls_data_bom_lancio-reltype</item>
        <item> AND elaborato = abap_false.</item>
        <item/>
        <item> REFRESH: ct_albero.</item>
        <item> CLEAR: ct_albero.</item>
        <item> FREE: ct_albero.</item>
        <item/>
        <item>* Estrazione Albero BOM</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE ct_albero FR</item>
        <item> ORDER BY sort.</item>
        <item> ENDIF.</item>
        <item> LOOP AT lt_albero_ant_1[] INTO ls_albero_ant_1.</item>
        <item> BREAK kosmedev.</item>
        <item> &quot; copio parte albero in ZPP_ALBERO_ANT</item>
        <item/>
        <item> REFRESH: lt_albero_ant.</item>
        <item> CLEAR: lt_albero_ant.</item>
        <item> FREE: lt_albero_ant.</item>
        <item/>
        <item> READ TABLE ct_albero INTO ls_albero_ant WITH KEY rootnam</item>
        <item> counter</item>
        <item> DATA(lv_index_1) = sy-tabix.</item>
        <item> APPEND ls_albero_ant TO lt_albero_ant. &quot;&lt;------</item>
        <item> LOOP AT ct_albero INTO ls_albero_ant_2 FROM lv_index_1 +</item>
        <item> IF ls_albero_ant_2-lev &gt; ls_albero_ant-lev.</item>
        <item> APPEND ls_albero_ant_2 TO lt_albero_ant. &quot;&lt;------</item>
        <item> ELSE.</item>
        <item> EXIT. &quot;------&gt; USCITA LOOP</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO ls_albero_ant_2 FROM</item>
        <item> MODIFY zpp_albero_ant FROM TABLE lt_albero_ant. &quot;&lt;----</item>
        <item> lv_anticipo = &apos;Y&apos;.</item>
        <item> &quot; cancello la parte dell&apos;albero copiata in zpp_albero_an</item>
        <item> DELETE zpp_albero FROM TABLE lt_albero_ant. &quot;&lt;------</item>
        <item> &quot; cancello parte della tabella degli storni</item>
        <item> DELETE zpp_alberob FROM TABLE lt_albero_ant. &quot;&lt;------</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_albero_ant_1[] INTO ls_albero_ant_1</item>
        <item> ENDLOOP. &quot;LOOP AT lt_data_bom_lancio INTO DATA(ls_data_bom_</item>
        <item/>
        <item>* ESISTE DIFFERENZA TRA ANTICIPO E LANCIO CIOE&apos; IL LANCIO VA V</item>
        <item>************************************************************************</item>
        <item/>
        <item> lv_end = elaborazioni_successive( EXPORTING iv_rootname = ls</item>
        <item> iv_datum = ls</item>
        <item> iv_uzeit = ls</item>
        <item> ENDIF. &quot;SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_albe</item>
        <item/>
        <item> COMMIT WORK AND WAIT.</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT lt_elab INTO ls_elab. &quot;SELECT datum uzeit</item>
        <item/>
        <item> IF ( sy-subrc &lt;&gt; 0 OR lv_end = abap_true ).</item>
        <item>* Nessun record da elaborare o ( Nessuna modifica e nessuna canc</item>
        <item> EXIT. &quot;------&gt; USCITA DO</item>
        <item> ENDIF.</item>
        <item> ENDDO. &quot;DO 20 TIMES.</item>
        <item>************************************************************************</item>
        <item/>
        <item>************************************************************************</item>
        <item>* Tonolli_G - Start Ins - ALGORITMO DELLA &quot;VERA FOGLIA&quot; PERCHE&apos; IN A</item>
        <item>* Pu√≤ accadere che il legame padre-figlio sia presente una sola volt</item>
        <item>* presente pi√π volte in punti diversi dell&apos;Albero BOM e con inserime</item>
        <item>* La conseguenza √® di avere dei padri senza i figli. Ora si gestisce</item>
        <item>* sono stati aggiunti in stile copia-incolla non avranno valorizzato</item>
        <item>* Estrazione Albero BOM</item>
        <item>* NB: NON E&apos; POSSIBILE AVERE BOM RICORSIVE SIA DIRETTE (IL PADRE A&apos;</item>
        <item/>
        <item> DATA: lv_counter TYPE zpp_counter,</item>
        <item> l_check TYPE c,</item>
        <item> l_continua TYPE c,</item>
        <item> l_ricorsione TYPE c,</item>
        <item> lv_sort TYPE i.</item>
        <item/>
        <item> DO 20 TIMES.</item>
        <item/>
        <item> REFRESH: ct_albero.</item>
        <item> CLEAR: ct_albero.</item>
        <item> FREE: ct_albero.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE ct_albero FROM zpp_a</item>
        <item> ORDER BY sort.</item>
        <item/>
        <item> l_continua = &apos;N&apos;.</item>
        <item>* REM: Il primo record √® il ROOTNAME: PARENTNAME = SPACE AND CHILD</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero) FROM 2</item>
        <item> WHERE colore &lt;&gt; &apos;ROSSO&apos;.</item>
        <item> DATA(ls_albero_tabix) = sy-tabix.</item>
        <item> CHECK ls_albero-parentname &lt;&gt; ls_albero-childname. &quot;Solo per</item>
        <item/>
        <item>* Leggo il record sucessivo per verificare se il record corrente</item>
        <item> READ TABLE ct_albero INTO DATA(ls_albero_1) INDEX ls_albero_ta</item>
        <item> IF ( sy-subrc = 0 AND NOT ( ls_albero_1-lev &gt; ls_albero-lev )</item>
        <item> sy-subrc &lt;&gt; 0.</item>
        <item>* ls_albero identifica un nodo foglia. Trovata la foglia si ve</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero_2) WHERE parentname =</item>
        <item> DATA(ls_albero_2_tabix) = sy-tabix.</item>
        <item>* Trovato il ramo per il nodo foglia. Bisogna processare tut</item>
        <item>* √® presente pi√π volte nell&apos;albero, non importa sar√† il codi</item>
        <item>* ATTENZIONE: I seguenti campi non saranno valorizzato DATUM</item>
        <item>* solo COUNTER_BOM sar√† valorizzato con ZPP_ALBE</item>
        <item> MOVE-CORRESPONDING ls_albero_2 TO ls_data_bom.</item>
        <item> CLEAR: ls_data_bom-reltype, l_ricorsione.</item>
        <item/>
        <item>* Verifica che tra i discendenti non ci sia la foglia</item>
        <item> READ TABLE ct_albero INTO DATA(ls_albero_3) INDEX ls_alber</item>
        <item> IF sy-subrc = 0.</item>
        <item> DATA(ls_albero_3_tabix) = sy-tabix.</item>
        <item> WHILE ls_albero_3-lev &gt; ls_albero_2-lev.</item>
        <item> IF ls_albero_3-childname = ls_albero-childname.</item>
        <item> l_ricorsione = &apos;S&apos;.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ELSE.</item>
        <item> READ TABLE ct_albero INTO ls_albero_3 INDEX ls_alber</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_albero_3_tabix = sy-tabix.</item>
        <item> ELSE.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDWHILE.</item>
        <item> ENDIF.</item>
        <item> CHECK l_ricorsione IS INITIAL.</item>
        <item> CHECK ls_albero_2-lev &lt; 20. &quot;Solo per sicurezza</item>
        <item/>
        <item> l_continua = &apos;S&apos;.</item>
        <item/>
        <item/>
        <item>************************************************************************</item>
        <item>* INIZIO CODICE RIPETUTO IN ELABORAZIONI_SUCCESSIVE - VEDI *</item>
        <item>************************************************************************</item>
        <item/>
        <item/>
        <item> CLEAR: lt_albero.</item>
        <item> REFRESH: lt_albero.</item>
        <item> FREE: lt_albero.</item>
        <item/>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero</item>
        <item> FROM zpp_albero WHERE rootname = ls_data_bom-rootname</item>
        <item> ORDER BY sort.</item>
        <item/>
        <item>* Estrazione del figlio da trasformare in padre. Chiaramente il fi</item>
        <item> LOOP AT lt_albero INTO ls_albero WHERE rootname = ls_dat</item>
        <item> AND childname = ls_dat</item>
        <item> AND relenddate = c_data</item>
        <item>* Il record a cui appendere esiste e non √® cancellato</item>
        <item> DATA(lv_index) = sy-tabix.</item>
        <item> CLEAR: lv_counter, l_check.</item>
        <item/>
        <item>* Verifica se il ramo da appendere √® gi√† appeso considerando anc</item>
        <item> LOOP AT lt_albero INTO ls_albero_2 FROM lv_index + 1.</item>
        <item> IF NOT ( ls_albero_2-lev &gt; ls_albero-lev ).</item>
        <item>* Il sotto ramo √® terminato. Non esistono componenti</item>
        <item> l_check = &apos;N&apos;.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item/>
        <item/>
        <item> IF ( ls_albero_2-rootname = ls_data_bom-rootname</item>
        <item> ls_albero_2-parentname = ls_data_bom-parentname</item>
        <item> ls_albero_2-childname = ls_data_bom-childname</item>
        <item> &quot;ls_albero_2-relstartdate = ls_data_bom-relstartda</item>
        <item> ls_albero_2-relenddate = c_data_infinito</item>
        <item> ls_albero_2-lev = ls_albero-lev + 1 ).</item>
        <item>* Esiste gi√† il ramo</item>
        <item> IF ls_albero_2-relstartdate &lt;&gt; ls_data_bom-relstartd</item>
        <item>* NB: NON E&apos; POSSIBILE PER LO STESSO PADRE AVERE 2 COMPONENTI UGUALI I</item>
        <item> ls_data_bom-log = &apos;ERROR : RECORD GIA PRESENTE CON</item>
        <item> ELSE.</item>
        <item> ls_data_bom-log = &apos;INFO : RECORD GIA PRESENTE&apos;.</item>
        <item> ENDIF.</item>
        <item> l_check = &apos;Y&apos;.</item>
        <item> EXIT. &quot;------&gt; USCITA LOOP</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero_2 FROM lv_i</item>
        <item/>
        <item> IF l_check = &apos;Y&apos;.</item>
        <item>* ls_data_bom-elaborato = abap_true. &quot;Adesso no</item>
        <item>* MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;Adesso no</item>
        <item>* COMMIT WORK AND WAIT. &quot;Adesso no</item>
        <item> CONTINUE. &quot;------&gt;</item>
        <item> ENDIF.</item>
        <item/>
        <item> SELECT MAX( counter ) INTO lv_counter FROM zpp_albero WH</item>
        <item> ADD 1 TO lv_counter.</item>
        <item/>
        <item> lv_sort = ls_albero-sort + 1.</item>
        <item/>
        <item> set_row_tree_table( EXPORTING is_data_bom = ls_data_bo</item>
        <item> iv_counter = lv_counter</item>
        <item> iv_parent_sup = ls_albero-</item>
        <item> iv_lev = ls_albero-</item>
        <item> iv_sort = lv_sort</item>
        <item> CHANGING cs_albero = ls_albero ).</item>
        <item> ls_albero-azione = &apos;I&apos;.</item>
        <item> ls_albero-colore = &apos;VERDE&apos;.</item>
        <item> ls_albero-relenddate = c_data_infinito.</item>
        <item/>
        <item> APPEND ls_albero TO lt_albero.</item>
        <item/>
        <item> sort_tree_table( EXPORTING iv_index = lv_index</item>
        <item> CHANGING ct_albero = lt_albero ).</item>
        <item/>
        <item> CLEAR: ls_data_bom-log.</item>
        <item>* ls_data_bom-elaborato = abap_true. &quot;Adesso non</item>
        <item>* MODIFY zpp_pdm_mon_bom FROM ls_data_bom. &quot;Adesso non</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT lt_albero INTO ls_albero WHERE rootnam</item>
        <item/>
        <item>************************************************************************</item>
        <item>* FINE CODICE RIPETURO IN ELABORAZIONI_SUCCESSIVE - VEDI * I</item>
        <item>************************************************************************</item>
        <item/>
        <item> &quot;EXIT. &quot;Tonolli_G - 09.01.2017 Ins e poi DEL. Non attiva</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO DATA(ls_albero_2) WHERE p</item>
        <item> ENDIF. &quot;IF sy-subrc = 0 AND NOT ( ls_albero_1-lev &gt; ls_alber</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO DATA(ls_albero) FROM 2.</item>
        <item/>
        <item> IF ( l_continua = &apos;N&apos; ).</item>
        <item>* Nessun record da elaborare o ( Nessuna modifica e nessuna canc</item>
        <item> EXIT. &quot;------&gt; USCITA DO</item>
        <item> ENDIF.</item>
        <item/>
        <item> ENDDO. &quot;DO 20 TIMES.</item>
        <item>* Tonolli_G - End Ins - ALGORITMO DELLA &quot;VERA FOGLIA&quot; PERCHE&apos; IN ALT</item>
        <item>************************************************************************</item>
        <item/>
        <item>************************************************************************</item>
        <item>* Tonolli_G - Start Ins - ALGORITMO PROPAGAZIONE DALL&apos;ALTO VERSO IL</item>
        <item>* Pu√≤ accadere che il campo RELTYPE non sia valorizzato in questo ca</item>
        <item> REFRESH: ct_albero.</item>
        <item> CLEAR: ct_albero.</item>
        <item> FREE: ct_albero.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE ct_albero FROM zpp_alb</item>
        <item> ORDER BY sort.</item>
        <item/>
        <item>* REM: Il primo record √® il ROOTNAME: PARENTNAME = SPACE AND CHILDNA</item>
        <item> LOOP AT ct_albero INTO ls_albero FROM 2.</item>
        <item> ls_albero_tabix = sy-tabix.</item>
        <item/>
        <item>* Leggo il record successivo</item>
        <item> READ TABLE ct_albero INTO ls_albero_1 INDEX ls_albero_tabix + 1.</item>
        <item> IF sy-subrc = 0.</item>
        <item> IF ( ls_albero_1-lev &gt; ls_albero-lev ) OR &quot;Il record success</item>
        <item> ( ls_albero_1-lev = ls_albero-lev ) OR &quot;Il record success</item>
        <item> ( ls_albero_1-lev &lt; ls_albero-lev AND &quot;Cambio ramo</item>
        <item> ls_albero_1-lev &gt; 2 ). &quot;ma sempre sotto u</item>
        <item> DATA(ls_albero_1_tabix) = sy-tabix.</item>
        <item> IF ls_albero_1-reltype IS INITIAL.</item>
        <item> ls_albero_1-reltype = ls_albero-reltype.</item>
        <item> MODIFY ct_albero FROM ls_albero_1 INDEX ls_albero_1_tabix</item>
        <item> UPDATE zpp_albero SET reltype = ls_albero_1-reltype</item>
        <item> WHERE rootname = ls_albero_1-rootname</item>
        <item> AND counter = ls_albero_1-counter.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( ls_albero_1-lev &gt; ls_albero-lev ).</item>
        <item> ENDIF. &quot;IF sy-subrc = 0.</item>
        <item> ENDLOOP. &quot;LOOP AT ct_albero INTO DATA(ls_albero) FROM 2.</item>
        <item>* Tonolli_G - End Ins - ALGORITMO PROPAGAZIONE DEL CAMPO RELTYPE</item>
        <item>************************************************************************</item>
        <item/>
        <item>* Tonolli_G - Start Ins</item>
        <item>* Gestione del campo OPNAME</item>
        <item> REFRESH: lt_data_anag.</item>
        <item> CLEAR: lt_data_anag.</item>
        <item> FREE: lt_data_anag.</item>
        <item/>
        <item>* Pulizia del campo OPNAME</item>
        <item> UPDATE zpp_albero SET opname = &apos;&apos;</item>
        <item> WHERE rootname = iv_rootname.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item>* Estrazione dei dati dell&apos;Anagrafica relativa al record selezionato</item>
        <item>* REM: Sulla tabella interna ct_data_mat (vedi la relativa globale g</item>
        <item>* quindi l&apos;ultimo DATUM UZEIT. Vedi il codice in METHOD read_rec</item>
        <item> LOOP AT gt_data_anag INTO DATA(ls_data_anag) WHERE rootname = iv_r</item>
        <item> AND opname &lt;&gt; &apos;&apos;.</item>
        <item> UPDATE zpp_albero SET opname = ls_data_anag-opname</item>
        <item> WHERE rootname = iv_rootname</item>
        <item>* AND parentname = ls_data_anag-codename</item>
        <item> AND childname = ls_data_anag-codename.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDLOOP.</item>
        <item>* Tonolli_G - End Ins</item>
        <item/>
        <item> ENDIF. &quot;IF ( sy-subrc = 0 ). SELECT SINGLE * INTO CORRESPONDING</item>
        <item/>
        <item> IF lv_anticipo = &apos;Y&apos;.</item>
        <item>* Lancio produzione: recuperare il campo ITSOB (phantom in bom) dall</item>
        <item> REFRESH: lt_albero_ant.</item>
        <item> CLEAR: lt_albero_ant.</item>
        <item> FREE: lt_albero_ant.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_albero_ant</item>
        <item> FROM zpp_albero_ant</item>
        <item> WHERE rootname EQ iv_rootname</item>
        <item> AND colore NE &apos;VERDE&apos;.</item>
        <item> SORT lt_albero_ant BY rootname parentname childname.</item>
        <item> DELETE ADJACENT DUPLICATES FROM lt_albero_ant COMPARING rootname p</item>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT lt_albero_ant INTO ls_albero_ant.</item>
        <item> UPDATE zpp_albero</item>
        <item> SET itsob = ls_albero_ant-itsob</item>
        <item> colore = &apos;GRIGIO&apos;</item>
        <item> elaborato = &apos;X&apos;</item>
        <item> WHERE rootname EQ ls_albero_ant-rootname</item>
        <item> AND parentname EQ ls_albero_ant-parentname</item>
        <item> AND childname EQ ls_albero_ant-childname</item>
        <item> AND reltype EQ ls_albero_ant-reltype.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF lv_anticipo = &apos;Y&apos;.</item>
        <item/>
        <item> ENDMETHOD. &quot;METHOD search_changes_new.</item>
      </SEARCH_CHANGES>
      <SEARCH_CHANGES_NEW>
        <item> METHOD search_changes_new.</item>
        <item>* DATA: lt_data_bom_new TYPE ty_t_data_bom,</item>
        <item>* lt_data_bom_db TYPE ty_t_data_bom.</item>
        <item>* DATA: lv_tabix_5 TYPE i. &quot;DP-10_11_2016</item>
        <item>* DATA: lv_ref TYPE i. &quot;DP-10_11_2016</item>
        <item>* DATA: lv_ref1 TYPE i. &quot;DP-10_11_2016</item>
        <item>* DATA: lv_ref2 TYPE i. &quot;DP-10_11_2016</item>
        <item>* DATA: ls_data_bom TYPE ty_s_data_bom. &quot;DP-10_11_2016</item>
        <item>* DATA: ls_data_bom1 TYPE ty_s_data_bom. &quot;DP-10_11_2016</item>
        <item>* DATA: ls_tree_hier_1 TYPE ty_s_tree_hier. &quot;DP-10_11_2016</item>
        <item>*</item>
        <item>* &quot;Elimina duplicati dalla tabella interna letta da DB</item>
        <item>* LOOP AT gt_data_bom INTO ls_data_bom.</item>
        <item>* DATA(lv_tabix) = sy-tabix + 1.</item>
        <item>* LOOP AT gt_data_bom INTO ls_data_bom1 FROM lv_tabix</item>
        <item>* WHERE rootname =</item>
        <item>* AND parentname =</item>
        <item>* AND childname =</item>
        <item>* AND relstartdate =</item>
        <item>* AND relenddate =</item>
        <item>* AND relqty =</item>
        <item>* DATA(lv_tabix_2) = sy-tabix.</item>
        <item>* ls_data_bom1-del = abap_true.</item>
        <item>* MODIFY gt_data_bom FROM ls_data_bom1 INDEX lv_tabix_2.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDLOOP.</item>
        <item>*</item>
        <item>* &quot; tabella nuovi record letti da tabella DB e li inserisce nella tab</item>
        <item>* REFRESH: lt_data_bom_new.</item>
        <item>* REFRESH: lt_data_bom_db.</item>
        <item>* LOOP AT gt_data_bom INTO ls_data_bom WHERE azione = space.</item>
        <item>* ls_data_bom-azione = &apos;I&apos;.</item>
        <item>* APPEND ls_data_bom TO lt_data_bom_new.</item>
        <item>* ENDLOOP.</item>
        <item>* DELETE gt_data_bom WHERE azione = space.</item>
        <item>*</item>
        <item>* &quot;Identifica modificati e cancellati</item>
        <item>* LOOP AT lt_data_bom_new INTO ls_data_bom WHERE relenddate &lt;&gt; c_data</item>
        <item>* AND del = abap_f</item>
        <item>* lv_tabix = sy-tabix.</item>
        <item>* &quot; cerca se esista il record di modifica associato al record di ca</item>
        <item>* READ TABLE lt_data_bom_new INTO ls_data_bom1 WITH KEY rootname</item>
        <item>* parentname</item>
        <item>* childname</item>
        <item>** relstartda</item>
        <item>** relenddate</item>
        <item>* relstartdat</item>
        <item>* relenddate</item>
        <item>* del</item>
        <item>* IF ( sy-subrc = 0 ). &quot; record modificati</item>
        <item>* lv_tabix_2 = sy-tabix.</item>
        <item>* &quot; bisogna modificare il record gi√† presente nell&apos;albero</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_3) WITH KEY rootna</item>
        <item>* parent</item>
        <item>* childn</item>
        <item>* relsta</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix_4) = sy-tabix.</item>
        <item>* ls_data_bom_3-relstartdate = ls_data_bom1-relstartdate.</item>
        <item>* MODIFY gt_data_bom FROM ls_data_bom_3 INDEX lv_tabix_4.</item>
        <item>* UPDATE zpp_pdm_mon_bom SET relstartdate = ls_data_bom_3-relst</item>
        <item>* WHERE datum = ls_data_bom_3-datum</item>
        <item>* AND uzeit = ls_data_bom_3-uzeit</item>
        <item>* AND tipofile = ls_data_bom_3-tipofil</item>
        <item>* AND counter = ls_data_bom_3-counter</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* ENDIF.</item>
        <item>** lv_tabix_2 = sy-tabix.</item>
        <item>* ls_data_bom1-azione = &apos;U&apos;.</item>
        <item>** ls_data_bom_2-relqty_old = ls_data_bom-relqty.</item>
        <item>* MODIFY lt_data_bom_new FROM ls_data_bom1 INDEX lv_tabix_2.</item>
        <item>* ls_data_bom-del = abap_true.</item>
        <item>* MODIFY lt_data_bom_new FROM ls_data_bom INDEX lv_tabix.</item>
        <item>** delete lt_data_bom_new FROM lv_tabix.</item>
        <item>** CONTINUE.</item>
        <item>* ELSE. &quot; record cancellati</item>
        <item>** &quot; verifica se esiste il record da cancellare</item>
        <item>** READ TABLE gt_data_bom INTO ls_data_bom_2 WITH KEY rootname</item>
        <item>** parentname</item>
        <item>** childname</item>
        <item>*** relstartda</item>
        <item>** relenddate</item>
        <item>** del</item>
        <item>** IF ( sy-subrc = 0 ).</item>
        <item>** DATA(lv_tabix_3) = sy-tabix.</item>
        <item>* ls_data_bom-mod_succ = &apos;D&apos;.</item>
        <item>* ls_data_bom-azione = &apos;D&apos;.</item>
        <item>* MODIFY lt_data_bom_new FROM ls_data_bom INDEX lv_tabix.</item>
        <item>** CONTINUE.</item>
        <item>** ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP. &quot;LOOP AT lt_data_bom_new INTO ls_data_bom WHERE relendda</item>
        <item>*</item>
        <item>* &quot;Applica modifiche a tabella principale</item>
        <item>* LOOP AT lt_data_bom_new INTO ls_data_bom.</item>
        <item>* lv_tabix = sy-tabix.</item>
        <item>* IF ( ls_data_bom-del = abap_true ).</item>
        <item>* APPEND ls_data_bom TO lt_data_bom_db.</item>
        <item>* DELETE lt_data_bom_new INDEX lv_tabix.</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item>* READ TABLE gt_data_bom INTO ls_data_bom1</item>
        <item>* WITH KEY rootname = ls_data_bom-rootname</item>
        <item>* parentname = ls_data_bom-parentname</item>
        <item>* childname = ls_data_bom-childname</item>
        <item>* relstartdate = ls_data_bom-relstartdate.</item>
        <item>** relqty = ls_data_bom-relqty.</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* lv_tabix_2 = sy-tabix.</item>
        <item>* ls_data_bom1-mod_succ = ls_data_bom-mod_succ.</item>
        <item>* ls_data_bom1-azione = ls_data_bom-azione.</item>
        <item>* IF ( ls_data_bom-azione = &apos;D&apos; ).</item>
        <item>* IF ( ls_data_bom1-elaborato = abap_true ).</item>
        <item>* MODIFY gt_data_bom FROM ls_data_bom1 INDEX lv_tabix_2.</item>
        <item>* ls_data_bom-del = abap_true.</item>
        <item>* APPEND ls_data_bom TO lt_data_bom_db.</item>
        <item>* APPEND ls_data_bom1 TO lt_data_bom_db.</item>
        <item>* DELETE lt_data_bom_new INDEX lv_tabix.</item>
        <item>* ELSE.</item>
        <item>* ls_data_bom1-del = &apos;X&apos;.</item>
        <item>* ls_data_bom-del = &apos;X&apos;.</item>
        <item>* MODIFY gt_data_bom FROM ls_data_bom1 INDEX lv_tabix_2.</item>
        <item>* APPEND ls_data_bom TO lt_data_bom_db.</item>
        <item>* APPEND ls_data_bom1 TO lt_data_bom_db.</item>
        <item>* DELETE lt_data_bom_new INDEX lv_tabix.</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item>* CONTINUE.</item>
        <item>* ELSEIF ( ls_data_bom-azione = &apos;U&apos; ).</item>
        <item>* ls_data_bom1-elaborato = abap_false.</item>
        <item>* ls_data_bom1-relqty_old = ls_data_bom1-relqty.</item>
        <item>* ls_data_bom1-relqty = ls_data_bom-relqty.</item>
        <item>* MODIFY gt_data_bom FROM ls_data_bom1 INDEX lv_tabix_2.</item>
        <item>* ls_data_bom-del = &apos;X&apos;.</item>
        <item>* APPEND ls_data_bom TO lt_data_bom_db.</item>
        <item>* APPEND ls_data_bom1 TO lt_data_bom_db.</item>
        <item>* DELETE lt_data_bom_new INDEX lv_tabix.</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item>* ELSE.</item>
        <item>* ls_data_bom-azione = &apos;I&apos;.</item>
        <item>* APPEND ls_data_bom TO gt_data_bom.</item>
        <item>* APPEND ls_data_bom TO lt_data_bom_db.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP. &quot;LOOP AT lt_data_bom_new INTO ls_data_bom.</item>
        <item>*</item>
        <item>* &quot;Riporta modifiche su DB.</item>
        <item>* LOOP AT lt_data_bom_db INTO ls_data_bom.</item>
        <item>* IF ( ls_data_bom-del = abap_false ).</item>
        <item>* MODIFY zpp_pdm_mon_bom FROM ls_data_bom.</item>
        <item>* ELSE.</item>
        <item>* DELETE FROM zpp_pdm_mon_bom WHERE datum = ls_data_bom-datum</item>
        <item>* AND uzeit = ls_data_bom-uzeit</item>
        <item>* AND tipofile = ls_data_bom-tipofi</item>
        <item>* AND counter = ls_data_bom-counte</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP. &quot; LOOP AT lt_data_bom_db INTO ls_data_bom.</item>
        <item>*</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* ENDIF.</item>
        <item>* DELETE gt_data_bom WHERE del = abap_true.</item>
        <item>*</item>
        <item>* DATA: ls_tree_hier TYPE ty_s_tree_hier,</item>
        <item>* ls_tree_hier_new TYPE ty_s_tree_hier,</item>
        <item>* ls_tree_data TYPE ty_s_tree_data.</item>
        <item>*</item>
        <item>* BREAK kosmedev.</item>
        <item>*</item>
        <item>* &quot;Modifica albero</item>
        <item>* LOOP AT gt_data_bom INTO ls_data_bom.</item>
        <item>* CASE ls_data_bom-azione.</item>
        <item>* WHEN &apos;I&apos;.</item>
        <item>*</item>
        <item>* WHEN &apos;D&apos; OR &apos;U&apos;.</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY parent</item>
        <item>* node</item>
        <item>* relstartda</item>
        <item>* counter</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data INTO ls_tree_data WITH KEY ref = ls</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* lv_tabix = sy-tabix.</item>
        <item>* ls_tree_data-menge = ls_data_bom-relqty.</item>
        <item>* ls_tree_data-menge_old = ls_data_bom-relqty_old.</item>
        <item>* ls_tree_data-azione = ls_data_bom-azione.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom-mod_succ.</item>
        <item>* ls_tree_data-elaborato = ls_data_bom-elaborato.</item>
        <item>*</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ENDCASE.</item>
        <item>*</item>
        <item>* CLEAR: lv_ref.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref.</item>
        <item>*</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY parent =</item>
        <item>* node =</item>
        <item>* relstartdate =</item>
        <item>* counter =</item>
        <item>* IF ( sy-subrc = 0 ). &quot; READ TABLE gt_tree_hier INTO ls_tree_hie</item>
        <item>** Posso trovare i componenti di primo livello</item>
        <item>*</item>
        <item>** Gestione dell&apos;OPNAME nell&apos;Albero BOM</item>
        <item>* READ TABLE gt_tree_data INTO ls_tree_data WITH KEY ref = ls_tre</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* lv_tabix = sy-tabix.</item>
        <item>* READ TABLE gt_data_anag INTO DATA(ls_data_anag) WITH KEY datu</item>
        <item>* uzei</item>
        <item>* root</item>
        <item>** coden</item>
        <item>* code</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR</item>
        <item>* ( ls_tree_data-mod_succ = &apos;D&apos; AND ls_tree_data-azione</item>
        <item>* ls_tree_data-opname = ls_data_anag-opname. &quot;&lt;------</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>********** START *******************************************************</item>
        <item>**DP-09_11_2016 Inizio dddddddddddddddddddddddddddd</item>
        <item>* ELSE.</item>
        <item>** Non sono sui primi livelli e non trovo record in Tabella ZP</item>
        <item>* IF ls_tree_hier-ref EQ lv_ref.</item>
        <item>*</item>
        <item>* &quot; elaboro childname con pi√π parentname</item>
        <item>* IF ls_data_bom-parentname NE ls_data_bom-rootname.</item>
        <item>*</item>
        <item>**+++++++ 1 START +++++++++++++++++++++++++++++++++++++++++++++++++++++</item>
        <item>* LOOP AT gt_tree_hier INTO DATA(ls_tree_hier1)</item>
        <item>* WHERE node EQ ls_data_bom-p</item>
        <item>* AND relstartdate EQ ls_data_bom-r</item>
        <item>*</item>
        <item>* CLEAR: lv_ref.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref.</item>
        <item>* ADD 1 TO lv_ref .</item>
        <item>*</item>
        <item>* CLEAR: lv_ref1.</item>
        <item>* lv_ref1 = ls_tree_hier1-ref + 1.</item>
        <item>*</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier15)</item>
        <item>* WITH KEY node = ls_tree_h</item>
        <item>* parent = ls_tree_h</item>
        <item>* ref = lv_ref1</item>
        <item>* relstartdate = ls_data_b</item>
        <item>* IF sy-subrc NE 0.</item>
        <item>* &quot; aggiunge nuovo nodo</item>
        <item>* CLEAR: ls_tree_hier_new.</item>
        <item>* ls_tree_hier_new-node = ls_data_bom-childna</item>
        <item>* ls_tree_hier_new-parent = ls_data_bom-parentn</item>
        <item>* ls_tree_hier_new-relstartdate = ls_data_bom-relstar</item>
        <item>* ls_tree_hier_new-counter = ls_data_bom-counter</item>
        <item>* ls_tree_hier_new-ref = lv_ref.</item>
        <item>* ls_tree_hier_new-level = ls_tree_hier-level</item>
        <item>* APPEND ls_tree_hier_new TO gt_tree_hier. &quot;&lt;------</item>
        <item>*</item>
        <item>* CLEAR: ls_tree_data.</item>
        <item>* ls_tree_data-matnr = ls_data_bom-childna</item>
        <item>* ls_tree_data-relstartdate = ls_data_bom-relstar</item>
        <item>* ls_tree_data-relenddate = ls_data_bom-relendd</item>
        <item>* ls_tree_data-elaborato = ls_data_bom-elabora</item>
        <item>* ls_tree_data-counter = ls_data_bom-counter</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_</item>
        <item>* ls_tree_data-menge = ls_data_bom-relqty.</item>
        <item>* ls_tree_data-ref = lv_ref.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom-mod_suc</item>
        <item>* ls_tree_data-azione = ls_data_bom-azione.</item>
        <item>* IF ( ls_tree_data-azione = space ).</item>
        <item>* ls_tree_data-azione = &apos;I&apos;.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom-relqty.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_16)</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_16</item>
        <item>* WITH KEY node = l</item>
        <item>* relstartdate = l</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( NOT ls_tree_hier_16-parent IS INITIAL ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_</item>
        <item>* WITH KEY parentname</item>
        <item>* childname</item>
        <item>* relstartdate</item>
        <item>* counter</item>
        <item>* del</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom_13-relqty</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* READ TABLE gt_data_anag INTO ls_data_anag WITH KEY</item>
        <item>*</item>
        <item>*</item>
        <item>*</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR</item>
        <item>* ( ls_tree_data-mod_succ = &apos;D&apos; AND ls_tree_da</item>
        <item>* ls_tree_data-opname = ls_data_anag-opname.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* APPEND ls_tree_data TO gt_tree_data. &quot;&lt;------</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ENDLOOP. &quot;LOOP AT gt_tree_hier INTO DATA(ls_tree_hier</item>
        <item>*</item>
        <item>* CLEAR: lv_ref.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref.</item>
        <item>* ADD 1 TO lv_ref .</item>
        <item>*</item>
        <item>* CLEAR: lv_ref2.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref2.</item>
        <item>* CLEAR ls_tree_hier.</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier INDEX lv_ref2</item>
        <item>*</item>
        <item>* &quot; Cerco i figli</item>
        <item>* LOOP AT gt_data_bom INTO DATA(ls_data_bom2)</item>
        <item>* WHERE rootname EQ ls_data_bom-ro</item>
        <item>* AND parentname EQ ls_tree_hier-n</item>
        <item>* AND relstartdate EQ ls_tree_hier-r</item>
        <item>*</item>
        <item>* CLEAR: lv_ref1.</item>
        <item>* lv_ref1 = ls_tree_hier-ref + 1.</item>
        <item>*</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier5)</item>
        <item>* WITH KEY node = ls_data_b</item>
        <item>* parent = ls_data_b</item>
        <item>* ref = lv_ref1</item>
        <item>* relstartdate = ls_data_b</item>
        <item>* IF sy-subrc NE 0.</item>
        <item>* &quot; aggiunge nuovo nodo</item>
        <item>* CLEAR: ls_tree_hier_new.</item>
        <item>* ls_tree_hier_new-node = ls_data_bom2-childn</item>
        <item>* ls_tree_hier_new-parent = ls_data_bom2-parent</item>
        <item>* ls_tree_hier_new-relstartdate = ls_data_bom2-relsta</item>
        <item>* ls_tree_hier_new-counter = ls_tree_hier-counte</item>
        <item>* ls_tree_hier_new-ref = lv_ref.</item>
        <item>* ls_tree_hier_new-level = ls_tree_hier-level</item>
        <item>* APPEND ls_tree_hier_new TO gt_tree_hier. &quot;&lt;------</item>
        <item>*</item>
        <item>* CLEAR: ls_tree_data.</item>
        <item>* ls_tree_data-matnr = ls_data_bom2-childn</item>
        <item>* ls_tree_data-relstartdate = ls_data_bom2-relsta</item>
        <item>* ls_tree_data-relenddate = ls_data_bom2-relend</item>
        <item>* ls_tree_data-elaborato = ls_data_bom2-elabor</item>
        <item>* ls_tree_data-counter = ls_tree_hier-counte</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_</item>
        <item>* ls_tree_data-menge = ls_data_bom2-relqty</item>
        <item>* ls_tree_data-ref = lv_ref.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom2-mod_su</item>
        <item>* ls_tree_data-azione = ls_data_bom2-azione</item>
        <item>* IF ( ls_tree_data-azione = space ).</item>
        <item>* ls_tree_data-azione = &apos;I&apos;.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom2-relqty.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_4) W</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_4 WITH</item>
        <item>*</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( NOT ls_tree_hier_4-parent IS INITIAL ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_</item>
        <item>*</item>
        <item>*</item>
        <item>*</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom_12-relqty</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* READ TABLE gt_data_anag INTO ls_data_anag WITH KEY</item>
        <item>*</item>
        <item>*</item>
        <item>*</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR</item>
        <item>* ( ls_tree_data-mod_succ = &apos;D&apos; AND ls_tree_da</item>
        <item>* ls_tree_data-opname = ls_data_anag-opname.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* APPEND ls_tree_data TO gt_tree_data. &quot;&lt;------</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ENDLOOP. &quot;LOOP AT gt_data_bom INTO DATA(ls_data_bom2)</item>
        <item>**+++++++ 1 END +++++++++++++++++++++++++++++++++++++++++++++++++++++++</item>
        <item>*</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>**DP-09_11_2016 Fine dddddddddddddddddddddddddddd</item>
        <item>********** END *********************************************************</item>
        <item>*</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ELSE. &quot;IF ( sy-subrc = 0 ). &quot; READ TABLE gt_tree_hier INTO ls</item>
        <item>*</item>
        <item>* CLEAR: lv_ref.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref.</item>
        <item>* ADD 1 TO lv_ref .</item>
        <item>*</item>
        <item>********** START *******************************************************</item>
        <item>**DP-09_11_2016 Inizio</item>
        <item>* &quot;Elaboro childname con pi√π parentname</item>
        <item>* IF ls_data_bom-parentname NE ls_data_bom-rootname.</item>
        <item>*</item>
        <item>**+++++++ 2 START +++++++++++++++++++++++++++++++++++++++++++++++++++++</item>
        <item>* LOOP AT gt_tree_hier INTO ls_tree_hier</item>
        <item>* WHERE node EQ ls_data_bom-parentn</item>
        <item>* AND relstartdate EQ ls_data_bom-relstar</item>
        <item>*</item>
        <item>* CLEAR: lv_ref.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref.</item>
        <item>* ADD 1 TO lv_ref .</item>
        <item>*</item>
        <item>* CLEAR: lv_ref1.</item>
        <item>* lv_ref1 = ls_tree_hier-ref + 1.</item>
        <item>*</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier3)</item>
        <item>* WITH KEY node = ls_tree_hier-no</item>
        <item>* parent = ls_tree_hier-pa</item>
        <item>* ref = lv_ref1</item>
        <item>* relstartdate = ls_data_bom-rel</item>
        <item>* IF sy-subrc NE 0.</item>
        <item>* &quot; aggiunge nuovo nodo</item>
        <item>* CLEAR: ls_tree_hier_new.</item>
        <item>* ls_tree_hier_new-node = ls_data_bom-childname.</item>
        <item>* ls_tree_hier_new-parent = ls_data_bom-parentname.</item>
        <item>* ls_tree_hier_new-relstartdate = ls_data_bom-relstartdate.</item>
        <item>* ls_tree_hier_new-counter = ls_data_bom-counter.</item>
        <item>* ls_tree_hier_new-ref = lv_ref.</item>
        <item>* ls_tree_hier_new-level = ls_tree_hier-level + 1.</item>
        <item>* APPEND ls_tree_hier_new TO gt_tree_hier.</item>
        <item>*</item>
        <item>* CLEAR: ls_tree_data.</item>
        <item>* ls_tree_data-matnr = ls_data_bom-childname.</item>
        <item>* ls_tree_data-relstartdate = ls_data_bom-relstartdate.</item>
        <item>* ls_tree_data-relenddate = ls_data_bom-relenddate.</item>
        <item>* ls_tree_data-elaborato = ls_data_bom-elaborato.</item>
        <item>* ls_tree_data-counter = ls_data_bom-counter.</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data )</item>
        <item>* ls_tree_data-menge = ls_data_bom-relqty.</item>
        <item>* ls_tree_data-ref = lv_ref.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom-mod_succ.</item>
        <item>* ls_tree_data-azione = ls_data_bom-azione.</item>
        <item>* IF ( ls_tree_data-azione = space ).</item>
        <item>* ls_tree_data-azione = &apos;I&apos;.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom-relqty.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_3) WITH KE</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_3</item>
        <item>* WITH KEY node = ls_tree</item>
        <item>* relstartdate = ls_tree</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( NOT ls_tree_hier_3-parent IS INITIAL ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_11)</item>
        <item>* WITH KEY parentname = ls_t</item>
        <item>* childname = ls_t</item>
        <item>* relstartdate = ls_t</item>
        <item>* counter = ls_t</item>
        <item>* del = abap</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom_11-relqty * ls_</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* READ TABLE gt_data_anag INTO ls_data_anag WITH KEY datum</item>
        <item>* uzeit</item>
        <item>* rootna</item>
        <item>* codena</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR</item>
        <item>* ( ls_tree_data-mod_succ = &apos;D&apos; AND ls_tree_data-azi</item>
        <item>* ls_tree_data-opname = ls_data_anag-opname.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* APPEND ls_tree_data TO gt_tree_data.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ENDLOOP. &quot;LOOP AT gt_tree_hier INTO ls_tree_hier</item>
        <item>*</item>
        <item>* CLEAR: lv_ref.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref.</item>
        <item>* ADD 1 TO lv_ref .</item>
        <item>*</item>
        <item>* CLEAR: lv_ref2.</item>
        <item>* DESCRIBE TABLE gt_tree_hier LINES lv_ref2.</item>
        <item>* CLEAR ls_tree_hier.</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier INDEX lv_ref2.</item>
        <item>*</item>
        <item>* &quot; Cerco i figli</item>
        <item>* LOOP AT gt_data_bom INTO ls_data_bom1 &quot;Cerco i figli</item>
        <item>* WHERE rootname EQ ls_data_bom-rootname</item>
        <item>* AND parentname EQ ls_tree_hier-node</item>
        <item>* AND relstartdate EQ ls_tree_hier-relstar</item>
        <item>*</item>
        <item>* CLEAR: lv_ref1.</item>
        <item>* lv_ref1 = ls_tree_hier-ref + 1.</item>
        <item>*</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier4)</item>
        <item>* WITH KEY node = ls_data_bom1-ch</item>
        <item>* parent = ls_data_bom1-pa</item>
        <item>* ref = lv_ref1</item>
        <item>* relstartdate = ls_data_bom1-re</item>
        <item>* IF sy-subrc NE 0.</item>
        <item>* &quot; aggiunge nuovo nodo</item>
        <item>* CLEAR: ls_tree_hier_new.</item>
        <item>* ls_tree_hier_new-node = ls_data_bom1-childname.</item>
        <item>* ls_tree_hier_new-parent = ls_data_bom1-parentname.</item>
        <item>* ls_tree_hier_new-relstartdate = ls_data_bom1-relstartdate</item>
        <item>* ls_tree_hier_new-counter = ls_data_bom1-counter.</item>
        <item>* ls_tree_hier_new-ref = lv_ref.</item>
        <item>* ls_tree_hier_new-level = ls_tree_hier-level + 1.</item>
        <item>* APPEND ls_tree_hier_new TO gt_tree_hier.</item>
        <item>*</item>
        <item>* CLEAR: ls_tree_data.</item>
        <item>* ls_tree_data-matnr = ls_data_bom1-childname.</item>
        <item>* ls_tree_data-relstartdate = ls_data_bom1-relstartdate</item>
        <item>* ls_tree_data-relenddate = ls_data_bom1-relenddate.</item>
        <item>* ls_tree_data-elaborato = ls_data_bom1-elaborato.</item>
        <item>* ls_tree_data-counter = ls_data_bom1-counter.</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data )</item>
        <item>* ls_tree_data-menge = ls_data_bom1-relqty.</item>
        <item>* ls_tree_data-ref = lv_ref.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom1-mod_succ.</item>
        <item>* ls_tree_data-azione = ls_data_bom1-azione.</item>
        <item>* IF ( ls_tree_data-azione = space ).</item>
        <item>* ls_tree_data-azione = &apos;I&apos;.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom1-relqty.</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_4 WITH KEY ref</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_4 WITH KEY no</item>
        <item>* re</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( NOT ls_tree_hier_4-parent IS INITIAL ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_14) WI</item>
        <item>*</item>
        <item>*</item>
        <item>*</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom_14-relqty * ls_</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* READ TABLE gt_data_anag INTO ls_data_anag WITH KEY datum</item>
        <item>* uzeit</item>
        <item>* rootna</item>
        <item>* codena</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR</item>
        <item>* ( ls_tree_data-mod_succ = &apos;D&apos; AND ls_tree_data-azi</item>
        <item>* ls_tree_data-opname = ls_data_anag-opname.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* APPEND ls_tree_data TO gt_tree_data.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ENDLOOP. &quot;LOOP AT gt_data_bom INTO ls_data_bom1 &quot;Cerco i</item>
        <item>**+++++++ 2 END +++++++++++++++++++++++++++++++++++++++++++++++++++++++</item>
        <item>*</item>
        <item>* ELSE. &quot;IF ls_data_bom-parentname NE ls_data_bom-rootname.</item>
        <item>*</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier11)</item>
        <item>* WITH KEY node = ls_data_bom-parentn</item>
        <item>* relstartdate = ls_data_bom-relstar</item>
        <item>* IF sy-subrc EQ 0.</item>
        <item>* ls_tree_hier = ls_tree_hier11.</item>
        <item>* ENDIF.</item>
        <item>**DP-09_11_2016 Fine</item>
        <item>********** END *********************************************************</item>
        <item>*</item>
        <item>* &quot; aggiunge nuovo nodo</item>
        <item>* CLEAR: ls_tree_hier_new.</item>
        <item>* ls_tree_hier_new-node = ls_data_bom-childname.</item>
        <item>* ls_tree_hier_new-parent = ls_data_bom-parentname.</item>
        <item>* ls_tree_hier_new-relstartdate = ls_data_bom-relstartdate.</item>
        <item>* ls_tree_hier_new-counter = ls_data_bom-counter.</item>
        <item>* ls_tree_hier_new-ref = lv_ref.</item>
        <item>* ls_tree_hier_new-level = ls_tree_hier-level + 1.</item>
        <item>* APPEND ls_tree_hier_new TO gt_tree_hier.</item>
        <item>*</item>
        <item>* CLEAR: ls_tree_data.</item>
        <item>* ls_tree_data-matnr = ls_data_bom-childname.</item>
        <item>* ls_tree_data-relstartdate = ls_data_bom-relstartdate.</item>
        <item>* ls_tree_data-relenddate = ls_data_bom-relenddate.</item>
        <item>* ls_tree_data-elaborato = ls_data_bom-elaborato.</item>
        <item>* ls_tree_data-counter = ls_data_bom-counter.</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item>* ls_tree_data-menge = ls_data_bom-relqty.</item>
        <item>* ls_tree_data-ref = lv_ref.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom-mod_succ.</item>
        <item>* ls_tree_data-azione = ls_data_bom-azione.</item>
        <item>* IF ( ls_tree_data-azione = space ).</item>
        <item>* ls_tree_data-azione = &apos;I&apos;.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom-relqty.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_2)</item>
        <item>* WITH KEY ref = ls_tree_data-ref.</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_2</item>
        <item>* WITH KEY node = ls_tree_hier_2-par</item>
        <item>* relstartdate = ls_tree_hi</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_10)</item>
        <item>* WITH KEY parentname = ls_tree_</item>
        <item>* childname = ls_tree_</item>
        <item>* relstartdate = ls_tree_</item>
        <item>* counter = ls_tree_</item>
        <item>* del = abap_fal</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom_10-relqty * ls_data</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* READ TABLE gt_data_anag INTO ls_data_anag WITH KEY datum</item>
        <item>* uzeit</item>
        <item>* rootname</item>
        <item>** codename =</item>
        <item>* codename</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR</item>
        <item>* ( ls_tree_data-mod_succ = &apos;D&apos; AND ls_tree_data-azione</item>
        <item>* ls_tree_data-opname = ls_data_anag-opname.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* APPEND ls_tree_data TO gt_tree_data.</item>
        <item>*</item>
        <item>* ENDIF. &quot;DP-09_11_2016 Ins &quot;IF ls_data_bom-parentname NE ls_d</item>
        <item>*</item>
        <item>* ENDIF. &quot;IF ( sy-subrc = 0 ). &quot; READ TABLE gt_tree_hier INTO l</item>
        <item>*</item>
        <item>* ENDLOOP. &quot;LOOP AT gt_data_bom INTO ls_data_bom.</item>
        <item>*</item>
        <item>* &quot;BREAK kosmedev.</item>
        <item>*</item>
        <item>* &quot;Elimina rami albero non pi√π referenziati.</item>
        <item>* LOOP AT gt_tree_hier INTO DATA(ls_hier) WHERE parent IS NOT INITIAL</item>
        <item>* DATA(lv_tabix_hier) = sy-tabix.</item>
        <item>* READ TABLE gt_data_bom WITH KEY parentname = ls_hier-parent</item>
        <item>* childname = ls_hier-node</item>
        <item>* relstartdate = ls_hier-relstartda</item>
        <item>* TRANSPORTING NO FIELDS.</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_data) WITH KEY ref = ls_hi</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix_data) = sy-tabix.</item>
        <item>* DELETE gt_tree_hier INDEX lv_tabix_hier.</item>
        <item>* DELETE gt_tree_data INDEX lv_tabix_data.</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP. &quot;LOOP AT gt_tree_hier INTO DATA(ls_hier) WHERE parent IS</item>
        <item>*</item>
        <item> ENDMETHOD. &quot;METHOD search_changes_new.</item>
      </SEARCH_CHANGES_NEW>
      <SELECT_BRANCH>
        <item> METHOD select_branch.</item>
        <item> DATA: ls_tree_data_sel TYPE ty_s_tree_data_sel,</item>
        <item> lv_lev TYPE zpp_albero-lev.</item>
        <item/>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY ref = is_tree_dat</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> lv_lev = ls_albero-lev.</item>
        <item> DO.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero_2) INDEX lv_tabix + 1.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_albero_2-lev &lt;= lv_lev OR ls_albero_2-lev &gt; iv_level</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> APPEND ls_tree_data_sel TO ct_tree_data_sel. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ADD 1 TO lv_tabix.</item>
        <item> ENDDO.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SELECT_BRANCH>
      <SELECT_BRANCH_ROOT>
        <item> METHOD select_branch_root.</item>
        <item> DATA: ls_tree_data_sel TYPE ty_s_tree_data_sel.</item>
        <item> LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent = is_tree_</item>
        <item> &quot; verifica che il nodo sia un ramo</item>
        <item> READ TABLE gt_tree_hier WITH KEY parent = ls_tree_hier-node TRANSP</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref =</item>
        <item> disgr =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = ls_tree_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO ct_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier WITH KEY parent = ls_tree_hier-node TR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> select_branch_root( EXPORTING is_tree_data = ls_tree_data</item>
        <item> iv_disgr = iv_disgr</item>
        <item> iv_beskz = iv_beskz</item>
        <item> iv_itsob = iv_itsob</item>
        <item> CHANGING ct_tree_data_sel = ct_tree_data</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </SELECT_BRANCH_ROOT>
      <SET_ALV_DATA_NEW>
        <item> METHOD set_alv_data_new.</item>
        <item> DATA: ls_alv_data TYPE ty_s_alv_data.</item>
        <item> DATA: wa_prps TYPE prps,</item>
        <item> lv_ps_psp_pnr TYPE ps_psp_pnr,</item>
        <item> lv_posid TYPE ps_posid,</item>
        <item> lv_psphi TYPE prps-psphi,</item>
        <item> lv_vbeln TYPE vbeln,</item>
        <item> lv_posnr TYPE posnr,</item>
        <item> lv_c_posnr TYPE c LENGTH 6,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname,</item>
        <item> lv_fixmg TYPE vbap-fixmg.</item>
        <item> DATA: wa_vbak TYPE vbak.</item>
        <item/>
        <item> REFRESH: ct_alv_data.</item>
        <item> CLEAR: ct_alv_data.</item>
        <item> FREE: ct_alv_data.</item>
        <item/>
        <item> CLEAR: lv_rootname.</item>
        <item>* LOOP AT gt_data_bom INTO DATA(ls_data_bom).</item>
        <item/>
        <item> LOOP AT gt_data_anag INTO DATA(ls_data_anag).</item>
        <item>* IF ( ls_data_anag-rootname = ls_data_anag-codename ).</item>
        <item> IF ( lv_rootname &lt;&gt; ls_data_anag-rootname ).</item>
        <item>* IF ( ls_data_bom-rootname = ls_data_bom-parentname ).</item>
        <item>* READ TABLE ct_alv_data WITH KEY rootname = ls_data_bom-rootname T</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> CLEAR ls_alv_data.</item>
        <item>* MOVE-CORRESPONDING ls_data_bom TO ls_alv_data.</item>
        <item> MOVE-CORRESPONDING ls_data_anag TO ls_alv_data.</item>
        <item> SELECT SINGLE ddtext INTO ls_alv_data-ddtext FROM dd07t WHERE dd</item>
        <item> AND as</item>
        <item> AND va</item>
        <item> AND as</item>
        <item> SELECT SINGLE maktx INTO ls_alv_data-maktx FROM makt WHERE matnr</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_alv_data FROM ma</item>
        <item/>
        <item> CLEAR: lv_vbeln, lv_posnr, lv_ps_psp_pnr, lv_posid, lv_psphi, lv</item>
        <item>* Estrazione dell&apos;ultimo OdV/Pos e WBS</item>
        <item> SELECT vbeln posnr ps_psp_pnr fixmg INTO (lv_vbeln, lv_posnr, lv</item>
        <item> FROM vbap</item>
        <item> WHERE matnr = ls_alv_data-rootname</item>
        <item> ORDER BY erdat DESCENDING.</item>
        <item> SELECT SINGLE * FROM vbak INTO wa_vbak WHERE vbeln = lv_vbeln</item>
        <item> vbtyp = &apos;C&apos;.</item>
        <item> IF sy-subrc = 0.</item>
        <item> zcl_bc_conversion_exit=&gt;conversion_output( EXPORTING iv_fiel</item>
        <item> CHANGING cv_field</item>
        <item> EXIT. EXIT. &quot;------&gt; USCITA SELECT</item>
        <item> ENDIF.</item>
        <item> ENDSELECT.</item>
        <item>* inizio modifiche S.B. eliminazione lettura da tabella Z DEVE esistere</item>
        <item>* IF ( lv_ps_psp_pnr IS INITIAL OR lv_vbeln IS INITIAL ).</item>
        <item>* CLEAR lv_posid.</item>
        <item>* SELECT posid vbeln posnr INTO (lv_posid, lv_vbeln, lv_posnr)</item>
        <item>* WHERE matnr = ls_alv_data-rootname ORDER BY audat DESC</item>
        <item>* zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_fiel</item>
        <item>* CHANGING cv_fiel</item>
        <item>* EXIT.</item>
        <item>* ENDSELECT.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* IF ( lv_vbeln IS INITIAL OR ( lv_fixmg &lt;&gt; &apos;A&apos; AND lv_fixmg &lt;&gt; &apos;</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> ls_alv_data-posnr = lv_posnr.</item>
        <item> ls_alv_data-vbeln = lv_vbeln.</item>
        <item> ls_alv_data-posid = lv_posid.</item>
        <item/>
        <item> SELECT SINGLE psphi post1 INTO (ls_alv_data-psphi, ls_alv_data-p</item>
        <item/>
        <item> zcl_pp_pdm_monitor_sec=&gt;change_alv_data( CHANGING cs_alv_data =</item>
        <item/>
        <item> COLLECT ls_alv_data INTO ct_alv_data. &quot;&lt;------</item>
        <item/>
        <item> gv_pspnr = lv_ps_psp_pnr.</item>
        <item>* APPEND ls_alv_data TO ct_alv_data.</item>
        <item/>
        <item>* ENDIF.</item>
        <item>* get_data_bom( iv_tipofile = ls_alv_data-tipofile</item>
        <item>* iv_rootname = ls_alv_data-rootname ).</item>
        <item> ENDIF. &quot;IF ( lv_rootname &lt;&gt; ls_data_anag-rootname ).</item>
        <item> lv_rootname = ls_data_anag-rootname.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_data_anag INTO DATA(ls_data_anag).</item>
        <item/>
        <item>* LOOP AT ct_alv_data INTO ls_alv_data.</item>
        <item>* LOOP AT ct_alv_data TO sy-tabix - 1</item>
        <item>* INTO DATA(ls_alv_data_tmp)</item>
        <item>* where rootname = ls_alv_data-rootname.</item>
        <item>* DELETE ct_alv_data INDEX sy-tabix.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDLOOP.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item>* Tonolli_G - 09.01.2017 - Start Ins</item>
        <item>* Gestione ROOTNAME completato: nel caso il ROOTNAME abbia il relativo O</item>
        <item> DATA: lv_aufnr TYPE afpo-aufnr,</item>
        <item> lv_psmng TYPE afpo-psmng.</item>
        <item> DATA: lv_qta_101 TYPE menge_d,</item>
        <item> lv_qta_102 TYPE menge_d.</item>
        <item> LOOP AT ct_alv_data INTO ls_alv_data.</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item/>
        <item> CLEAR: lv_aufnr, lv_psmng, lv_qta_101, lv_qta_102.</item>
        <item/>
        <item> zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = ls_</item>
        <item> CHANGING cv_field = lv_</item>
        <item/>
        <item>* Estrazione dell&apos;ultimo OdP a WBS sul ROOTNAME</item>
        <item> SELECT afpo~aufnr afpo~psmng INTO (lv_aufnr, lv_psmng)</item>
        <item> FROM afpo INNER JOIN afko ON afko~aufnr = afpo~aufnr</item>
        <item> BYPASSING BUFFER</item>
        <item> WHERE afpo~matnr = ls_alv_data-rootname</item>
        <item> AND afpo~projn = lv_ps_psp_pnr &quot;WBS</item>
        <item> AND afpo~dauat &lt;&gt; &apos;ZP90&apos; &quot;Escludere gli OdP Fittizi</item>
        <item> &quot;AND dnrel = space &quot;Codice: posizione ordine n</item>
        <item> ORDER BY afko~aufnr DESCENDING.</item>
        <item> EXIT.</item>
        <item> ENDSELECT.</item>
        <item/>
        <item> IF sy-subrc = 0 AND lv_aufnr IS NOT INITIAL.</item>
        <item> SELECT SUM( menge ) INTO lv_qta_101 FROM aufm WHERE aufnr = lv_a</item>
        <item> AND werks = &apos;630</item>
        <item> AND bwart = &apos;101</item>
        <item> SELECT SUM( menge ) INTO lv_qta_102 FROM aufm WHERE aufnr = lv_a</item>
        <item> AND werks = &apos;630</item>
        <item> AND bwart = &apos;102</item>
        <item>* Pu√≤ esserci l&apos;eccezione che l&apos;utente prima chiede 2 PZ poi dopo</item>
        <item>* In questo caso avr√≤ : l&apos;OdV/Pos revocato con consegnato 1 e qt√†</item>
        <item>* Queste eccezioni devono essere gestite manualmente, via query</item>
        <item> IF ( ( lv_qta_101 - lv_qta_102 ) &gt;= lv_psmng ).</item>
        <item>* L&apos;OdP a WBS sul ROOTAME √® stato tutto versato. Archiviazione</item>
        <item> DATA: tb_zpp_pdm_mon_anag TYPE TABLE OF zpp_pdm_mon_anag.</item>
        <item> DATA: tb_zpp_pdm_mon_anah TYPE TABLE OF zpp_pdm_mon_anah.</item>
        <item> DATA: tb_zpp_pdm_mon_bom TYPE TABLE OF zpp_pdm_mon_bom.</item>
        <item> DATA: tb_zpp_pdm_mon_bomh TYPE TABLE OF zpp_pdm_mon_bomh.</item>
        <item> DATA: tb_zpp_albero TYPE TABLE OF zpp_albero.</item>
        <item> DATA: tb_zpp_alberoh TYPE TABLE OF zpp_alberoh.</item>
        <item> DATA: lv_zpp_pdm_mon_anag TYPE zpp_pdm_mon_anag.</item>
        <item> DATA: lv_zpp_pdm_mon_anah TYPE zpp_pdm_mon_anah.</item>
        <item> DATA: lv_zpp_pdm_mon_bom TYPE zpp_pdm_mon_bom.</item>
        <item> DATA: lv_zpp_pdm_mon_bomh TYPE zpp_pdm_mon_bomh.</item>
        <item> DATA: lv_zpp_albero TYPE zpp_albero.</item>
        <item> DATA: lv_zpp_alberoh TYPE zpp_alberoh.</item>
        <item> DATA: lv_anah_counterh TYPE zpp_pdm_mon_anah-counterh.</item>
        <item> DATA: lv_bomh_counterh TYPE zpp_pdm_mon_bomh-counterh.</item>
        <item> DATA: lv_albeh_counterh TYPE zpp_alberoh-counterh.</item>
        <item> REFRESH: tb_zpp_pdm_mon_anag, tb_zpp_pdm_mon_anah, tb_zpp_albe</item>
        <item/>
        <item>************************************************************************</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE tb_zpp_pdm_mon_ana</item>
        <item> FROM zpp_pdm_mon_anag</item>
        <item> WHERE rootname = ls_alv_data-rootname.</item>
        <item/>
        <item>* Estrazione del progressivo</item>
        <item> SELECT MAX( counterh ) INTO lv_anah_counterh</item>
        <item> FROM zpp_pdm_mon_anah</item>
        <item> WHERE rootname = ls_alv_data-rootname.</item>
        <item/>
        <item> lv_anah_counterh = lv_anah_counterh + 1.</item>
        <item>************************************************************************</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE tb_zpp_pdm_mon_bom</item>
        <item> FROM zpp_pdm_mon_bom</item>
        <item> WHERE rootname = ls_alv_data-rootname.</item>
        <item/>
        <item>* Estrazione del progressivo</item>
        <item> SELECT MAX( counterh ) INTO lv_bomh_counterh</item>
        <item> FROM zpp_pdm_mon_bomh</item>
        <item> WHERE rootname = ls_alv_data-rootname.</item>
        <item/>
        <item> lv_bomh_counterh = lv_bomh_counterh + 1.</item>
        <item>************************************************************************</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE tb_zpp_albero</item>
        <item> FROM zpp_albero</item>
        <item> WHERE rootname = ls_alv_data-rootname.</item>
        <item/>
        <item>* Estrazione del progressivo</item>
        <item> SELECT MAX( counterh ) INTO lv_albeh_counterh</item>
        <item> FROM zpp_alberoh</item>
        <item> WHERE rootname = ls_alv_data-rootname.</item>
        <item/>
        <item> lv_albeh_counterh = lv_albeh_counterh + 1.</item>
        <item>************************************************************************</item>
        <item> LOOP AT tb_zpp_pdm_mon_anag INTO lv_zpp_pdm_mon_anag.</item>
        <item> MOVE-CORRESPONDING lv_zpp_pdm_mon_anag TO lv_zpp_pdm_mon_ana</item>
        <item> lv_zpp_pdm_mon_anah-counterh = lv_anah_counterh.</item>
        <item> APPEND lv_zpp_pdm_mon_anah TO tb_zpp_pdm_mon_anah.</item>
        <item> ENDLOOP.</item>
        <item>************************************************************************</item>
        <item> LOOP AT tb_zpp_pdm_mon_bom INTO lv_zpp_pdm_mon_bom.</item>
        <item> MOVE-CORRESPONDING lv_zpp_pdm_mon_bom TO lv_zpp_pdm_mon_bomh</item>
        <item> lv_zpp_pdm_mon_bomh-counterh = lv_bomh_counterh.</item>
        <item> APPEND lv_zpp_pdm_mon_bomh TO tb_zpp_pdm_mon_bomh.</item>
        <item> ENDLOOP.</item>
        <item>************************************************************************</item>
        <item> LOOP AT tb_zpp_albero INTO lv_zpp_albero.</item>
        <item> MOVE-CORRESPONDING lv_zpp_albero TO lv_zpp_alberoh.</item>
        <item> lv_zpp_alberoh-counterh = lv_albeh_counterh.</item>
        <item> APPEND lv_zpp_alberoh TO tb_zpp_alberoh.</item>
        <item> ENDLOOP.</item>
        <item>************************************************************************</item>
        <item> DATA: l_tfill1 LIKE sy-tfill.</item>
        <item> DATA: l_tfill2 LIKE sy-tfill.</item>
        <item> DATA: l_tfill3 LIKE sy-tfill.</item>
        <item> DESCRIBE TABLE tb_zpp_pdm_mon_anag LINES l_tfill1.</item>
        <item> DESCRIBE TABLE tb_zpp_albero LINES l_tfill2.</item>
        <item> DESCRIBE TABLE tb_zpp_pdm_mon_bom LINES l_tfill3.</item>
        <item> MODIFY zpp_pdm_mon_anah FROM TABLE tb_zpp_pdm_mon_anah.</item>
        <item> IF sy-dbcnt &lt;&gt; l_tfill1.</item>
        <item> ROLLBACK WORK.</item>
        <item> ELSE.</item>
        <item>* Procedo solo se i record inseriti sono uguali a quelli da ca</item>
        <item> DELETE FROM zpp_pdm_mon_anag WHERE rootname = ls_alv_data-ro</item>
        <item> IF sy-dbcnt &lt;&gt; l_tfill1.</item>
        <item> ROLLBACK WORK.</item>
        <item> ELSE.</item>
        <item> MODIFY zpp_pdm_mon_bomh FROM TABLE tb_zpp_pdm_mon_bomh.</item>
        <item> IF sy-dbcnt &lt;&gt; l_tfill3.</item>
        <item> ROLLBACK WORK.</item>
        <item> ELSE.</item>
        <item>* Procedo solo se i record inseriti sono uguali a quelli d</item>
        <item> DELETE FROM zpp_pdm_mon_bom WHERE rootname = ls_alv_data</item>
        <item> IF sy-dbcnt &lt;&gt; l_tfill3.</item>
        <item> ROLLBACK WORK.</item>
        <item> ELSE.</item>
        <item> MODIFY zpp_alberoh FROM TABLE tb_zpp_alberoh.</item>
        <item> IF sy-dbcnt &lt;&gt; l_tfill2.</item>
        <item> ROLLBACK WORK.</item>
        <item> ELSE.</item>
        <item>* Procedo solo se i record inseriti sono uguali a quel</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_alv_data-</item>
        <item> IF sy-dbcnt &lt;&gt; l_tfill2.</item>
        <item> ROLLBACK WORK.</item>
        <item> ELSE.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> DELETE ct_alv_data INDEX lv_tabix.</item>
        <item> ENDIF. &quot;IF sy-dbcnt &lt;&gt; l_tfill2.</item>
        <item> ENDIF. &quot;IF sy-dbcnt &lt;&gt; l_tfill2.</item>
        <item> ENDIF. &quot;IF sy-dbcnt &lt;&gt; l_tfill3.</item>
        <item> ENDIF. &quot;IF sy-dbcnt &lt;&gt; l_tfill3.</item>
        <item> ENDIF. &quot;IF sy-dbcnt &lt;&gt; l_tfill1.</item>
        <item> ENDIF. &quot;IF sy-dbcnt &lt;&gt; l_tfill1.</item>
        <item/>
        <item> ENDIF. &quot;IF ( ( lv_qta_101 - lv_qta_102 ) = lv_psmng ).</item>
        <item> ENDIF. &quot;IF lv_aufnr IS NOT INITIAL.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_data_anag INTO DATA(ls_data_anag).</item>
        <item>* Tonolli_G - 09.01.2017 - End Ins</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SET_ALV_DATA_NEW>
      <SET_ODP_TECO>
        <item> METHOD set_odp_teco.</item>
        <item> DATA: lt_orders TYPE TABLE OF bapi_order_key,</item>
        <item> ls_orders TYPE bapi_order_key,</item>
        <item> ls_return TYPE bapiret2.</item>
        <item>* Cambio lo stato (TECC)</item>
        <item/>
        <item> CLEAR: ls_orders, ls_return.</item>
        <item> REFRESH: lt_orders.</item>
        <item> CLEAR: lt_orders.</item>
        <item> FREE: lt_orders.</item>
        <item/>
        <item> ls_orders-order_number = iv_order.</item>
        <item> APPEND ls_orders TO lt_orders.</item>
        <item/>
        <item> &quot;CALL FUNCTION &apos;DIALOG_SET_NO_DIALOG&apos;.</item>
        <item/>
        <item> CALL FUNCTION &apos;BAPI_PRODORD_COMPLETE_TECH&apos;</item>
        <item>* EXPORTING</item>
        <item>* SCOPE_COMPL_TECH = &apos;1&apos;</item>
        <item>* WORK_PROCESS_GROUP = &apos;COWORK_BAPI&apos;</item>
        <item>* WORK_PROCESS_MAX = 99</item>
        <item> IMPORTING</item>
        <item> return = ls_return</item>
        <item> TABLES</item>
        <item> orders = lt_orders</item>
        <item>* DETAIL_RETURN =</item>
        <item>* APPLICATION_LOG =</item>
        <item> .</item>
        <item> IF sy-subrc = 0.</item>
        <item> IF ls_return-type = &apos;A&apos; OR</item>
        <item> ls_return-type = &apos;B&apos; OR</item>
        <item> ls_return-type = &apos;E&apos;.</item>
        <item> cv_esito = &apos;001&apos;.</item>
        <item> cv_descr_esito = ls_return-message.</item>
        <item> EXIT.</item>
        <item> ELSE.</item>
        <item> CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;</item>
        <item> EXPORTING</item>
        <item> wait = &apos;X&apos;.</item>
        <item> cv_esito = &apos;000&apos;.</item>
        <item> cv_descr_esito = &apos;OK&apos;.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> cv_esito = &apos;002&apos;.</item>
        <item> cv_descr_esito = &apos;Errore generico&apos;..</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SET_ODP_TECO>
      <SET_ROW_TREE_TABLE>
        <item> METHOD set_row_tree_table.</item>
        <item> DATA: lv_counter TYPE zpp_counter.</item>
        <item/>
        <item> CLEAR: cs_albero.</item>
        <item> MOVE-CORRESPONDING is_data_bom TO cs_albero.</item>
        <item>* cs_albero-parent_sup = iv_parent_sup.</item>
        <item>* CLEAR: lv_counter.</item>
        <item>* SELECT MAX( counter ) INTO lv_counter FROM zpp_albero WHERE rootnam</item>
        <item>* ADD 1 TO lv_counter.</item>
        <item> cs_albero-counter = iv_counter.</item>
        <item> cs_albero-sort = iv_sort.</item>
        <item> &quot; verifica se esiste gi√† sort e lo incrementa di 1</item>
        <item> READ TABLE gt_albero WITH KEY rootname = cs_albero-rootname</item>
        <item> sort = iv_sort TRANSPORTING NO FIE</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ADD 1 TO cs_albero-sort.</item>
        <item> ENDIF.</item>
        <item> cs_albero-lev = iv_lev.</item>
        <item> cs_albero-ref = iv_counter.</item>
        <item> IF ( cs_albero-elaborato = abap_false ).</item>
        <item> cs_albero-colore = &apos;VERDE&apos;.</item>
        <item> IF ( cs_albero-mod_succ = &apos;D&apos; ).</item>
        <item> cs_albero-colore = &apos;ROSSO&apos;.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> CASE cs_albero-azione.</item>
        <item> WHEN &apos;D&apos;.</item>
        <item> cs_albero-colore = &apos;ROSSO&apos;.</item>
        <item> WHEN &apos;I&apos;.</item>
        <item> cs_albero-colore = &apos;VERDE&apos;.</item>
        <item> WHEN &apos;U&apos;.</item>
        <item> cs_albero-colore = &apos;GIALLO&apos;.</item>
        <item> WHEN OTHERS.</item>
        <item> &quot;break kosmedev.</item>
        <item> cs_albero-colore = &apos;GRIGIO&apos;.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item> DO ( iv_lev - 1 ) TIMES.</item>
        <item> cs_albero-tree_level = cs_albero-tree_level &amp;&amp; &apos;.&apos;.</item>
        <item> ENDDO.</item>
        <item> IF ( iv_lev &gt; 1 ).</item>
        <item> DATA: lv_tmp TYPE string.</item>
        <item> lv_tmp = iv_lev - 1.</item>
        <item> CONDENSE lv_tmp.</item>
        <item> cs_albero-tree_level = cs_albero-tree_level &amp;&amp; lv_tmp.</item>
        <item> ENDIF.</item>
        <item> LOOP AT gt_data_anag INTO DATA(ls_data_anag) WHERE rootname = cs_alb</item>
        <item> AND codename = cs_alb</item>
        <item> cs_albero-opname = ls_data_anag-opname.</item>
        <item> ENDLOOP.</item>
        <item> cs_albero-datum_bom = is_data_bom-datum.</item>
        <item> cs_albero-uzeit_bom = is_data_bom-uzeit.</item>
        <item> cs_albero-counter_bom = is_data_bom-counter.</item>
        <item> cs_albero-data_reg = sy-datum.</item>
        <item> cs_albero-ora_reg = sy-uzeit.</item>
        <item> cs_albero-elaborato = abap_false.</item>
        <item> ENDMETHOD.</item>
      </SET_ROW_TREE_TABLE>
      <SET_SALV>
        <item> METHOD set_salv.</item>
        <item> go_salv = io_salv.</item>
        <item> ENDMETHOD.</item>
      </SET_SALV>
      <SET_SAP_TABLE>
        <item> METHOD set_sap_table.</item>
        <item> DATA: ldref TYPE REF TO data,</item>
        <item> lt_split TYPE TABLE OF string,</item>
        <item> lv_n TYPE i,</item>
        <item> lv_counter TYPE zpp_counter,</item>
        <item> lo_data_descr TYPE REF TO cl_abap_datadescr.</item>
        <item> CREATE DATA ldref LIKE LINE OF ct_data.</item>
        <item> FIELD-SYMBOLS: &lt;file&gt; TYPE any,</item>
        <item> &lt;field&gt; TYPE any.</item>
        <item> lv_counter = 1.</item>
        <item> ASSIGN ldref-&gt;* TO &lt;file&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* REFRESH ct_data.</item>
        <item> LOOP AT it_file INTO DATA(ls_file).</item>
        <item> ASSIGN COMPONENT 1 OF STRUCTURE &lt;file&gt; TO &lt;field&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &lt;field&gt; = sy-mandt.</item>
        <item> ENDIF.</item>
        <item> ASSIGN COMPONENT 2 OF STRUCTURE &lt;file&gt; TO &lt;field&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &lt;field&gt; = sy-datum.</item>
        <item> ENDIF.</item>
        <item> ASSIGN COMPONENT 3 OF STRUCTURE &lt;file&gt; TO &lt;field&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &lt;field&gt; = sy-uzeit.</item>
        <item> ENDIF.</item>
        <item> ASSIGN COMPONENT 4 OF STRUCTURE &lt;file&gt; TO &lt;field&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &lt;field&gt; = lv_counter.</item>
        <item> ENDIF.</item>
        <item> ASSIGN COMPONENT 5 OF STRUCTURE &lt;file&gt; TO &lt;field&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &lt;field&gt; = iv_type.</item>
        <item> ENDIF.</item>
        <item>* SPLIT ls_file AT zcl_pp_pdm_file=&gt;c_file_separator_tab INTO TAB</item>
        <item> SPLIT ls_file AT zcl_pp_pdm_file=&gt;c_file_separator_pipe INTO TAB</item>
        <item> LOOP AT lt_split INTO DATA(ls_split).</item>
        <item> lv_n = sy-tabix + 5.</item>
        <item> ASSIGN COMPONENT lv_n OF STRUCTURE &lt;file&gt; TO &lt;field&gt;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> TRY.</item>
        <item> lo_data_descr ?= cl_abap_datadescr=&gt;describe_by_data(</item>
        <item> CATCH cx_sy_move_cast_error.</item>
        <item> ENDTRY.</item>
        <item> IF ( lo_data_descr-&gt;absolute_name+6 = &apos;ZPP_ELABORATO&apos; ).</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ( lo_data_descr-&gt;absolute_name+6 = &apos;MENGE_D&apos; OR</item>
        <item> lo_data_descr-&gt;absolute_name+6 = &apos;ZPP_SAP_PDM_RELQTY&apos; )</item>
        <item> DATA: lv_field TYPE c LENGTH 50.</item>
        <item> lv_field = ls_split.</item>
        <item> REPLACE &apos;,&apos; WITH &apos;.&apos; INTO lv_field.</item>
        <item> CONDENSE lv_field.</item>
        <item> &lt;field&gt; = lv_field.</item>
        <item> ELSE.</item>
        <item> &lt;field&gt; = ls_split.</item>
        <item> ENDIF.</item>
        <item> IF ( lo_data_descr-&gt;absolute_name+6 = &apos;ZPP_SAP_PDM_REVISIONE</item>
        <item> CONDENSE: ls_split, &lt;field&gt;.</item>
        <item> DATA: n TYPE i,</item>
        <item> lv_c TYPE c LENGTH 20.</item>
        <item> n = 0.</item>
        <item> lv_c = ls_split.</item>
        <item> DO strlen( lv_c ) TIMES.</item>
        <item> IF ( lv_c+n(1) CA &apos;0123456789&apos; ).</item>
        <item> ADD 1 TO n.</item>
        <item> ELSE.</item>
        <item> lv_c+n(1) = &apos;&apos;.</item>
        <item> CONDENSE lv_c.</item>
        <item> ENDIF.</item>
        <item> ENDDO.</item>
        <item> ls_split = lv_c.</item>
        <item> IF ( strlen( ls_split ) = 1 ).</item>
        <item> &lt;field&gt; = &apos;0&apos; &amp;&amp; ls_split.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* IF ( lo_data_descr-&gt;absolute_name+6 = &apos;ZPP_PDM_SAP_DATA&apos; ).</item>
        <item>* &lt;field&gt; = &lt;field&gt;+6 &amp;&amp; &lt;field&gt;+3(2) &amp;&amp; &lt;field&gt;(2).</item>
        <item>* ENDIF.</item>
        <item>* IF ( lo_data_descr-&gt;absolute_name+6 = &apos;ZPP_PDM_SAP_UZEIT&apos; )</item>
        <item>* &lt;field&gt; = &lt;field&gt;(2) &amp;&amp; &lt;field&gt;+3(2) &amp;&amp; &lt;field&gt;+6(2).</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( NOT &lt;file&gt; IS INITIAL ).</item>
        <item> APPEND &lt;file&gt; TO ct_data.</item>
        <item> ADD 1 TO lv_counter.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SET_SAP_TABLE>
      <SET_TREE_ALV_DATA>
        <item> METHOD set_tree_alv_data.</item>
        <item> DATA: ls_ztpp_cicli TYPE ztpp_cicli,</item>
        <item> lv_stlnr TYPE stnum,</item>
        <item> lv_level TYPE i.</item>
        <item/>
        <item> get_other_data( CHANGING cs_tree_data = cs_tree_data ).</item>
        <item> get_material_data( CHANGING cs_tree_data = cs_tree_data ).</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF cs_tree_data</item>
        <item> FROM marc LEFT JOIN makt ON makt~matnr = marc~matnr AND mak</item>
        <item> WHERE marc~matnr = cs_tree_data-matnr</item>
        <item> AND marc~werks = &apos;6301&apos;.</item>
        <item> get_plaf_data( CHANGING cs_tree_data = cs_tree_data ).</item>
        <item> IF ( cs_tree_data-beskz = &apos;E&apos; AND cs_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> SELECT SINGLE plnum psttr pedtr verid INTO CORRESPONDING FIELDS OF</item>
        <item> FROM plaf</item>
        <item> WHERE matnr = cs_tree_data-matnr</item>
        <item> AND pspel = gv_pspnr</item>
        <item> AND pwwrk = &apos;6301&apos;.</item>
        <item> ENDIF.</item>
        <item> IF ( cs_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> SELECT SINGLE stlnr INTO lv_stlnr FROM prst WHERE pspnr = gv_pspnr</item>
        <item> AND matnr = cs_tree_</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> AND stlan = &apos;1&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> cs_tree_data-f_diba = abap_true.</item>
        <item> ELSE.</item>
        <item> cs_tree_data-f_diba = abap_false.</item>
        <item> ENDIF.</item>
        <item> ELSEIF ( cs_tree_data-disgr = &apos;ZMTS&apos; ).</item>
        <item> SELECT SINGLE stlnr INTO lv_stlnr FROM mast WHERE matnr = cs_tree_</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> AND stlan = &apos;2&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> cs_tree_data-f_diba = abap_true.</item>
        <item> ELSE.</item>
        <item> cs_tree_data-f_diba = abap_false.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> get_odp_info( CHANGING cs_tree_data = cs_tree_data ).</item>
        <item/>
        <item> CLEAR: cs_tree_data-meins.</item>
        <item> SELECT SINGLE meins matkl INTO (cs_tree_data-meins, cs_tree_data-mat</item>
        <item> FROM mara WHERE matnr = cs_tree_data-matnr.</item>
        <item> cs_tree_data-plnnr = get_ciclo( EXPORTING iv_matnr = cs_tree_data-ma</item>
        <item> ENDMETHOD.</item>
      </SET_TREE_ALV_DATA>
      <SET_TREE_DATA>
        <item> METHOD set_tree_data.</item>
        <item> DATA: ls_tree_data TYPE ty_s_tree_data,</item>
        <item> ls_tree_hier TYPE ty_s_tree_hier,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname,</item>
        <item> lv_parentname TYPE zpp_pdm_parentname,</item>
        <item> lv_childname TYPE zpp_pdm_childname,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli,</item>
        <item> lv_stlnr TYPE stnum,</item>
        <item> lv_first TYPE abap_bool,</item>
        <item> lv_ref TYPE i,</item>
        <item> lv_tabix TYPE i,</item>
        <item> lt_albero TYPE ty_t_albero,</item>
        <item> lt_marc TYPE ty_t_marc, &quot;ty_t_marc TYPE TABLE OF ty_</item>
        <item> lt_makt TYPE ty_t_makt. &quot;ty_t_makt TYPE TABLE OF ty_</item>
        <item/>
        <item/>
        <item> REFRESH: gt_tree_data, gt_tree_hier, lt_albero, lt_makt, lt_marc.</item>
        <item> CLEAR: gt_tree_data, gt_tree_hier, lt_albero, lt_makt, lt_marc.</item>
        <item> FREE: gt_tree_data, gt_tree_hier, lt_albero, lt_makt, lt_marc.</item>
        <item/>
        <item> CLEAR: lv_rootname, lv_parentname, lv_childname.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item>* search_changes( iv_check = abap_false</item>
        <item>* iv_rootname = gs_current_alv_data-rootname ).</item>
        <item/>
        <item> CLEAR: gv_tipo_anticipo.</item>
        <item> CASE is_alv_data-tipofile.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_filling OR zcl_pp_pdm_file=&gt;c_</item>
        <item> zcl_pp_pdm_file=&gt;c_mat_pdm_ant_packaging.</item>
        <item> gv_tipo_anticipo = c_anticipo.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_prod_filling OR zcl_pp_pdm_file=&gt;c</item>
        <item> zcl_pp_pdm_file=&gt;c_mat_pdm_prod_packaging.</item>
        <item> gv_tipo_anticipo = c_produzione.</item>
        <item> ENDCASE.</item>
        <item/>
        <item> zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = is_al</item>
        <item> CHANGING cv_field = gv_psp</item>
        <item/>
        <item> &quot; parte ricorsiva</item>
        <item> DATA: lv_index TYPE i.</item>
        <item> lv_first = abap_true.</item>
        <item> lv_ref = 1.</item>
        <item/>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_albero FROM zpp_alber</item>
        <item> ORDER BY sort.</item>
        <item/>
        <item> SELECT matnr beskz sobsl dispo dzeit plifz webaz dismm disgr INTO TA</item>
        <item> FROM marc</item>
        <item> FOR ALL ENTRIES IN gt_albero</item>
        <item> WHERE matnr = gt_albero-childname</item>
        <item> AND werks = &apos;6301&apos;.</item>
        <item> SORT lt_marc BY matnr.</item>
        <item> DELETE ADJACENT DUPLICATES FROM lt_marc COMPARING matnr.</item>
        <item/>
        <item> SELECT matnr maktx INTO TABLE lt_makt</item>
        <item> FROM makt</item>
        <item> FOR ALL ENTRIES IN gt_albero</item>
        <item> WHERE matnr = gt_albero-childname</item>
        <item> AND spras = sy-langu.</item>
        <item> SORT lt_makt BY matnr.</item>
        <item> DELETE ADJACENT DUPLICATES FROM lt_makt COMPARING matnr.</item>
        <item/>
        <item>* GESTIONE STATUS BAR START</item>
        <item> DATA: l_tfill LIKE sy-tfill,</item>
        <item> l_tfill1 LIKE sy-tfill,</item>
        <item> l_a(12),</item>
        <item> l_testo(50).</item>
        <item> DATA: l_perc TYPE i,</item>
        <item> l_da(12).</item>
        <item/>
        <item> DESCRIBE TABLE gt_albero LINES l_tfill.</item>
        <item>* GESTIONE STATUS BAR END</item>
        <item/>
        <item>* REM: ty_t_albero TYPE TABLE OF ty_s_albero WITH UNIQUE SORTED KEY so</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero) WHERE rootname = is_alv_data-</item>
        <item> DATA(lv_index_child) = sy-tabix.</item>
        <item> CLEAR: ls_tree_hier, ls_tree_data.</item>
        <item/>
        <item>* GESTIONE STATUS BAR START</item>
        <item> l_tfill1 = l_tfill1 + 1.</item>
        <item> IF ( l_tfill1 MOD 250 ) = 0.</item>
        <item> WRITE sy-tabix TO l_da. &quot;RECORD CORRENTE</item>
        <item> WRITE l_tfill TO l_a. &quot;TOTALE RECORD</item>
        <item>* TEXT-I03 Elab. 2 di 4. Da :</item>
        <item>* TEXT-I02 A :</item>
        <item> CLEAR: l_testo.</item>
        <item> CONCATENATE TEXT-i03 l_da TEXT-i02 l_a</item>
        <item> INTO l_testo SEPARATED BY space.</item>
        <item/>
        <item> l_perc = l_tfill1 * 100 / l_tfill.</item>
        <item/>
        <item> CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;</item>
        <item> EXPORTING</item>
        <item> percentage = l_perc</item>
        <item> text = l_testo.</item>
        <item> ENDIF. &quot;IF ( l_tfill1 MOD 2 ) = 0.</item>
        <item>* GESTIONE STATUS BAR END</item>
        <item/>
        <item> MOVE-CORRESPONDING ls_albero TO ls_tree_hier.</item>
        <item> ls_tree_hier-parent = ls_albero-parentname.</item>
        <item> ls_tree_hier-node = ls_albero-childname.</item>
        <item> ls_tree_hier-level = ls_albero-lev.</item>
        <item/>
        <item>* Gestione dei Parenti Radice dell&apos;Albero BOM - Start</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_1) TO lv_index_child</item>
        <item> WHERE lev = ls_albero-lev - 1.</item>
        <item> ENDLOOP.</item>
        <item>* Tonolli_G - Il codice seguente √® stato commentato perch√® non d√† ri</item>
        <item>* DATA(lv_sort) = ls_albero-sort - 10.</item>
        <item>* DO.</item>
        <item>* READ TABLE gt_albero INTO DATA(ls_albero_1) WITH KEY sort = lv</item>
        <item>* IF sy-subrc = 0.</item>
        <item>* IF ls_albero_1-lev = ls_albero-lev - 1.</item>
        <item>* EXIT. &quot;USCITA DO ------&gt;</item>
        <item>* ELSE.</item>
        <item>* lv_sort = lv_sort - 10.</item>
        <item>* ENDIF.</item>
        <item>* ELSE.</item>
        <item>* EXIT. &quot;USCITA DO ------&gt;</item>
        <item>* ENDIF.</item>
        <item>* ENDDO.</item>
        <item> ls_tree_hier-sort_parent = ls_albero_1-sort.</item>
        <item>* Gestione dei Parenti Radice dell&apos;Albero BOM - End</item>
        <item/>
        <item/>
        <item> MOVE-CORRESPONDING ls_albero TO ls_tree_data.</item>
        <item> ls_tree_data-matnr = ls_albero-childname.</item>
        <item/>
        <item> get_material_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item/>
        <item>* Tonolli_G - 16.01.2017 - Start Del</item>
        <item>* SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_tree_data</item>
        <item>* FROM marc LEFT JOIN makt ON makt~matnr = marc~matnr AND</item>
        <item>* WHERE marc~matnr = ls_tree_data-matnr</item>
        <item>* AND marc~werks = &apos;6301&apos;.</item>
        <item>* Tonolli_G - 16.01.2017 - End Del</item>
        <item/>
        <item>* Tonolli_G - 16.01.2017 - Start Ins</item>
        <item> READ TABLE lt_marc INTO DATA(lv_marc)</item>
        <item> WITH KEY matnr = ls_tree_data-matnr BINARY SEARCH.</item>
        <item> MOVE-CORRESPONDING lv_marc TO ls_tree_data.</item>
        <item/>
        <item> READ TABLE lt_makt INTO DATA(lv_makt)</item>
        <item> WITH KEY matnr = ls_tree_data-matnr BINARY SEARCH.</item>
        <item> ls_tree_data-maktx = lv_makt-maktx.</item>
        <item>* Tonolli_G - 16.01.2017 - End Ins</item>
        <item/>
        <item> ls_tree_hier-disgr = ls_tree_data-disgr. &quot;Tonolli_g - 17.01.2017</item>
        <item> APPEND ls_tree_hier TO gt_tree_hier. &quot;&lt;------</item>
        <item/>
        <item> get_plaf_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> SELECT SINGLE plnum psttr pedtr verid INTO CORRESPONDING FIELDS</item>
        <item> FROM plaf</item>
        <item> WHERE matnr = ls_tree_data-matnr</item>
        <item> AND pspel = gv_pspnr</item>
        <item> AND pwwrk = &apos;6301&apos;.</item>
        <item> ENDIF.</item>
        <item> IF ( ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> SELECT SINGLE stlnr INTO lv_stlnr FROM prst WHERE pspnr = gv_psp</item>
        <item> AND matnr = ls_tre</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> AND stlan = &apos;1&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_tree_data-f_diba = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data-f_diba = abap_false.</item>
        <item> ENDIF.</item>
        <item> ELSEIF ( ls_tree_data-disgr = &apos;ZMTS&apos; ).</item>
        <item> SELECT SINGLE stlnr INTO lv_stlnr FROM mast WHERE matnr = ls_tre</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> AND stlan = &apos;2&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_tree_data-f_diba = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data-f_diba = abap_false.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> get_odp_info( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> CLEAR: ls_tree_data-meins.</item>
        <item> SELECT SINGLE meins matkl INTO (ls_tree_data-meins, ls_tree_data-m</item>
        <item> FROM mara WHERE matnr = ls_tree_data-matnr.</item>
        <item> ls_tree_data-plnnr = get_ciclo( EXPORTING iv_matnr = ls_tree_data-</item>
        <item> ls_tree_data-menge = ls_albero-relqty.</item>
        <item> ls_tree_data-menge_old = ls_albero-relqty_old.</item>
        <item> IF ( ls_albero-lev &gt; 1 AND ls_albero-colore = &apos;VERDE&apos; AND ls_tree_</item>
        <item> ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-matnr(1) = &apos;8&apos; ).</item>
        <item> ls_tree_data-itsob = &apos;50&apos;.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* ls_tree_data-ref = cv_ref.</item>
        <item>* ls_tree_data-counter = ls_data_bom-counter.</item>
        <item>* ls_tree_data-mod_succ = ls_data_bom-mod_succ.</item>
        <item>* ls_tree_data-parent_sup = ls_data_bom-parent_sup.</item>
        <item>* ls_tree_data-bom_key = ls_data_bom-bom_key.</item>
        <item/>
        <item>* IF ( ls_data_bom-elaborato = abap_false ).</item>
        <item>* ls_tree_data-color = if_salv_c_tree_style=&gt;emphasized_positive.</item>
        <item>* ENDIF.</item>
        <item>* IF ( ls_data_bom-elaborato = abap_false ).</item>
        <item>* ls_tree_data-opname = iv_opname.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> ls_tree_data-qta_diba = ls_albero-relqty.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_2) WITH KEY ref =</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_2 WITH KEY node = ls_</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_10) WITH KEY p</item>
        <item>* c</item>
        <item>* c</item>
        <item>* d</item>
        <item>* ls_tree_data-qta_diba = ls_data_bom_10-relqty * ls_data_bom</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> APPEND ls_tree_data TO gt_tree_data.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* Verifica se l&apos;Albero BOM √® corrotto</item>
        <item> diff_branch_nodes( ).</item>
        <item/>
        <item> ENDMETHOD. &quot; METHOD set_tree_data_new.</item>
      </SET_TREE_DATA>
      <SET_TREE_DATA_CHILD>
        <item> METHOD set_tree_data_child.</item>
        <item> DATA: ls_tree_data TYPE ty_s_tree_data,</item>
        <item> ls_tree_hier TYPE ty_s_tree_hier,</item>
        <item> lt_data_bom TYPE ty_t_data_bom,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname,</item>
        <item> lv_codename TYPE zpp_pdm_codename,</item>
        <item> lv_parentname TYPE zpp_pdm_parentname,</item>
        <item> lv_childname TYPE zpp_pdm_childname,</item>
        <item> lv_stlnr TYPE mast-stlnr,</item>
        <item> lv_level TYPE i,</item>
        <item> lv_ref TYPE i,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> lv_level = iv_level + 1.</item>
        <item> cv_ref = cv_ref + 1.</item>
        <item/>
        <item> LOOP AT gt_data_bom INTO DATA(ls_data_bom) WHERE rootname = iv_roo</item>
        <item> AND parentname = iv_nod</item>
        <item> AND counter = iv_cou</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> IF ( ls_data_bom-datum &lt;&gt; is_data_bom-datum OR</item>
        <item> ( ls_data_bom-datum = is_data_bom-datum AND ls_data_bom-uzeit</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ls_tree_hier-node = ls_data_bom-childname.</item>
        <item> ls_tree_hier-parent = ls_data_bom-parentname.</item>
        <item> ls_tree_hier-counter = ls_data_bom-counter.</item>
        <item> ls_tree_hier-level = lv_level.</item>
        <item> ls_tree_hier-ref = cv_ref.</item>
        <item> ls_tree_hier-ref_bom = lv_tabix.</item>
        <item> ls_tree_hier-relstartdate = ls_data_bom-relstartdate.</item>
        <item> APPEND ls_tree_hier TO gt_tree_hier.</item>
        <item/>
        <item> ls_tree_data-matnr = ls_data_bom-parentname.</item>
        <item> ls_tree_data-relstartdate = ls_data_bom-relstartdate.</item>
        <item> ls_tree_data-relenddate = ls_data_bom-relenddate.</item>
        <item> ls_tree_data-elaborato = ls_data_bom-elaborato.</item>
        <item> ls_tree_data-counter = ls_data_bom-counter.</item>
        <item> ls_tree_data-azione = ls_data_bom-azione.</item>
        <item> ls_tree_data-itsob = ls_data_bom-itsob.</item>
        <item> ls_tree_data-ref_bom = lv_tabix.</item>
        <item> IF ( ls_tree_data-azione IS INITIAL ).</item>
        <item> ls_tree_data-azione = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item/>
        <item> get_material_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_tree_data</item>
        <item> FROM marc LEFT JOIN makt ON makt~matnr = marc~matnr AND m</item>
        <item> WHERE marc~matnr = ls_data_bom-childname</item>
        <item> AND marc~werks = &apos;6301&apos;.</item>
        <item> get_plaf_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> SELECT SINGLE plnum psttr pedtr verid INTO CORRESPONDING FIELDS</item>
        <item> FROM plaf</item>
        <item> WHERE matnr = ls_tree_data-matnr</item>
        <item> AND pspel = gv_pspnr</item>
        <item> AND pwwrk = &apos;6301&apos;.</item>
        <item> ENDIF.</item>
        <item> IF ( ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> SELECT SINGLE stlnr INTO lv_stlnr FROM prst WHERE pspnr = gv_psp</item>
        <item> AND matnr = ls_tre</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> AND stlan = &apos;1&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_tree_data-f_diba = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data-f_diba = abap_false.</item>
        <item> ENDIF.</item>
        <item> ELSEIF ( ls_tree_data-disgr = &apos;ZMTS&apos; ).</item>
        <item> SELECT SINGLE stlnr INTO lv_stlnr FROM mast WHERE matnr = ls_tre</item>
        <item> AND werks = &apos;6301&apos;</item>
        <item> AND stlan = &apos;2&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_tree_data-f_diba = abap_true.</item>
        <item> ELSE.</item>
        <item> ls_tree_data-f_diba = abap_false.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> get_odp_info( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> CLEAR: ls_tree_data-meins.</item>
        <item> SELECT SINGLE meins matkl INTO (ls_tree_data-meins, ls_tree_data-m</item>
        <item> FROM mara WHERE matnr = ls_tree_data-matnr.</item>
        <item> ls_tree_data-plnnr = get_ciclo( EXPORTING iv_matnr = ls_tree_data-</item>
        <item> ls_tree_data-menge = ls_data_bom-relqty.</item>
        <item> ls_tree_data-menge_old = ls_data_bom-relqty_old.</item>
        <item> ls_tree_data-ref = cv_ref.</item>
        <item> ls_tree_data-counter = ls_data_bom-counter.</item>
        <item> ls_tree_data-mod_succ = ls_data_bom-mod_succ.</item>
        <item> ls_tree_data-parent_sup = ls_data_bom-parent_sup.</item>
        <item> ls_tree_data-bom_key = ls_data_bom-bom_key.</item>
        <item/>
        <item> IF ( ls_data_bom-elaborato = abap_false ).</item>
        <item> ls_tree_data-color = if_salv_c_tree_style=&gt;emphasized_positive.</item>
        <item> ENDIF.</item>
        <item> IF ( ls_data_bom-elaborato = abap_false ).</item>
        <item> ls_tree_data-opname = iv_opname.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ls_tree_data-qta_diba = ls_data_bom-relqty.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_2) WITH KEY ref = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier_2 WITH KEY node = ls_t</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom_10) WITH KEY pa</item>
        <item> ch</item>
        <item> co</item>
        <item> de</item>
        <item> ls_tree_data-qta_diba = ls_data_bom_10-relqty * ls_data_bom-</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> APPEND ls_tree_data TO gt_tree_data.</item>
        <item/>
        <item>* Chiamata ricorsiva</item>
        <item> set_tree_data_child( EXPORTING iv_counter = ls_data_bom-counter</item>
        <item> iv_root = ls_data_bom-rootname</item>
        <item> iv_node = ls_data_bom-childname</item>
        <item> iv_level = lv_level</item>
        <item> iv_opname = iv_opname</item>
        <item> is_data_bom = is_data_bom</item>
        <item> CHANGING cv_ref = cv_ref ).</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT gt_data_bom INTO DATA(ls_data_bom) WHERE rootnam</item>
        <item/>
        <item> ENDMETHOD. &quot; METHOD set_tree_data_child.</item>
      </SET_TREE_DATA_CHILD>
      <SET_TREE_DATA_NEW>
        <item> METHOD set_tree_data_new.</item>
        <item> DATA: ls_tree_data TYPE ty_s_tree_data,</item>
        <item> ls_tree_hier TYPE ty_s_tree_hier,</item>
        <item> lv_rootname TYPE zpp_pdm_rootname,</item>
        <item> lv_parentname TYPE zpp_pdm_parentname,</item>
        <item> lv_childname TYPE zpp_pdm_childname,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli,</item>
        <item> lv_stlnr TYPE stnum,</item>
        <item> lv_first TYPE abap_bool,</item>
        <item> lv_ref TYPE i,</item>
        <item> lv_tabix TYPE i.</item>
        <item/>
        <item> REFRESH: gt_tree_data, gt_tree_hier.</item>
        <item> CLEAR: gt_tree_data, gt_tree_hier.</item>
        <item> FREE: gt_tree_data, gt_tree_hier.</item>
        <item/>
        <item> CLEAR: lv_rootname, lv_parentname, lv_childname.</item>
        <item/>
        <item> BREAK kosmedev. &quot;Tonolli_G - Ins per Debug</item>
        <item/>
        <item> CLEAR: gv_tipo_anticipo.</item>
        <item> CASE is_alv_data-tipofile.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_ant_filling OR zcl_pp_pdm_file=&gt;c_</item>
        <item> zcl_pp_pdm_file=&gt;c_mat_pdm_ant_packaging.</item>
        <item> gv_tipo_anticipo = c_anticipo.</item>
        <item> WHEN zcl_pp_pdm_file=&gt;c_mat_pdm_prod_filling OR zcl_pp_pdm_file=&gt;c</item>
        <item> zcl_pp_pdm_file=&gt;c_mat_pdm_prod_packaging.</item>
        <item> gv_tipo_anticipo = c_produzione.</item>
        <item> ENDCASE.</item>
        <item/>
        <item> zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = is_al</item>
        <item> CHANGING cv_field = gv_psp</item>
        <item/>
        <item> &quot; parte ricorsiva</item>
        <item> DATA: lv_index TYPE i.</item>
        <item> lv_first = abap_true.</item>
        <item> lv_ref = 1.</item>
        <item/>
        <item>** READ TABLE gt_data_bom INTO DATA(ls_data_bom_first) WITH KEY rootn</item>
        <item>* READ TABLE gt_data_bom INTO DATA(ls_data_bom_first) INDEX 1.</item>
        <item> LOOP AT gt_data_bom INTO DATA(ls_data_bom_first).</item>
        <item> IF ( ls_data_bom_first-rootname = ls_data_bom_first-parentname ).</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> LOOP AT gt_data_bom INTO ls_data_bom_first WHERE rootname = ls_dat</item>
        <item> AND datum = ls_dat</item>
        <item> AND uzeit = ls_dat</item>
        <item> IF ( ls_data_bom_first-rootname = ls_data_bom_first-parentname )</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_hier.</item>
        <item> ls_tree_hier-node = ls_data_bom_first-parentname.</item>
        <item> ls_tree_hier-parent = space.</item>
        <item> ls_tree_hier-counter = ls_data_bom_first-counter.</item>
        <item> ls_tree_hier-level = 1.</item>
        <item> ls_tree_hier-ref = lv_ref.</item>
        <item> ls_tree_hier-ref_bom = lv_tabix.</item>
        <item> ls_tree_hier-relstartdate = ls_data_bom_first-relstartdate.</item>
        <item> APPEND ls_tree_hier TO gt_tree_hier.</item>
        <item/>
        <item> CLEAR: ls_tree_data.</item>
        <item> ls_tree_data-matnr = ls_data_bom_first-parentname.</item>
        <item> ls_tree_data-relstartdate = ls_data_bom_first-relstartdate.</item>
        <item> ls_tree_data-relenddate = ls_data_bom_first-relenddate.</item>
        <item> ls_tree_data-elaborato = ls_data_bom_first-elaborato.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> ls_tree_data-menge = 1.</item>
        <item> ls_tree_data-qta_diba = 1.</item>
        <item> ls_tree_data-ref = lv_ref.</item>
        <item> ls_tree_data-counter = ls_data_bom_first-counter.</item>
        <item> ls_tree_data-azione = ls_data_bom_first-azione.</item>
        <item>* ls_tree_data-itsob = ls_data_bom_first-itsob.</item>
        <item> ls_tree_data-ref_bom = lv_tabix.</item>
        <item> IF ( ls_tree_data-azione IS INITIAL ).</item>
        <item> ls_tree_data-azione = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item> ls_tree_data-mod_succ = ls_data_bom_first-mod_succ.</item>
        <item> IF ( ls_data_bom_first-elaborato = abap_false ).</item>
        <item> ls_tree_data-color = if_salv_c_tree_style=&gt;emphasized_positive.</item>
        <item> ENDIF.</item>
        <item> IF ( ls_data_bom_first-elaborato = abap_false ).</item>
        <item> READ TABLE gt_data_anag INTO DATA(ls_data_anag) WITH KEY datum</item>
        <item> uzeit</item>
        <item> rootnam</item>
        <item> codenam</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_tree_data-opname = ls_data_anag-opname.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> APPEND ls_tree_data TO gt_tree_data.</item>
        <item/>
        <item> ADD 1 TO lv_ref.</item>
        <item> ENDIF.</item>
        <item/>
        <item>*** START **************************************************************</item>
        <item>* REM: es. ls_data_bom_first-rootname = K5004598 il padre dell&apos;albero</item>
        <item> LOOP AT gt_data_bom INTO DATA(ls_data_bom) WHERE parentname = ls_dat</item>
        <item>* Elaborazione dei figli diretti del K</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> IF ( ls_data_bom-datum &lt;&gt; ls_data_bom_first-datum OR</item>
        <item> ( ls_data_bom-datum = ls_data_bom_first-datum AND ls_data_bom</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item/>
        <item> CLEAR: ls_tree_hier.</item>
        <item> ls_tree_hier-node = ls_data_bom-childname.</item>
        <item> ls_tree_hier-parent = ls_data_bom-parentname.</item>
        <item> ls_tree_hier-counter = ls_data_bom-counter.</item>
        <item> ls_tree_hier-level = 2.</item>
        <item> ls_tree_hier-ref = lv_ref.</item>
        <item> ls_tree_hier-ref_bom = lv_tabix.</item>
        <item> ls_tree_hier-relstartdate = ls_data_bom-relstartdate.</item>
        <item> APPEND ls_tree_hier TO gt_tree_hier.</item>
        <item/>
        <item> CLEAR: ls_tree_data.</item>
        <item> ls_tree_data-matnr = ls_data_bom-childname.</item>
        <item> ls_tree_data-relstartdate = ls_data_bom-relstartdate.</item>
        <item> ls_tree_data-relenddate = ls_data_bom-relenddate.</item>
        <item> ls_tree_data-elaborato = ls_data_bom-elaborato.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> ls_tree_data-menge = ls_data_bom-relqty.</item>
        <item> ls_tree_data-menge_old = ls_data_bom-relqty_old.</item>
        <item> ls_tree_data-qta_diba = 1.</item>
        <item> ls_tree_data-itsob = ls_data_bom_first-itsob.</item>
        <item> ls_tree_data-ref = lv_ref.</item>
        <item> ls_tree_data-counter = ls_data_bom-counter.</item>
        <item> ls_tree_data-azione = ls_data_bom-azione.</item>
        <item> ls_tree_data-itsob = ls_data_bom-itsob.</item>
        <item> ls_tree_data-ref_bom = lv_tabix.</item>
        <item> IF ( ls_tree_data-azione IS INITIAL ).</item>
        <item> ls_tree_data-azione = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item> ls_tree_data-mod_succ = ls_data_bom-mod_succ.</item>
        <item> IF ( ls_data_bom-elaborato = abap_false ).</item>
        <item> ls_tree_data-color = if_salv_c_tree_style=&gt;emphasized_positive.</item>
        <item> ENDIF.</item>
        <item> IF ( ls_data_bom-elaborato = abap_false ).</item>
        <item> READ TABLE gt_data_anag INTO ls_data_anag WITH KEY datum =</item>
        <item> uzeit =</item>
        <item> rootname =</item>
        <item> codename =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_tree_data-opname = ls_data_anag-opname.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* zcl_pp_pdm_monitor_sec=&gt;change_tree_data( CHANGING cs_tree_data =</item>
        <item/>
        <item> ls_tree_data-qta_diba = ls_data_bom-relqty.</item>
        <item/>
        <item> APPEND ls_tree_data TO gt_tree_data. &quot;&lt;------</item>
        <item/>
        <item>* Costruzione in ricorsione sulla set_tree_data_child per continuare</item>
        <item>* Questa chiamata non esegue nessuna elaborazione perch√® il counter</item>
        <item> set_tree_data_child( EXPORTING iv_counter = ls_data_bom-counter</item>
        <item> iv_root = ls_data_bom-rootname</item>
        <item> iv_node = ls_data_bom-childname</item>
        <item> iv_level = ls_tree_hier-level</item>
        <item> iv_opname = ls_tree_data-opname</item>
        <item> is_data_bom = ls_data_bom</item>
        <item> CHANGING cv_ref = lv_ref ).</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT gt_data_bom INTO DATA(ls_data_bom) WHERE parentn</item>
        <item>*** END ****************************************************************</item>
        <item/>
        <item>* search_changes( ls_data_bom_first ).</item>
        <item> search_changes_new( ).</item>
        <item> ENDMETHOD. &quot; METHOD set_tree_data_new.</item>
      </SET_TREE_DATA_NEW>
      <SET_TREE_NODES>
        <item> METHOD set_tree_nodes.</item>
        <item> DATA: ls_data TYPE ty_s_tree_data,</item>
        <item> ls_hier TYPE ty_s_tree_hier,</item>
        <item>* ls_hier_2 TYPE ty_s_tree_hier,</item>
        <item>* lv_key TYPE salv_de_node_key,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_root_node TYPE REF TO cl_salv_node,</item>
        <item> lv_text TYPE lvc_value,</item>
        <item> lv_index TYPE i,</item>
        <item> lv_colore TYPE ty_s_tree_data-colore,</item>
        <item> lv_level TYPE ty_s_tree_hier-level,</item>
        <item> lv_index_parent TYPE i.</item>
        <item/>
        <item> FIELD-SYMBOLS: &lt;fs_hier&gt; TYPE ty_s_tree_hier.</item>
        <item/>
        <item>* get_nodes: Get Specific Node</item>
        <item> co_nodes = co_tree-&gt;get_nodes( ). &quot;Nella variabile co_nodes abbiam</item>
        <item/>
        <item> gv_tree_current_level = iv_until.</item>
        <item/>
        <item> DATA: lo_item TYPE REF TO cl_salv_item.</item>
        <item/>
        <item>* GESTIONE STATUS BAR START</item>
        <item> DATA: l_tfill LIKE sy-tfill,</item>
        <item> l_tfill1 LIKE sy-tfill,</item>
        <item> l_a(12),</item>
        <item> l_testo(50).</item>
        <item> DATA: l_perc TYPE i,</item>
        <item> l_da(12).</item>
        <item/>
        <item> DESCRIBE TABLE ct_hier LINES l_tfill.</item>
        <item>* GESTIONE STATUS BAR END</item>
        <item/>
        <item> SORT ct_hier BY sort.</item>
        <item/>
        <item> LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt;. &quot;LOOP PRINCIPALE</item>
        <item> lv_index_parent = sy-tabix - 1.</item>
        <item> CLEAR: ls_data, ls_hier.</item>
        <item/>
        <item>* GESTIONE STATUS BAR START</item>
        <item> l_tfill1 = l_tfill1 + 1.</item>
        <item> IF ( l_tfill1 MOD 250 ) = 0.</item>
        <item> WRITE sy-tabix TO l_da. &quot;RECORD CORRENTE</item>
        <item> WRITE l_tfill TO l_a. &quot;TOTALE RECORD</item>
        <item>* TEXT-I01 Elaborazione 3 di 4. Da :</item>
        <item>* TEXT-I02 A :</item>
        <item> CLEAR: l_testo.</item>
        <item> CONCATENATE TEXT-i01 l_da TEXT-i02 l_a</item>
        <item> INTO l_testo SEPARATED BY space.</item>
        <item/>
        <item> l_perc = l_tfill1 * 100 / l_tfill.</item>
        <item/>
        <item> CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;</item>
        <item> EXPORTING</item>
        <item> percentage = l_perc</item>
        <item> text = l_testo.</item>
        <item> ENDIF.</item>
        <item>* GESTIONE STATUS BAR END</item>
        <item/>
        <item>* Tonolli_G - 30.01.2017 Start Ins - Non estrarre i rami senza BOM</item>
        <item> IF ( NOT is_sel-p_nogray IS INITIAL AND</item>
        <item> NOT &lt;fs_hier&gt;-parent IS INITIAL ) . &quot;AND</item>
        <item>* ( sy-uname = &apos;KOSMEDEV&apos; OR sy-uname = &apos;PP-KOSME&apos; ) ). &quot;Al mom</item>
        <item> IF lv_level IS NOT INITIAL AND</item>
        <item> &lt;fs_hier&gt;-level &gt; lv_level.</item>
        <item> CONTINUE.</item>
        <item> ELSEIF &lt;fs_hier&gt;-level = 2.</item>
        <item>* &lt;fs_hier&gt;-colore EQ &apos;GRIGIO&apos; AND</item>
        <item> CLEAR: lv_level, lv_colore.</item>
        <item>* Estrazione del colore (diverso da GRIGIO) sullo stesso ramo qu</item>
        <item> LOOP AT ct_hier INTO DATA(ls_tree_hier_2) FROM lv_index_parent</item>
        <item> WHERE level &gt;= &lt;fs_hier&gt;-level.</item>
        <item> IF ls_tree_hier_2-level = &lt;fs_hier&gt;-level AND ls_tree_hier_2</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> IF ls_tree_hier_2-colore &lt;&gt; &apos;GRIGIO&apos;.</item>
        <item> lv_colore = ls_tree_hier_2-colore. &quot;&lt;------ Tovato ramo</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF sy-subrc = 0 AND lv_colore IS INITIAL.</item>
        <item>* Escludere i componenti del ramo senza MOP</item>
        <item> lv_level = 2.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item>* Nessuna azione si aggiunge tutto</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* Tonolli_G - 30.01.2017 Start Ins</item>
        <item/>
        <item>* Tonolli_G - 17.01.2017 Start Ins</item>
        <item> IF ( NOT is_sel-p_nozmts IS INITIAL AND</item>
        <item> ( sy-uname = &apos;KOSMEDEV&apos; OR sy-uname = &apos;PP-KOSME&apos; ) ).</item>
        <item>* IF ( &lt;fs_hier&gt;-disgr &lt;&gt; &apos;ZMTO&apos; ).</item>
        <item>* Regola: Eliminare i figli dei codici 5 non MTO; tutti gli altri</item>
        <item>* Regola: Escludere tutti i figli dei padri 5,4,3,2 ZMTS; i figli</item>
        <item> IF ( &lt;fs_hier&gt;-disgr &lt;&gt; &apos;ZMTO&apos; AND</item>
        <item> ( &lt;fs_hier&gt;-parent(1) = &apos;5&apos; OR &lt;fs_hier&gt;-parent(1) = &apos;4&apos; OR</item>
        <item>* Il componente non √® ZMTO. Ora verifico se anche il padre non √®</item>
        <item> READ TABLE ct_hier INTO ls_hier</item>
        <item> WITH KEY sort = &lt;fs_hier&gt;-sort_parent BINARY SEARCH.</item>
        <item> IF sy-subrc = 0 AND ls_hier-disgr &lt;&gt; &apos;ZMTO&apos;.</item>
        <item>* Il padre non √® ZMTO quindi si passa al componente successivo</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSEIF &lt;fs_hier&gt;-disgr = &apos;ZKAN&apos;.</item>
        <item>* Regola: Escludere anche i ZKAN</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* Tonolli_G - 17.01.2017 Start Ins</item>
        <item/>
        <item>** Aggiunge come ultimo nodo vedi metodo add_node classe co_nodes</item>
        <item> IF &lt;fs_hier&gt;-parent = &apos;&apos;.</item>
        <item>* 1. Gestione della Radice dell&apos;Albero BOM</item>
        <item> IF ( iv_init = abap_true ). &quot;SET_TREE_NODES √® chiamato da TREE</item>
        <item>* add_node: Insert New Node</item>
        <item> lo_node = co_nodes-&gt;add_node( related_node = &apos;&apos; &quot;Nessun re</item>
        <item> relationship = if_salv_c_node_re</item>
        <item>* lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_a ).</item>
        <item> lo_root_node = lo_node.</item>
        <item> ELSE.</item>
        <item>* REM: Codice mai eseguito</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item>* 2. Gestione dei Parenti Radice dell&apos;Albero BOM</item>
        <item>* Tonolli_G - 16.01.2017 - Start Del</item>
        <item>* LOOP AT ct_hier INTO ls_hier TO lv_index_parent</item>
        <item>* &quot;USING KEY level</item>
        <item>* WHERE level = &lt;fs_hier&gt;-level - 1.</item>
        <item>* ENDLOOP.</item>
        <item>* Tonolli_G - 16.01.2017 - End Del</item>
        <item>* Tonolli_G - 16.01.2017 - Start Ins</item>
        <item> READ TABLE ct_hier INTO ls_hier</item>
        <item> WITH KEY sort = &lt;fs_hier&gt;-sort_parent BINARY SEARCH.</item>
        <item>* Tonolli_G - 16.01.2017 - End Ins</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item>* add_node: Insert New Node</item>
        <item> lo_node = co_nodes-&gt;add_node( related_node = ls_hier-key</item>
        <item> relationship = if_salv_c_node_re</item>
        <item> ELSE.</item>
        <item>* REM: Codice mai eseguito</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF &lt;fs_hier&gt;-parent = &apos;&apos;.</item>
        <item/>
        <item> IF ( iv_init = abap_true ).</item>
        <item>* Save the ALV internal key</item>
        <item> &lt;fs_hier&gt;-key = lo_node-&gt;get_key( ).</item>
        <item/>
        <item>* Add the data of the tree</item>
        <item> FIELD-SYMBOLS: &lt;fs_data&gt; TYPE ty_s_tree_data.</item>
        <item> UNASSIGN: &lt;fs_data&gt;.</item>
        <item> READ TABLE ct_data ASSIGNING &lt;fs_data&gt; WITH KEY ref = &lt;fs_</item>
        <item>* READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix. &quot;Tonolli_G - Ins</item>
        <item> ls_data-key = &lt;fs_hier&gt;-key.</item>
        <item> &lt;fs_data&gt;-key = &lt;fs_hier&gt;-key.</item>
        <item> ls_data = &lt;fs_data&gt;.</item>
        <item>* MODIFY ct_data FROM ls_data INDEX lv_index.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( iv_init = abap_true ).</item>
        <item/>
        <item>* Calcola quantit√† BOM, vedi metodo set_data_row classe lo_node</item>
        <item> DATA: lv_qta_diba TYPE menge_d.</item>
        <item> lv_qta_diba = 1.</item>
        <item> ls_data-qta_diba = ls_data-menge.</item>
        <item/>
        <item>* Tonolli_G - Start Del</item>
        <item>* &quot; cerchiamo l&apos;ultimo parent a cui agganciare il nodo</item>
        <item>* LOOP AT ct_hier INTO DATA(ls_tree_hier_2) TO lv_index_parent</item>
        <item>* &quot;USING KEY level</item>
        <item>* WHERE level = &lt;fs_hier&gt;-level - 1.</item>
        <item>* ENDLOOP.</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_data_parent) WITH KEY key</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* lv_qta_diba = ls_data_parent-qta_diba.</item>
        <item>* ENDIF.</item>
        <item>* IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item>* ls_data-qta_diba = lv_qta_diba * ls_data-menge. &quot;&lt;------</item>
        <item>* IF ( NOT lv_index IS INITIAL ).</item>
        <item>* MODIFY gt_tree_data FROM ls_data INDEX lv_index TRANSPORTIN</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF. &quot;IF ( sy-subrc = 0 ).</item>
        <item>* Tonolli_G - End Del</item>
        <item>* Tonolli_G - Start Ins</item>
        <item> IF ls_hier-key IS NOT INITIAL. &quot;Tonolli_G - Ins</item>
        <item>* FIELD-SYMBOLS: &lt;fs_data&gt; TYPE ty_s_tree_data.</item>
        <item>* UNASSIGN: &lt;fs_data&gt;.</item>
        <item>* READ TABLE gt_tree_data ASSIGNING &lt;fs_data&gt; WITH KEY key =</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data_parent) WITH KEY key =</item>
        <item/>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_qta_diba = ls_data_parent-qta_diba.</item>
        <item>* lv_qta_diba = &lt;fs_data&gt;-qta_diba.</item>
        <item> ENDIF.</item>
        <item> IF ( NOT ls_hier-parent IS INITIAL ).</item>
        <item> ls_data-qta_diba = lv_qta_diba * ls_data-menge. &quot;&lt;------</item>
        <item> IF ( NOT lv_index IS INITIAL ).</item>
        <item> MODIFY gt_tree_data FROM ls_data INDEX lv_index TRANSPORTING</item>
        <item>* &lt;fs_data&gt;-qta_diba = lv_qta_diba * ls_data-menge. &quot;&lt;----</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* Tonolli_G - End Ins</item>
        <item/>
        <item>* Add the data of the tree</item>
        <item> lo_node-&gt;set_data_row( ls_data ). &quot;&lt;------</item>
        <item/>
        <item> lo_item = lo_node-&gt;get_item( &apos;F_DIBA&apos; ).</item>
        <item> lo_item-&gt;set_type( cl_salv_item=&gt;if_salv_c_item_type~checkbox ).</item>
        <item> lo_item-&gt;set_value( space ).</item>
        <item> lo_item-&gt;set_checked( ls_data-f_diba ).</item>
        <item/>
        <item/>
        <item>* Tonolli_G - Strat Del</item>
        <item>* &quot; cerchiamo il parent a cui agganciare il nodo</item>
        <item>* LOOP AT ct_hier INTO DATA(ls_hier2) TO lv_index_parent</item>
        <item>* &quot;USING KEY level</item>
        <item>* WHERE level = &lt;fs_hier&gt;-level - 1.</item>
        <item>* ENDLOOP.</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data WITH KEY key = ls_hier2-key</item>
        <item>* azione = &apos;D&apos; TRANSPORTING NO F</item>
        <item>* ENDIF.</item>
        <item>* Tonolli_G - End Del</item>
        <item/>
        <item>***** START ************************************************************</item>
        <item> CASE ls_data-colore.</item>
        <item> WHEN &apos;VERDE&apos;.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_posit</item>
        <item> WHEN &apos;GIALLO&apos;.</item>
        <item> lo_node-&gt;set_row_style( 7 ).</item>
        <item> WHEN &apos;ROSSO&apos;.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_negat</item>
        <item> WHEN &apos;GRIGIO&apos;.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;default ).</item>
        <item> WHEN OTHERS.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;default ).</item>
        <item> ENDCASE.</item>
        <item>***** END **************************************************************</item>
        <item/>
        <item> lv_text = ls_data-matnr. &quot; &amp;&amp; ` - ` &amp;&amp; ls_data-maktx.</item>
        <item> lo_node-&gt;set_text( lv_text ).</item>
        <item> lo_node-&gt;set_visible( abap_true ).</item>
        <item> ENDLOOP. &quot;LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt;.</item>
        <item/>
        <item> TRY.</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> lo_root_node-&gt;expand( ).</item>
        <item> ENDIF.</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item/>
        <item>* IF ( iv_init = abap_false ).</item>
        <item>* DATA: lo_parent TYPE REF TO cl_salv_node,</item>
        <item>* lo_child TYPE REF TO cl_salv_node,</item>
        <item>* lv_hierlevel TYPE i.</item>
        <item>** co_nodes-&gt;collapse_all( ).</item>
        <item>* &quot; esplode fino a livello</item>
        <item>* LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt; WHERE level &lt; iv_until.</item>
        <item>* TRY.</item>
        <item>* lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item>* lo_node-&gt;expand( ).</item>
        <item>* CATCH cx_root.</item>
        <item>* ENDTRY.</item>
        <item>* ENDLOOP.</item>
        <item>* LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt; WHERE level &gt;= iv_until.</item>
        <item>* TRY.</item>
        <item>* lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item>* lo_node-&gt;collapse( ).</item>
        <item>* CATCH cx_root.</item>
        <item>* ENDTRY.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDIF. &quot;IF ( iv_init = abap_false ).</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SET_TREE_NODES>
      <SET_TREE_NODES_NEW>
        <item> METHOD set_tree_nodes_new.</item>
        <item> DATA: ls_data TYPE ty_s_tree_data,</item>
        <item> ls_hier TYPE ty_s_tree_hier,</item>
        <item> ls_hier_2 TYPE ty_s_tree_hier,</item>
        <item> lv_key TYPE salv_de_node_key,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_root_node TYPE REF TO cl_salv_node,</item>
        <item> lv_text TYPE lvc_value,</item>
        <item> lv_index TYPE i.</item>
        <item/>
        <item> FIELD-SYMBOLS: &lt;fs_hier&gt; TYPE ty_s_tree_hier.</item>
        <item> co_nodes = co_tree-&gt;get_nodes( ).</item>
        <item/>
        <item> gv_tree_current_level = iv_until.</item>
        <item/>
        <item> READ TABLE ct_hier ASSIGNING &lt;fs_hier&gt; WITH KEY parent = &apos;&apos;.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* Add the node as root</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> lo_node = co_nodes-&gt;add_node( related_node = &apos;&apos;</item>
        <item> relationship = if_salv_c_node_rela</item>
        <item>* lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_a ).</item>
        <item> lo_root_node = lo_node.</item>
        <item> ELSE.</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item/>
        <item/>
        <item> IF ( iv_init = abap_true ).</item>
        <item>* Save the ALV internal key</item>
        <item> &lt;fs_hier&gt;-key = lo_node-&gt;get_key( ).</item>
        <item/>
        <item>* Add the data of the tree</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-index.</item>
        <item> ls_data-key = &lt;fs_hier&gt;-key.</item>
        <item> MODIFY ct_data FROM ls_data INDEX sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> &quot; calcola quantit√† diba</item>
        <item> DATA: lv_qta_diba TYPE menge_d.</item>
        <item> lv_qta_diba = 1.</item>
        <item> ls_data-qta_diba = ls_data-menge.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_2) WITH KEY node =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data_parent) WITH KEY key =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_qta_diba = ls_data_parent-qta_diba.</item>
        <item> ENDIF.</item>
        <item> IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY parentn</item>
        <item> childna</item>
        <item> counter</item>
        <item> del</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_data-qta_diba = lv_qta_diba * ls_data-menge.</item>
        <item> IF ( NOT lv_index IS INITIAL ).</item>
        <item> MODIFY gt_tree_data FROM ls_data INDEX lv_index TRANSPORTI</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> lo_node-&gt;set_data_row( ls_data ).</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier2) WITH KEY node = &lt;fs_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data WITH KEY key = ls_hier2-key</item>
        <item> azione = &apos;D&apos; TRANSPORTING NO FI</item>
        <item> ENDIF.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_negativ</item>
        <item> ELSE.</item>
        <item> CASE ls_data-azione.</item>
        <item> WHEN &apos;I&apos; .</item>
        <item> IF ( ls_data-elaborato = abap_false ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_p</item>
        <item> ELSE.</item>
        <item> lo_node-&gt;set_row_style( 0 ).</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;D&apos;.</item>
        <item> IF ( ls_data-elaborato = abap_false OR ls_data-mod_succ = &apos;D</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_n</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;U&apos;.</item>
        <item> IF ( ls_data-elaborato = abap_false ).</item>
        <item>* lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_p</item>
        <item> ELSE.</item>
        <item>* lo_node-&gt;set_row_style( 0 ).</item>
        <item> lo_node-&gt;set_row_style( 7 ). &quot;DP-09_11_2016</item>
        <item> ENDIF.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item> lv_text = ls_data-matnr.</item>
        <item> lo_node-&gt;set_text( lv_text ).</item>
        <item/>
        <item> add_tree_nodes( EXPORTING iv_init = iv_init</item>
        <item> iv_until = iv_until</item>
        <item> iv_parent = &lt;fs_hier&gt;-parent</item>
        <item> iv_node = &lt;fs_hier&gt;-node</item>
        <item> CHANGING cs_hier = &lt;fs_hier&gt;</item>
        <item> co_tree = co_tree</item>
        <item> co_nodes = co_nodes</item>
        <item> ct_hier = ct_hier</item>
        <item> ct_data = ct_data ).</item>
        <item> ENDIF.</item>
        <item/>
        <item> TRY.</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> lo_root_node-&gt;expand( ).</item>
        <item> ENDIF.</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item/>
        <item/>
        <item> IF ( iv_init = abap_false ).</item>
        <item> DATA: lo_parent TYPE REF TO cl_salv_node,</item>
        <item> lo_child TYPE REF TO cl_salv_node,</item>
        <item> lv_hierlevel TYPE i.</item>
        <item> co_nodes-&gt;collapse_all( ).</item>
        <item> &quot; esplode fino a livello</item>
        <item> LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt; WHERE level &lt; iv_until.</item>
        <item> TRY.</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> lo_node-&gt;expand( ).</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SET_TREE_NODES_NEW>
      <SET_TREE_NODES_OLD>
        <item> METHOD set_tree_nodes_old.</item>
        <item> DATA: ls_data TYPE ty_s_tree_data,</item>
        <item> ls_hier TYPE ty_s_tree_hier,</item>
        <item> ls_hier_2 TYPE ty_s_tree_hier,</item>
        <item> lv_key TYPE salv_de_node_key,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_root_node TYPE REF TO cl_salv_node,</item>
        <item> lv_text TYPE lvc_value,</item>
        <item> lv_index TYPE i.</item>
        <item/>
        <item> FIELD-SYMBOLS: &lt;fs_hier&gt; TYPE ty_s_tree_hier.</item>
        <item> co_nodes = co_tree-&gt;get_nodes( ).</item>
        <item/>
        <item> gv_tree_current_level = iv_until.</item>
        <item/>
        <item>* Refresh lt_expand.</item>
        <item/>
        <item> &quot;Tonolli_G - Start Ins</item>
        <item> DATA: l_ct_hier TYPE ty_s_tree_hier.</item>
        <item> DATA: ltabix1 TYPE sy-tabix. &quot;SY-TABIX in ct_hier del LOOP princip</item>
        <item> DATA: ltabix2 TYPE sy-tabix. &quot;SY-TABIX in ct_hier del LOOP seconda</item>
        <item> DATA: ltabix3 TYPE sy-tabix. &quot;Contatore di quante volte il codice</item>
        <item> DATA: ltabix4 TYPE sy-tabix. &quot;SY-TABIX in ct_hier del record padre</item>
        <item> CLEAR: l_ct_hier, ltabix1, ltabix2, ltabix3, ltabix4.</item>
        <item> &quot;Tonolli_G - End Ins</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt;. &quot;LOOP PRINCIPALE</item>
        <item> CLEAR: ls_data.</item>
        <item/>
        <item>* Tonolli_G - Start Ins</item>
        <item>* Bisogna discriminare se il codice √® presente una sola volta o pi√π</item>
        <item>* tenendo presente che la tabella ct_hier esplode la BOM prima in pr</item>
        <item>* vedi ad es. la FM CS_BOM_EXPL_MAT_V2</item>
        <item> CLEAR: ltabix1, ltabix2, ltabix3, ltabix4. &quot;Tonolli_G - Ins</item>
        <item> ltabix1 = sy-tabix.</item>
        <item> IF ltabix1 &gt; 1.</item>
        <item>* Stiamo elaborando i nodi sotto il ROOTNAME, cio√® ad es. sotto il</item>
        <item>* se il codice √® presente una e una sola volta oppure se √® present</item>
        <item>* quanle sia il record che contiene il padre</item>
        <item> LOOP AT ct_hier INTO l_ct_hier. &quot;LOOP SECONDARIO</item>
        <item> ltabix2 = sy-tabix.</item>
        <item> IF l_ct_hier-node = &lt;fs_hier&gt;-parent.</item>
        <item>* Verifica di quante volte il componente √® presente in BOM</item>
        <item> ltabix3 = ltabix3 + 1.</item>
        <item> ENDIF.</item>
        <item> IF l_ct_hier-node = &lt;fs_hier&gt;-parent AND ltabix2 = ( ltabix1 -</item>
        <item>* Memorizzazione del livello immediatamente precedente in cui</item>
        <item> ltabix4 = ltabix2.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ltabix3 = 1.</item>
        <item>* Il componente √® presente una sola volta</item>
        <item> CLEAR: l_ct_hier.</item>
        <item> ELSEIF ltabix4 &gt; 0.</item>
        <item>* Il componente √® presente pi√π volte</item>
        <item> READ TABLE ct_hier INDEX ltabix4 INTO l_ct_hier.</item>
        <item> ELSE.</item>
        <item>* Gestione di eventuale eccezione</item>
        <item> CLEAR: l_ct_hier.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ltabix1 &gt; 1.</item>
        <item>* Tonolli_G - End Ins</item>
        <item/>
        <item>***** START ************************************************************</item>
        <item>* Aggiunge come ultimo nodo vedi metodo add_node classe co_nodes</item>
        <item> IF &lt;fs_hier&gt;-parent = &apos;&apos;.</item>
        <item>* Add the node as root</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> lo_node = co_nodes-&gt;add_node( related_node = &apos;&apos;</item>
        <item> relationship = if_salv_c_node_re</item>
        <item>* lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_a ).</item>
        <item> lo_root_node = lo_node.</item>
        <item> ELSE.</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item>* Read the ALV key of parent node and add as a child</item>
        <item> IF l_ct_hier-parent IS INITIAL. &quot;Tonolli_G - Ins</item>
        <item> READ TABLE ct_hier INTO ls_hier WITH KEY node = &lt;fs_hier&gt;-pa</item>
        <item>* Tonolli_G - Start Ins</item>
        <item> ELSE.</item>
        <item> READ TABLE ct_hier INTO ls_hier WITH KEY node = &lt;fs_hier&gt;-pa</item>
        <item> parent = l_ct_hier-pa</item>
        <item> ENDIF.</item>
        <item>* Tonolli_G - End Ins</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> lo_node = co_nodes-&gt;add_node( related_node = ls_hier-key</item>
        <item> relationship = if_salv_c_node_re</item>
        <item> ELSE.</item>
        <item>* lo_node = co_nodes-&gt;get_node( ls_hier-key ).</item>
        <item>* READ TABLE ct_data INTO ls_data WITH KEY ref = ls_hier-ref.</item>
        <item>** READ TABLE ct_data INTO ls_data WITH KEY matnr = &lt;fs_hier&gt;-</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_index = sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF &lt;fs_hier&gt;-parent = &apos;&apos;.</item>
        <item>***** END **************************************************************</item>
        <item/>
        <item> IF ( iv_init = abap_true ).</item>
        <item>* Save the ALV internal key</item>
        <item> &lt;fs_hier&gt;-key = lo_node-&gt;get_key( ).</item>
        <item/>
        <item>* Add the data of the tree</item>
        <item> READ TABLE ct_data INTO ls_data WITH KEY ref = &lt;fs_hier&gt;-ref.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;lv_index = sy-index. &quot;Tonolli_G - Del</item>
        <item> lv_index = sy-tabix. &quot;Tonolli_G - Ins</item>
        <item> ls_data-key = &lt;fs_hier&gt;-key.</item>
        <item> MODIFY ct_data FROM ls_data INDEX sy-tabix.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( iv_init = abap_true ).</item>
        <item/>
        <item>***** START ************************************************************</item>
        <item>* Calcola quantit√† BOM, vedi metodo set_data_row classe lo_node</item>
        <item> DATA: lv_qta_diba TYPE menge_d.</item>
        <item> lv_qta_diba = 1.</item>
        <item> ls_data-qta_diba = ls_data-menge.</item>
        <item/>
        <item> IF l_ct_hier-parent IS INITIAL. &quot;Tonolli_G - Ins</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_2) WITH KEY node</item>
        <item>* Tonolli_G - Start Ins</item>
        <item> ELSE.</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier_2 WITH KEY node = &lt;f</item>
        <item> parent = l_</item>
        <item> ENDIF.</item>
        <item>* Tonolli_G - End Ins</item>
        <item/>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data_parent) WITH KEY key =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_qta_diba = ls_data_parent-qta_diba.</item>
        <item> ENDIF.</item>
        <item> IF ( NOT ls_tree_hier_2-parent IS INITIAL ).</item>
        <item> READ TABLE gt_data_bom INTO DATA(ls_data_bom) WITH KEY parentn</item>
        <item> childna</item>
        <item> counter</item>
        <item> del</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> ls_data-qta_diba = lv_qta_diba * ls_data-menge. &quot;&lt;------</item>
        <item> IF ( NOT lv_index IS INITIAL ).</item>
        <item> MODIFY gt_tree_data FROM ls_data INDEX lv_index TRANSPORTI</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( sy-subrc = 0 ).</item>
        <item/>
        <item> lo_node-&gt;set_data_row( ls_data ). &quot;&lt;------</item>
        <item>***** END **************************************************************</item>
        <item/>
        <item> IF l_ct_hier-parent IS INITIAL. &quot;Tonolli_G - Ins</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier2) WITH KEY node = &lt;f</item>
        <item>* Tonolli_G - Start Ins</item>
        <item> ELSE.</item>
        <item> READ TABLE gt_tree_hier INTO ls_hier2 WITH KEY node = &lt;fs_hier</item>
        <item> parent = l_ct_hie</item>
        <item> ENDIF.</item>
        <item>* Tonolli_G - End Ins</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data WITH KEY key = ls_hier2-key</item>
        <item> azione = &apos;D&apos; TRANSPORTING NO FI</item>
        <item> ENDIF.</item>
        <item/>
        <item>***** START ************************************************************</item>
        <item> &quot;Gestione colore sulla riga vedi il metodo set_row_style della cla</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_negativ</item>
        <item> ELSE.</item>
        <item> CASE ls_data-azione.</item>
        <item> WHEN &apos;I&apos; .</item>
        <item> IF ( ls_data-elaborato = abap_false ).</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_p</item>
        <item> ELSE.</item>
        <item> lo_node-&gt;set_row_style( 0 ). &quot; Colore 0 = xxx</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;D&apos;.</item>
        <item> IF ( ls_data-elaborato = abap_false OR ls_data-mod_succ = &apos;D</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_n</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;U&apos;.</item>
        <item> IF ( ls_data-elaborato = abap_false ).</item>
        <item>* lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_c</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_p</item>
        <item> ELSE.</item>
        <item> lo_node-&gt;set_row_style( 7 ). &quot;DP-09_11_2016 Ins. Colore 7</item>
        <item> ENDIF.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item>***** END **************************************************************</item>
        <item/>
        <item> lv_text = ls_data-matnr.</item>
        <item> lo_node-&gt;set_text( lv_text ).</item>
        <item> ENDLOOP. &quot;LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt;.</item>
        <item/>
        <item> TRY.</item>
        <item> IF ( iv_init = abap_true ).</item>
        <item> lo_root_node-&gt;expand( ).</item>
        <item> ENDIF.</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> IF ( iv_init = abap_false ).</item>
        <item> DATA: lo_parent TYPE REF TO cl_salv_node,</item>
        <item> lo_child TYPE REF TO cl_salv_node,</item>
        <item> lv_hierlevel TYPE i.</item>
        <item> co_nodes-&gt;collapse_all( ).</item>
        <item> &quot; esplode fino a livello</item>
        <item> LOOP AT ct_hier ASSIGNING &lt;fs_hier&gt; WHERE level &lt; iv_until.</item>
        <item> TRY.</item>
        <item> lo_node = co_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item> lo_node-&gt;expand( ).</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF. &quot;IF ( iv_init = abap_false ).</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SET_TREE_NODES_OLD>
      <SORT_TREE_TABLE>
        <item> METHOD sort_tree_table.</item>
        <item> &quot;Ricalcola campo sort</item>
        <item> DATA: lv_sort TYPE i.</item>
        <item> SORT ct_albero BY sort.</item>
        <item> lv_sort = c_inc_sort.</item>
        <item> LOOP AT ct_albero INTO DATA(ls_albero).</item>
        <item> ls_albero-sort = lv_sort.</item>
        <item> MODIFY ct_albero FROM ls_albero.</item>
        <item> ADD c_inc_sort TO lv_sort.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> SORT ct_albero BY sort.</item>
        <item/>
        <item> MODIFY zpp_albero FROM TABLE ct_albero.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDMETHOD.</item>
      </SORT_TREE_TABLE>
      <STORNO_ACCETTATO>
        <item> METHOD storno_accettato.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item>* ls_tree_data TYPE ty_s_tree_data,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv,</item>
        <item> lt_alberob TYPE ty_t_albero,</item>
        <item> ls_alberob TYPE ty_s_albero.</item>
        <item/>
        <item> gv_action = iv_action.</item>
        <item>* REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item>* IF ( it_nodes[] IS INITIAL ).</item>
        <item>* MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item>* RETURN.</item>
        <item>* ENDIF.</item>
        <item> BREAK kosmedev.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) INDEX 1.</item>
        <item> SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_alberob FROM zpp_albe</item>
        <item> WHERE rootnam</item>
        <item> LOOP AT lt_alberob INTO ls_alberob.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_tre</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible =</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </STORNO_ACCETTATO>
      <TECO_ODP>
        <item> METHOD teco_odp.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) INDEX lv_index.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-aufnr IS NOT INITIAL AND</item>
        <item> ls_tree_data-beskz = &apos;E&apos; AND</item>
        <item> ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;AUFNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </TECO_ODP>
      <TREE_EXPAND_UNTIL>
        <item> METHOD tree_expand_until.</item>
        <item> DATA: lt_tree_data_sel TYPE ty_t_tree_data_sel,</item>
        <item> ls_tree_data_sel TYPE ty_s_tree_data_sel.</item>
        <item> CLEAR ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = gv_tree_current_level.</item>
        <item> APPEND ls_tree_data_sel TO lt_tree_data_sel.</item>
        <item>* Commentata la seguente linea altrimenti si perde &quot;per sempre&quot; (serve</item>
        <item> &quot;add_dialog_exclude( &apos;SAVE&apos; ). &quot;Tonolli_G - DEL - 26/05/2017</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LEVEL&apos; visible = abap_tru</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = lt_tree_data_sel ).</item>
        <item> READ TABLE lt_tree_data_sel INTO ls_tree_data_sel INDEX 1.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( NOT ls_tree_data_sel-level IS INITIAL ).</item>
        <item>** tree_refresh( EXPORTING iv_force_refresh = abap_true</item>
        <item>** iv_until = ls_tree_data_sel-le</item>
        <item>* FIELD-SYMBOLS: &lt;fs_hier&gt; TYPE ty_s_tree_hier.</item>
        <item>* DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item>* lo_node TYPE REF TO cl_salv_node,</item>
        <item>* lv_hierlevel TYPE i.</item>
        <item>*</item>
        <item>* lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item>** co_nodes-&gt;collapse_all( ).</item>
        <item>* &quot; esplode fino a livello</item>
        <item>* LOOP AT gt_tree_hier ASSIGNING &lt;fs_hier&gt; WHERE level &lt; gv_tree_</item>
        <item>* TRY.</item>
        <item>* lo_node = lo_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item>* lo_node-&gt;expand( ).</item>
        <item>* CATCH cx_root.</item>
        <item>* ENDTRY.</item>
        <item>* ENDLOOP.</item>
        <item>* LOOP AT gt_tree_hier ASSIGNING &lt;fs_hier&gt; WHERE level &gt;= gv_tree</item>
        <item>* TRY.</item>
        <item>* lo_node = lo_nodes-&gt;get_node( &lt;fs_hier&gt;-key ).</item>
        <item>* lo_node-&gt;collapse( ).</item>
        <item>* CATCH cx_root.</item>
        <item>* ENDTRY.</item>
        <item>* ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> gv_tree_current_level = ls_tree_data_sel-level .</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </TREE_EXPAND_UNTIL>
      <TREE_REFRESH>
        <item> METHOD tree_refresh.</item>
        <item> IF ( gv_to_be_refresh = abap_true OR</item>
        <item> iv_force_refresh = abap_true ).</item>
        <item> DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_selections TYPE REF TO cl_salv_selections_tree,</item>
        <item> lt_nodes TYPE salv_t_nodes,</item>
        <item> lv_tabix TYPE i,</item>
        <item> lv_until TYPE i.</item>
        <item/>
        <item> IF ( iv_until IS INITIAL ).</item>
        <item> lv_until = gv_tree_current_level.</item>
        <item> ELSE.</item>
        <item> lv_until = iv_until.</item>
        <item> ENDIF.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item>*... ¬ß5.4 replace the complete data</item>
        <item> lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item/>
        <item> TRY.</item>
        <item> DATA: lo_node TYPE REF TO cl_salv_node.</item>
        <item/>
        <item> IF ( iv_force_refresh = abap_true ).</item>
        <item> DATA: lt_tree_data_old TYPE ty_t_tree_data.</item>
        <item> lt_tree_data_old[] = gt_tree_data[].</item>
        <item>* search_changes( iv_check = abap_false</item>
        <item>* iv_rootname = gs_current_alv_data-rootname</item>
        <item>* break kosmedev.</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data).</item>
        <item> lv_tabix = sy-tabix.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> READ TABLE lt_tree_data_old INTO DATA(ls_tree_data_old) WI</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data_old = ls_tree_data ).</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data )</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix.</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>** get_data_bom( iv_tipofile = gs_current_alv_data-tipofile</item>
        <item>** iv_rootname = gs_current_alv_data-rootname )</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY pa</item>
        <item>*** READ TABLE gt_data_bom INTO DATA(ls_data_bom_first) WITH</item>
        <item>** READ TABLE gt_data_bom INTO DATA(ls_data_bom_first) INDEX</item>
        <item>* LOOP AT gt_data_bom INTO DATA(ls_data_bom_first).</item>
        <item>* IF ( ls_data_bom_first-rootname = ls_data_bom_first-paren</item>
        <item>* EXIT.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP.</item>
        <item> ENDIF.</item>
        <item/>
        <item>** tree_show( CHANGING ct_hier = gt_tree_hier</item>
        <item>** ct_data = gt_tree_data ).</item>
        <item>* set_tree_nodes( EXPORTING iv_until = lv_until</item>
        <item>** set_tree_nodes_new( EXPORTING iv_until = lv_until</item>
        <item>* CHANGING co_tree = go_tree</item>
        <item>* co_nodes = lo_nodes</item>
        <item>* ct_hier = gt_tree_hier</item>
        <item>* ct_data = gt_tree_data ).</item>
        <item> CATCH cx_salv_error.</item>
        <item> ENDTRY.</item>
        <item> gv_to_be_refresh = abap_false.</item>
        <item/>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </TREE_REFRESH>
      <TREE_SHOW>
        <item> METHOD tree_show.</item>
        <item> DATA:</item>
        <item> lt_empty TYPE ty_t_tree_data,</item>
        <item> ls_data TYPE ty_s_tree_data,</item>
        <item> ls_hier TYPE ty_s_tree_hier,</item>
        <item> lv_key TYPE salv_de_node_key,</item>
        <item> lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_top_node TYPE REF TO cl_salv_node,</item>
        <item> lo_columns TYPE REF TO cl_salv_columns_tree,</item>
        <item> lo_column TYPE REF TO cl_salv_column_tree,</item>
        <item> lo_tree_settings TYPE REF TO cl_salv_tree_settings,</item>
        <item> lv_text TYPE lvc_value.</item>
        <item/>
        <item>* FIELD-SYMBOLS: &lt;fs_hier&gt; TYPE ty_s_tree_hier.</item>
        <item>* IF ( go_tree IS BOUND ).</item>
        <item>* FREE go_tree.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> TRY.</item>
        <item>* 1. Create instance with an empty table: go_tree Type Ref To CL_S</item>
        <item> cl_salv_tree=&gt;factory( IMPORTING r_salv_tree = go_tree</item>
        <item> CHANGING t_table = lt_empty ).</item>
        <item/>
        <item>* DATA: lt_fcat TYPE kkblo_t_fieldcat.</item>
        <item>* lt_fcat = cl_salv_controller_metadata=&gt;get_lvc_fieldcatalog(</item>
        <item>* r_columns = go_tree-&gt;get_columns( ) &quot; ALV Fi</item>
        <item>* r_aggregations = go_tree-&gt;get_aggregations( ) ).&quot;</item>
        <item>* LOOP AT lt_fcat INTO DATA(ls_fcat) WHERE fieldname = &apos;TYPE&apos;.</item>
        <item>* ls_fcat-ref_field = &apos;TIPOFILE&apos;.</item>
        <item>* ls_fcat-ref_table = &apos;ZTBC000001&apos;.</item>
        <item>* MODIFY lt_fcat FROM ls_fcat.</item>
        <item>* ENDLOOP.</item>
        <item>* cl_salv_controller_metadata=&gt;set_lvc_fieldcatalog( EXPORTING t_</item>
        <item>* r_</item>
        <item>* r_</item>
        <item/>
        <item>************************************************************************</item>
        <item>* Costruzione dell&apos;Albero BOM via get_nodes() e add_node()</item>
        <item> set_tree_nodes( EXPORTING iv_init = abap_true</item>
        <item> is_sel = gs_sel &quot;Tonolli_G - 17.</item>
        <item>* set_tree_nodes_new( EXPORTING iv_init = abap_true</item>
        <item> CHANGING co_tree = go_tree</item>
        <item> co_nodes = lo_nodes</item>
        <item> ct_hier = ct_hier</item>
        <item> ct_data = ct_data ).</item>
        <item>************************************************************************</item>
        <item/>
        <item/>
        <item> DATA: ls_ddic_ref TYPE salv_s_ddic_reference.</item>
        <item/>
        <item>* Do some final format tasks</item>
        <item> lo_columns = go_tree-&gt;get_columns( ).</item>
        <item> lo_columns-&gt;set_optimize( abap_true ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;MATNR&apos; ).</item>
        <item> lo_column-&gt;set_visible( abap_false ).</item>
        <item>* lo_column ?= lo_columns-&gt;get_column( &apos;MAKTX&apos; ).</item>
        <item>* lo_column-&gt;set_visible( abap_false ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;LIGHT&apos; ).</item>
        <item> lo_column-&gt;set_visible( abap_false ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;COLOR&apos; ).</item>
        <item> lo_column-&gt;set_visible( abap_false ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;ELABORATO&apos; ).</item>
        <item> lo_column-&gt;set_visible( abap_false ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;MENGE&apos; ).</item>
        <item> lo_column-&gt;set_quantity_column( &apos;MEINS&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;QTA_DIBA&apos; ).</item>
        <item> lo_column-&gt;set_quantity_column( &apos;MEINS&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;KEY&apos; ).</item>
        <item> lo_column-&gt;set_visible( abap_false ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;BESKZ&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;T&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;T&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;T&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;SOBSL&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;AP&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;AP&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;AP&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;MEINS&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;UM&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;UM&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;UM&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;DZEIT&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;TPI&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;TPI&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;TPI&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;PLIFZ&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;TCP&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;TCP&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;TCP&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;WEBAZ&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;EEM&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;EEM&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;EEM&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;PLNNR&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;Pres.ciclo&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;Presenza ciclo&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;Presenza ciclo&apos; ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;F_DIBA&apos; ).</item>
        <item> lo_column-&gt;set_alignment( if_salv_c_alignment=&gt;centered ).</item>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;ITSOB&apos; ).</item>
        <item>* lo_column-&gt;set_alignment( if_salv_c_alignment=&gt;centered ).</item>
        <item> lo_column-&gt;set_short_text( &apos;Ph in BOM&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;Ph in BOM&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;Ph in BOM&apos; ).</item>
        <item/>
        <item> lo_column ?= lo_columns-&gt;get_column( &apos;QTA_DIBA&apos; ).</item>
        <item> lo_column-&gt;set_short_text( &apos;Qt√† diba&apos; ).</item>
        <item> lo_column-&gt;set_medium_text( &apos;Qt√† diba&apos; ).</item>
        <item> lo_column-&gt;set_long_text( &apos;Qt√† diba&apos; ).</item>
        <item/>
        <item> lo_column-&gt;set_ddic_reference( value = ls_ddic_ref ).</item>
        <item/>
        <item> lo_tree_settings = go_tree-&gt;get_tree_settings( ).</item>
        <item> lo_tree_settings-&gt;set_hierarchy_header( &apos;Materiale&apos; ).</item>
        <item/>
        <item>* lo_nodes-&gt;expand_all( ).</item>
        <item>* lo_nodes-&gt;collapse_all( ).</item>
        <item>* break kosmedev.</item>
        <item>** lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item>* lo_top_node = lo_nodes-&gt;get_top_node( ).</item>
        <item>* lo_top_node-&gt;expand( ).</item>
        <item/>
        <item/>
        <item> CATCH cx_salv_no_new_data_allowed cx_salv_error.</item>
        <item> EXIT.</item>
        <item> ENDTRY.</item>
        <item/>
        <item> DATA: lo_functions TYPE REF TO cl_salv_functions_tree,</item>
        <item> lo_sel TYPE REF TO cl_salv_selections_tree,</item>
        <item> lo_selections TYPE REF TO cl_salv_selections_tree,</item>
        <item> lo_events TYPE REF TO cl_salv_events_tree,</item>
        <item> lo_event_handler TYPE REF TO lcl_handle_tree_events.</item>
        <item/>
        <item> DATA: go_grid TYPE REF TO cl_salv_form_layout_grid,</item>
        <item> go_label TYPE REF TO cl_salv_form_label,</item>
        <item> go_text TYPE REF TO cl_salv_form_text,</item>
        <item> go_header TYPE REF TO cl_salv_form_element.</item>
        <item/>
        <item> lo_functions = go_tree-&gt;get_functions( ).</item>
        <item> lo_functions-&gt;set_find( abap_true ).</item>
        <item/>
        <item> lo_sel = go_tree-&gt;get_selections( ).</item>
        <item>* lo_sel-&gt;.</item>
        <item>* lo_sel-&gt;set_selection_nodes( if_salv_c_selection_nodes=&gt;single ).</item>
        <item/>
        <item> lo_events = go_tree-&gt;get_event( ).</item>
        <item> lo_event_handler = NEW #( io_sender = me</item>
        <item> io_sel = lo_sel</item>
        <item> io_tree = go_tree ).</item>
        <item> SET HANDLER lo_event_handler-&gt;on_user_command FOR lo_events.</item>
        <item/>
        <item> CASE gv_tipo_anticipo.</item>
        <item> WHEN c_anticipo.</item>
        <item> go_tree-&gt;set_screen_status( pfstatus = gv_pfstatus_tree_2</item>
        <item> report = me-&gt;get_program( )</item>
        <item> set_functions = go_tree-&gt;c_function</item>
        <item> WHEN c_produzione.</item>
        <item> go_tree-&gt;set_screen_status( pfstatus = gv_pfstatus_tree</item>
        <item> report = me-&gt;get_program( )</item>
        <item> set_functions = go_tree-&gt;c_function</item>
        <item> ENDCASE.</item>
        <item/>
        <item>* esclusione tasti in funzione della tabella ZPP_PDM_MON_AUTH</item>
        <item> exclude_buttons( CHANGING co_functions = lo_functions ).</item>
        <item/>
        <item> IF ( go_grid IS INITIAL ).</item>
        <item> CREATE OBJECT go_grid.</item>
        <item> ENDIF.</item>
        <item/>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_node) WITH KEY key = 1.</item>
        <item> CLEAR: gv_pspnr, gv_posid.</item>
        <item>* SELECT SINGLE pspnr INTO gv_pspnr FROM prps WHERE equnr = ls_node-n</item>
        <item>* zcl_bc_conversion_exit=&gt;conversion_output( EXPORTING iv_field = gv_</item>
        <item>* CHANGING cv_field = gv_p</item>
        <item> gv_posid = gs_current_alv_data-posid.</item>
        <item> zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = gv_po</item>
        <item> CHANGING cv_field = gv_psp</item>
        <item/>
        <item> go_label = go_grid-&gt;create_label(</item>
        <item> row = 1</item>
        <item> column = 1</item>
        <item> text = &apos;Rootname:&apos; ).</item>
        <item> go_text = go_grid-&gt;create_text(</item>
        <item> row = 1</item>
        <item> column = 2</item>
        <item> text = ls_node-node ).</item>
        <item> go_label-&gt;set_label_for( go_text ).</item>
        <item/>
        <item> go_label = go_grid-&gt;create_label(</item>
        <item> row = 2</item>
        <item> column = 1</item>
        <item> text = &apos;Wbs:&apos; ).</item>
        <item> go_text = go_grid-&gt;create_text(</item>
        <item> row = 2</item>
        <item> column = 2</item>
        <item> text = gs_current_alv_data-posid ).</item>
        <item> go_label-&gt;set_label_for( go_text ).</item>
        <item>*------</item>
        <item> go_label = go_grid-&gt;create_label(</item>
        <item> row = 2</item>
        <item> column = 3</item>
        <item> text = &apos;Commessa:&apos; ).</item>
        <item> go_text = go_grid-&gt;create_text(</item>
        <item> row = 2</item>
        <item> column = 4</item>
        <item> text = gs_current_alv_data-psphi ).</item>
        <item> go_label-&gt;set_label_for( go_text ).</item>
        <item/>
        <item> go_label = go_grid-&gt;create_label(</item>
        <item> row = 2</item>
        <item> column = 5</item>
        <item> text = &apos;Descrizione:&apos; ).</item>
        <item> go_text = go_grid-&gt;create_text(</item>
        <item> row = 2</item>
        <item> column = 6</item>
        <item> text = gs_current_alv_data-post1 ).</item>
        <item> go_label-&gt;set_label_for( go_text ).</item>
        <item/>
        <item>*------</item>
        <item> go_label = go_grid-&gt;create_label(</item>
        <item> row = 2</item>
        <item> column = 7</item>
        <item> text = &apos;Ordine:&apos; ).</item>
        <item> go_text = go_grid-&gt;create_text(</item>
        <item> row = 2</item>
        <item> column = 8</item>
        <item> text = gs_current_alv_data-vbeln ).</item>
        <item> go_label-&gt;set_label_for( go_text ).</item>
        <item/>
        <item> go_label = go_grid-&gt;create_label(</item>
        <item> row = 2</item>
        <item> column = 9</item>
        <item> text = &apos;Posizione:&apos; ).</item>
        <item> go_text = go_grid-&gt;create_text(</item>
        <item> row = 2</item>
        <item> column = 10</item>
        <item> text = gs_current_alv_data-posnr ).</item>
        <item> go_label-&gt;set_label_for( go_text ).</item>
        <item/>
        <item>* go_tree-&gt;set_top_of_list( value = go_header ).</item>
        <item> go_tree-&gt;set_top_of_list( go_grid ).</item>
        <item/>
        <item>* data: lr_functions type ref to cl_salv_functions_tree.</item>
        <item>* data: l_text1 type string,</item>
        <item>* l_text2 type string,</item>
        <item>* l_icon type string.</item>
        <item>*</item>
        <item>* try.</item>
        <item>* l_text1 = text-b03.</item>
        <item>* l_text2 = text-b04.</item>
        <item>* l_icon = icon_insert_relation.</item>
        <item>*</item>
        <item>* lr_functions-&gt;add_function(</item>
        <item>* name = &apos;&amp;ADDNODE&apos;</item>
        <item>* icon = l_icon</item>
        <item>* text = l_text1</item>
        <item>* tooltip = l_text2</item>
        <item>* position = if_salv_c_function_position=&gt;right_of_salv_functions</item>
        <item>* catch cx_salv_existing cx_salv_wrong_call.</item>
        <item>* endtry.</item>
        <item/>
        <item> DATA: lo_layout TYPE REF TO cl_salv_layout,</item>
        <item> ls_layout TYPE salv_s_layout_key.</item>
        <item> CLEAR: ls_layout.</item>
        <item> ls_layout-report = me-&gt;get_program( ).</item>
        <item> lo_layout = go_tree-&gt;get_layout( ).</item>
        <item> lo_layout-&gt;set_save_restriction( if_salv_c_layout=&gt;restrict_none ).</item>
        <item> lo_layout-&gt;set_key( ls_layout ).</item>
        <item> IF ( NOT gs_sel-p_layotr IS INITIAL ).</item>
        <item> lo_layout-&gt;set_initial_layout( gs_sel-p_layotr ).</item>
        <item> ENDIF.</item>
        <item/>
        <item/>
        <item>************************************************************************</item>
        <item> go_tree-&gt;display( ).</item>
        <item>************************************************************************</item>
        <item/>
        <item/>
        <item> ENDMETHOD.</item>
      </TREE_SHOW>
      <MODIFY_SCREEN>
        <item> METHOD modify_screen.</item>
        <item> create_selections( ).</item>
        <item/>
        <item>* LOOP AT SCREEN INTO DATA(ls_screen).</item>
        <item>* IF ( ls_screen-group1 = &apos;MAT&apos; ).</item>
        <item>* CASE abap_true.</item>
        <item>* WHEN gs_sel-p_mat.</item>
        <item>* IF ( gs_sel-p_err = abap_false ).</item>
        <item>* ls_screen-active = 1.</item>
        <item>* ELSE.</item>
        <item>* ls_screen-active = 0.</item>
        <item>* ENDIF.</item>
        <item>* WHEN OTHERS.</item>
        <item>* ls_screen-active = 0.</item>
        <item>* ENDCASE.</item>
        <item>* MODIFY screen FROM ls_screen.</item>
        <item>* ENDIF.</item>
        <item>* IF ( ls_screen-group1 = &apos;BOM&apos; ).</item>
        <item>* CASE abap_true.</item>
        <item>* WHEN gs_sel-p_bom.</item>
        <item>* IF ( gs_sel-p_err = abap_false ).</item>
        <item>* ls_screen-active = 1.</item>
        <item>* ELSE.</item>
        <item>* ls_screen-active = 0.</item>
        <item>* ENDIF.</item>
        <item>* WHEN OTHERS.</item>
        <item>* ls_screen-active = 0.</item>
        <item>* ENDCASE.</item>
        <item>* MODIFY screen FROM ls_screen.</item>
        <item>* ENDIF.</item>
        <item>* IF ( ls_screen-group1 = &apos;ERR&apos; ).</item>
        <item>* CASE abap_true.</item>
        <item>* WHEN gs_sel-p_err.</item>
        <item>* ls_screen-active = 1.</item>
        <item>* WHEN OTHERS.</item>
        <item>* ls_screen-active = 0.</item>
        <item>* ENDCASE.</item>
        <item>* MODIFY screen FROM ls_screen.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP.</item>
        <item> ENDMETHOD.</item>
      </MODIFY_SCREEN>
      <ACCETTAZIONE_NOODP>
        <item> METHOD accettazione_noodp.</item>
        <item> DATA(lv_mod_attive) = iv_no_diba.</item>
        <item> DATA(lv_no_diba) = iv_no_diba.</item>
        <item> BREAK kosmedev.</item>
        <item/>
        <item>* Verifica integrit√† cio√® se l&apos;Albero BOM √® corrotto</item>
        <item> diff_branch_nodes( ).</item>
        <item/>
        <item> IF ( gv_wrong_tree = abap_true ).</item>
        <item>* MESSAGE i398(00) WITH &apos;Albero corrotto. Accettazione bloccata.&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item/>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> lv_no_diba = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* IF ( iv_no_diba = abap_false ).</item>
        <item> IF ( lv_no_diba = abap_false ).</item>
        <item> create_diba( iv_action = sy-ucomm</item>
        <item>* create_diba_2( iv_action = sy-ucomm</item>
        <item> iv_no_show_alv = iv_no_show_alv</item>
        <item> it_nodes = it_nodes ).</item>
        <item> ELSE.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item>* IF ( ls_tree_data-elaborato = abap_false OR ls_tree_data-mod_su</item>
        <item>* ls_tree_data-mod_succ = &apos;U&apos; ).</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel. &quot;&lt;------</item>
        <item>* ENDIF.</item>
        <item> select_branch( EXPORTING iv_elaborato = ls_tree_data-elaborato</item>
        <item> is_tree_data = ls_tree_data</item>
        <item> CHANGING ct_tree_data_sel = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> BREAK kosmedev.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item>* set_dialog_title().</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = ab</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = ab</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = ab</item>
        <item> ( fieldname = &apos;LOG&apos; visible = ab</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </ACCETTAZIONE_NOODP>
      <SAVE_ACCETTA_ANT_NOODP>
        <item> METHOD save_accetta_ant_noodp.</item>
        <item>* save_accettazione_noodp( ).</item>
        <item> save_accettazione_noodp_2( ).</item>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTA_ANT_NOODP>
      <SAVE_ACCETTA_ANT_PROD_NOODP>
        <item> METHOD save_accetta_ant_prod_noodp.</item>
        <item>* save_accettazione_noodp( ).</item>
        <item> save_accettazione_noodp_2( ).</item>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTA_ANT_PROD_NOODP>
      <ACCETTA_ANTICIPO_NOODP>
        <item> METHOD accetta_anticipo_noodp.</item>
        <item> accettazione_noodp( it_nodes = it_nodes</item>
        <item> iv_action = iv_action</item>
        <item> iv_no_show_alv = iv_no_show_alv ). &quot;ABAP_FALSE</item>
        <item> ENDMETHOD.</item>
      </ACCETTA_ANTICIPO_NOODP>
      <ACCETTA_LANCIO_PROD_NOODP>
        <item> METHOD accetta_lancio_prod_noodp.</item>
        <item> accettazione_noodp( iv_action = iv_action</item>
        <item> it_nodes = it_nodes</item>
        <item> iv_no_show_alv = iv_no_show_alv ).</item>
        <item> ENDMETHOD.</item>
      </ACCETTA_LANCIO_PROD_NOODP>
      <SAVE_ACCETTAZIONE_NOODP>
        <item> METHOD save_accettazione_noodp.</item>
        <item> DATA: lt_albero TYPE ty_t_albero,</item>
        <item> lt_alberob TYPE ty_t_albero,</item>
        <item> lt_tree_data_sel_old TYPE ty_t_tree_data_sel,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli.</item>
        <item> &quot;lt_nodes TYPE salv_t_nodes.</item>
        <item/>
        <item> DATA: lt_nodes TYPE salv_t_nodes,</item>
        <item> ls_nodes TYPE salv_s_nodes.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> DATA: lv_mod_attive TYPE abap_bool.</item>
        <item>* Solo in ripresa dati si dovr√† accettare tutto l&apos;Albero BOM arrivato</item>
        <item>* Tali accettazioni (eseguite in ripresa dati) non devono creare/modif</item>
        <item>* Quindi se abbiamo il flag attivo per l&apos;utente PP-KOSME allora i bott</item>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv_mod_attiv</item>
        <item> DATA: lv_key TYPE ty_s_tree_data_sel-key.</item>
        <item> CLEAR: lv_key.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_first).</item>
        <item>* CASE gv_tipo_anticipo.</item>
        <item>* WHEN c_anticipo.</item>
        <item>* IF ( NOT lv_key IS INITIAL ).</item>
        <item>** IF ( ls_tree_data_sel_first-level &gt; 1 ).</item>
        <item>* EXIT.</item>
        <item>* ENDIF.</item>
        <item>* WHEN c_produzione.</item>
        <item>* EXIT.</item>
        <item>* ENDCASE.</item>
        <item>* lv_key = ls_tree_data_sel_first-key.</item>
        <item> DATA(lv_tabix_1) = sy-tabix.</item>
        <item> IF ( lv_tabix_1 = 2 ). &quot;Il secondo record nella tabella pop-up</item>
        <item> CASE gv_tipo_anticipo. &quot;Tipo di file: Anticipo o Lancio produz</item>
        <item> WHEN c_anticipo. &quot;Acquisizione anticipo</item>
        <item> lv_key = ls_tree_data_sel_first-key.</item>
        <item> WHEN c_produzione. &quot;Acquisizione lancio di produzione</item>
        <item> lv_key = ls_tree_data_sel_first-key.</item>
        <item> ENDCASE.</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key</item>
        <item/>
        <item> &quot; Crea diba ------------------------------------------------------</item>
        <item>* create_diba( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item> save_diba( ).</item>
        <item/>
        <item>* Questo controllo √® stato introdotto perch√® a spot (e su un caso no</item>
        <item>* dalla tabella interna gt_tree_data_sel e a video la pop-up √® vuota</item>
        <item> CHECK NOT gt_tree_data_sel[] IS INITIAL.</item>
        <item/>
        <item> &quot; salva la tabella dei nodi selezionati della finestra di accettaz</item>
        <item> lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item/>
        <item> &quot; esegue solo se non ci sono errori nelle bom</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANSP</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WITH KEY light</item>
        <item> &quot;lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-k</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE key &gt;</item>
        <item> CLEAR: ls_nodes.</item>
        <item> ls_nodes-key = ls_tree_data_sel-key.</item>
        <item> APPEND ls_nodes TO lt_nodes.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* accettazione_noodp( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* iv_no_diba = abap_true &quot; non effettua</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item/>
        <item> &quot; Crea cicli ---------------------------------------------------</item>
        <item> create_cicli( iv_action = space</item>
        <item> iv_no_show_alv = abap_true</item>
        <item> it_nodes = lt_nodes ).</item>
        <item> save_cicli( ).</item>
        <item/>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WITH</item>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv</item>
        <item/>
        <item> &quot; seleziona righe da accettare</item>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key )</item>
        <item> lt_nodes = VALUE salv_t_nodes( ( key = lv_key ) ).</item>
        <item> accettazione_noodp( iv_action = space</item>
        <item> iv_no_show_alv = abap_true</item>
        <item> iv_no_diba = abap_true &quot; non effettua sele</item>
        <item> it_nodes = lt_nodes ).</item>
        <item/>
        <item> REFRESH: lt_alberob.</item>
        <item> CLEAR: lt_alberob.</item>
        <item> FREE: lt_alberob.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE light = space.</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> ls_tree_data_sel-elaborato = abap_true.</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = &apos;OK&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_data) = sy-tabix.</item>
        <item> ls_tree_data-elaborato = abap_true.</item>
        <item> CLEAR: ls_tree_data-color, ls_tree_data-opname.</item>
        <item> ls_tree_data-colore = &apos;GRIGIO&apos;.</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_data.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = l</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_hier) = sy-tabix.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY rootname =</item>
        <item> counter =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_albero) = sy-tabix.</item>
        <item> IF ( ls_albero-azione = &apos;D&apos; ).</item>
        <item> DELETE gt_albero INDEX lv_tabix_albero.</item>
        <item> DELETE gt_tree_hier INDEX lv_tabix_hier.</item>
        <item> DELETE gt_tree_data INDEX lv_tabix_data.</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_albero-rootname</item>
        <item> AND counter = ls_albero-counter.</item>
        <item> sort_tree_table( CHANGING ct_albero = gt_albero ).</item>
        <item> ELSE.</item>
        <item> ls_albero-elaborato = abap_true.</item>
        <item> CLEAR: ls_albero-opname, ls_albero-mod_succ.</item>
        <item> ls_albero-colore = &apos;GRIGIO&apos;.</item>
        <item> ls_albero-itsob = ls_tree_data-itsob.</item>
        <item> MODIFY gt_albero FROM ls_albero INDEX sy-tabix.</item>
        <item> MODIFY zpp_albero FROM ls_albero.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> APPEND ls_albero TO lt_alberob.</item>
        <item> ENDIF.</item>
        <item> DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_parent TYPE REF TO cl_salv_node.</item>
        <item> lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item> lo_node = lo_nodes-&gt;get_node( ls_tree_hier-key ).</item>
        <item> IF ( lo_node IS BOUND ).</item>
        <item> lo_parent = lo_node-&gt;get_parent( ).</item>
        <item> lo_node-&gt;set_visible( abap_false ).</item>
        <item> FREE lo_node.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> &quot; Backup accettato -------------------------------------------------</item>
        <item> &quot; bisogna non trasferire alla tabella degli storni i record settati</item>
        <item> &quot; (solo per colorarli di giallo nell&apos;albero)</item>
        <item> DELETE lt_alberob WHERE azione = &apos;U&apos; AND mod_succ = space.</item>
        <item> backup_accettato( it_alberob = lt_alberob ).</item>
        <item/>
        <item> &quot; recupera la tabella dei nodi selezionati (con gli esiti) della fin</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTAZIONE_NOODP>
      <SAVE_DIBA>
        <item> METHOD save_diba.</item>
        <item> TYPES: BEGIN OF ty_s_matnr,</item>
        <item> matnr TYPE matnr,</item>
        <item> END OF ty_s_matnr.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lt_stpo TYPE tt_stpo,</item>
        <item> lv_aennr TYPE csin-aennr,</item>
        <item> ls_stpo TYPE stpob,</item>
        <item> lv_stlan TYPE mast-stlan,</item>
        <item> lv_pspnr TYPE prps-pspnr,</item>
        <item> lv_posnr TYPE n LENGTH 4,</item>
        <item> lv_stlkn TYPE stpob-stlkn,</item>
        <item> lv_stpoz TYPE stpob-stpoz,</item>
        <item> lv_tabix TYPE i,</item>
        <item> &quot;lv_ref TYPE ty_s_tree_hier-ref,</item>
        <item> lt_matnr TYPE TABLE OF ty_s_matnr,</item>
        <item> ls_matnr TYPE ty_s_matnr.</item>
        <item> DATA: l_tfill LIKE sy-tfill.</item>
        <item> DATA: ls_presenza_cs73 TYPE c. &quot;Traccia la presenza della BOM CS73</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item> REFRESH: lt_matnr.</item>
        <item> CLEAR: lt_matnr.</item>
        <item> FREE: lt_matnr.</item>
        <item/>
        <item> &quot;CLEAR: lv_ref.</item>
        <item>* REM: Azione verso l&apos;Alto dove il materiale selezionato dall&apos;utente √®</item>
        <item> DATA: lv_min_level TYPE ty_s_albero-lev. &quot;Utilizzata per discrimin</item>
        <item> lv_min_level = 99999.</item>
        <item/>
        <item>* Nella tabella gt_tree_data_sel abbiamo il codice selezionato il suo</item>
        <item>* Non importa se i figli ZMTO sono di tipo E o F in entrambi i casi la</item>
        <item>* Nella tabella gt_tree_data_sel abbiamo i materiali la cui BOM va con</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> lv_tabix = sy-tabix.</item>
        <item/>
        <item> REFRESH: lt_stpo.</item>
        <item> CLEAR: lt_stpo.</item>
        <item> FREE: lt_stpo.</item>
        <item/>
        <item>* Se il materiale padre della BOM √® ripetuto nella tabella pop-up va</item>
        <item> READ TABLE lt_matnr INTO ls_matnr WITH KEY matnr = ls_tree_data_se</item>
        <item> IF sy-subrc = 0.</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> ls_tree_data_sel-light = icon_yellow_light. &quot;Semaforo GIALLO</item>
        <item> ls_tree_data_sel-log = &apos;BOM gi√† modificata&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE. &quot;------&gt;</item>
        <item> ENDIF.</item>
        <item/>
        <item>* lv_min_level dettaglia il livello minimo e questo per discriminare</item>
        <item> IF ( ls_tree_data_sel-level &lt; lv_min_level ).</item>
        <item> lv_min_level = ls_tree_data_sel-level.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Selezione del key del record iniziale selezionato dall&apos;utente.</item>
        <item>* REM: il campo KEY √® un indice significativo solo nelle tabelle int</item>
        <item>* il campo KEY identifica un record il cui campo REF si lega al</item>
        <item>* IF ( lv_tabix = 2 ). &quot;Il secondo record nella tabella pop-up √®</item>
        <item>* CASE gv_tipo_anticipo. &quot;Tipo di file: Anticipo o Lancio produzi</item>
        <item>* WHEN c_anticipo. &quot;Acquisizione anticipo</item>
        <item>* lv_ref = ls_tree_data_sel-ref.</item>
        <item>* WHEN c_produzione. &quot;Acquisizione lancio di produzione</item>
        <item>* lv_ref = ls_tree_data_sel-ref.</item>
        <item>* ENDCASE.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* Determinazione del numero di modifica</item>
        <item> lv_aennr = &apos;BOM-&apos; &amp;&amp; sy-datum.</item>
        <item/>
        <item> &quot; imposta parametri per lettura diba</item>
        <item> DATA: lt_stpo_read TYPE TABLE OF stpob,</item>
        <item> ls_ecsin TYPE csin,</item>
        <item> lv_fl_warning TYPE capiflag-flwarning.</item>
        <item/>
        <item> CLEAR: lv_stlan, lv_pspnr, ls_presenza_cs73.</item>
        <item> lv_stlan = &apos;1&apos;. &quot;Impiego della distinta base</item>
        <item> lv_pspnr = gv_pspnr. &quot;Elemento WBS</item>
        <item/>
        <item> ls_ecsin-matnr = ls_tree_data_sel-matnr. &quot;Materiale padre della</item>
        <item> ls_ecsin-stlan = lv_stlan. &quot;Impiego della distinta base</item>
        <item> ls_ecsin-werks = &apos;6301&apos;.</item>
        <item> ls_ecsin-otmat = abap_true. &quot;Codice: considerare le posizioni</item>
        <item> ls_ecsin-stlal = &apos;01&apos;. &quot;Distinta base alternativa</item>
        <item> IF ( NOT lv_pspnr IS INITIAL ).</item>
        <item> ls_ecsin-pspnr = lv_pspnr. &quot;Elemento della Work Breakdown Str</item>
        <item> ls_ecsin-stlty = &apos;P&apos;. &quot;Categoria distinta base</item>
        <item> ELSE.</item>
        <item> ls_ecsin-stlty = &apos;M&apos;. &quot;Categoria distinta base</item>
        <item> ENDIF.</item>
        <item> ls_ecsin-datuv = sy-datum. &quot;Data inizio validit√†</item>
        <item> ls_ecsin-datub = &apos;99991231&apos;. &quot;Data di fine validit√†</item>
        <item/>
        <item> REFRESH: lt_stpo_read.</item>
        <item> CLEAR: lt_stpo_read.</item>
        <item> FREE: lt_stpo_read.</item>
        <item/>
        <item>* Lettura diba</item>
        <item> CALL FUNCTION &apos;CSAI_BOM_READ&apos;</item>
        <item> EXPORTING</item>
        <item> ecsin = ls_ecsin</item>
        <item> IMPORTING</item>
        <item> fl_warning = lv_fl_warning</item>
        <item> TABLES</item>
        <item> t_stpob = lt_stpo_read</item>
        <item>* T_STKOB =</item>
        <item>* T_DEP_DATA =</item>
        <item>* T_DEP_DESCR =</item>
        <item>* T_DEP_ORDER =</item>
        <item>* T_DEP_SOURCE =</item>
        <item>* T_DEP_DOC =</item>
        <item>* T_FSH_BOMD =</item>
        <item>* T_SGT_BOMC =</item>
        <item> EXCEPTIONS</item>
        <item> error = 1</item>
        <item> OTHERS = 2.</item>
        <item/>
        <item> IF sy-subrc &lt;&gt; 0. &quot;CALL FUNCTION &apos;CSAI_BOM_READ&apos;</item>
        <item>* Il materiale non ha BOM a WBS nemmeno una BOM con la sola testata</item>
        <item>* Verifica eventuale disallineamento tra il flag f_diba e la CS73</item>
        <item> ls_presenza_cs73 = &apos;X&apos;. &quot;Non c&apos;√® la BOM a WBS</item>
        <item> ENDIF. &quot;IF sy-subrc &lt;&gt; 0. &quot;CALL FUNCTION &apos;CSAI_BOM_READ&apos;</item>
        <item/>
        <item> DATA l_abap(1) TYPE c VALUE &apos;9&apos;.</item>
        <item> IF ls_presenza_cs73 = &apos;X&apos; AND ls_tree_data_sel-f_diba = abap_true.</item>
        <item> l_abap = abap_false.</item>
        <item> ELSEIF ls_presenza_cs73 = space AND ls_tree_data_sel-f_diba = abap</item>
        <item> l_abap = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF l_abap &lt;&gt; &apos;9&apos;. &quot;Dove 9 √® il valore di default impostato sopra</item>
        <item> ls_tree_data_sel-f_diba = l_abap.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix TRA</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data_2) WITH KEY ref =</item>
        <item> IF sy-subrc = 0.</item>
        <item> DATA(lv_tabix_1) = sy-tabix.</item>
        <item> ls_tree_data_2-f_diba = l_abap.</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data_2 INDEX lv_tabix_1 TRANS</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> DATA: ls_stpo_read TYPE stpob.</item>
        <item> DATA: lv_continua.</item>
        <item/>
        <item> CLEAR: ls_stpo_read, lv_continua.</item>
        <item>* Estrazione dell&apos;ultimo record per avere il massimo POSNR e control</item>
        <item> LOOP AT lt_stpo_read INTO ls_stpo_read.</item>
        <item> lv_tabix_1 = sy-tabix.</item>
        <item> LOOP AT lt_stpo_read INTO DATA(ls_stpo_read_1) FROM lv_tabix_1 +</item>
        <item> WHERE idnrk = ls_stpo_read-idnrk.</item>
        <item> lv_continua = &apos;X&apos;. &quot;Trovato componente duplicato</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF lv_continua = &apos;X&apos;.</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> ls_tree_data_sel-light = icon_red_light. &quot;Semaforo ROSSO</item>
        <item> CONCATENATE &apos;CSAI_BOM_READ - COMPONENTE RIPETUTO IN BOM: &apos; ls_st</item>
        <item> INTO ls_tree_data_sel-log SEPARATED BY space.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> CONTINUE. &quot;------&gt;</item>
        <item> ENDIF. &quot;IF lv_continua = &apos;X&apos;.</item>
        <item/>
        <item> lv_posnr = ls_stpo_read-posnr + 10.</item>
        <item> &quot;lv_stlkn = ls_stpo_read-stlkn + 11.</item>
        <item> &quot;lv_stpoz = ls_stpo_read-stpoz + 11.</item>
        <item/>
        <item>* LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent = ls_tr</item>
        <item>* AND level = ls_tr</item>
        <item/>
        <item>* REM: Il campo KEY assume valori univoci esattamente nell&apos;ordine de</item>
        <item>* Posizionamento sul record in esame</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = ls_</item>
        <item> CHECK sy-subrc = 0.</item>
        <item/>
        <item>* Posizionamento sul record in esame</item>
        <item>* REM: Il campo REF assume valori univoci ed √® presente sia in ZPP_A</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero_first) WITH KEY ref = ls_</item>
        <item> DATA(lv_tabix_albero_1) = sy-tabix. &quot;sy-tabix del record corrent</item>
        <item> DATA(lv_tabix_albero_2) = sy-tabix. &quot;sy-tabix del&apos;ultimo record</item>
        <item/>
        <item>* Ricerca del tabix di fine del ramo in corso</item>
        <item>* Posizionamento sul record sucessivo</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero) FROM lv_tabix_albero_1.</item>
        <item> lv_tabix_albero_2 = sy-tabix. &quot;sy-tabix del&apos;ultimo record del</item>
        <item/>
        <item>* Posizionamento sul record sucessivo</item>
        <item>* REM: gt_albero √® sortato BY SORT</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_next) FROM lv_tabix_albero</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 OR ls_albero_next-lev &lt;= ls_albero_first-lev</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>************************************************************************</item>
        <item>***** 1 LOOP SULLA TABELLA ALBERO BOM VS TABELLA BOM *******************</item>
        <item/>
        <item> IF ls_tree_data_sel-colore &lt;&gt; &apos;ROSSO&apos;.</item>
        <item>* Determinato il sy-tabix di inizio e fine del ramo con root il re</item>
        <item> LOOP AT gt_albero INTO ls_albero FROM lv_tabix_albero_1</item>
        <item> TO lv_tabix_albero_2</item>
        <item> WHERE parentname = ls_tree_dat</item>
        <item> AND lev = ls_tree_dat</item>
        <item/>
        <item>* REM: Il campo REF assume valori univoci ed √® presente sia in ZPP</item>
        <item>* REM: La tabella interna gt_tree_hier e la tabella ZPP_ALBERO son</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY ref = ls_al</item>
        <item/>
        <item> IF ( lv_min_level = ls_albero-lev - 1 ).</item>
        <item> CLEAR: ls_tree_data_2.</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data_2 WITH KEY ref = l</item>
        <item>* Stiamo elaborando i figli del codice padre aggiunto d&apos;uffici</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY key = ls_tree_hier-key</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY ref = ls_tree_hier-ref</item>
        <item> ENDIF.</item>
        <item> CHECK ( sy-subrc = 0 ) OR</item>
        <item>* Gestione dei nodi foglia che nella tabella pop-up non sono p</item>
        <item>* deve considerare solo quello nella tabella pop-up</item>
        <item>* ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-disgr &lt;&gt; &apos;ZMTO&apos; ).</item>
        <item> ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-level &lt;&gt; lv_min_level</item>
        <item>* Gestione del ROOTNAME con figli ZMTS quindi non presenti in</item>
        <item> ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-level = lv_min_level</item>
        <item>* Gestione del ROOTNAME con figli ZMTS quindi non presenti in</item>
        <item> ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-level = lv_min_level</item>
        <item/>
        <item> CLEAR: ls_stpo.</item>
        <item/>
        <item>* &quot; verifica che il componente se √® ramo, sia presente nella list</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY parent = l</item>
        <item>* level = l</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY key = ls_tree_hier-key T</item>
        <item>* ELSE.</item>
        <item>* IF ( lv_tabix &gt; 1 ).</item>
        <item>* sy-subrc = 0.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data_tmp) WITH KEY k</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data_tmp) WITH KEY r</item>
        <item> ls_stpo-mandt = sy-mandt.</item>
        <item> ls_stpo-postp = &apos;L&apos;. &quot;Tipo di posizione (disti</item>
        <item> ls_stpo-stlty = &apos;P&apos;. &quot;Categoria distinta base</item>
        <item> IF ls_stpo_read-stlnr IS INITIAL.</item>
        <item> ls_stpo-andat = sy-datum. &quot;Data di creazione reco</item>
        <item> ls_stpo-annam = sy-uname. &quot;Utente che ha creato i</item>
        <item> ELSE.</item>
        <item> ls_stpo-aenam = sy-uname. &quot;Nome dell&apos;utente autor</item>
        <item> ls_stpo-aedat = sy-datum. &quot;Data dell&apos;ultima modif</item>
        <item> ENDIF.</item>
        <item> ls_stpo-stlnr = ls_stpo_read-stlnr. &quot;Distinta base</item>
        <item> ls_stpo-posnr = lv_posnr. &quot;Numero posizione distint</item>
        <item> ls_stpo-idnrk = ls_tree_data_tmp-matnr.</item>
        <item/>
        <item> TRY.</item>
        <item> ls_stpo-menge = ls_tree_data_tmp-menge. &quot;Qt√† dell&apos;Albero</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> ls_stpo-meins = ls_tree_data_tmp-meins.</item>
        <item> ls_stpo-datuv = sy-datum. &quot;Data inizio validit√†</item>
        <item/>
        <item> ls_stpo-aennr = lv_aennr. &quot;Numero di modifica</item>
        <item> ls_stpo-sanka = abap_true. &quot;Codice: posizione rileva</item>
        <item> ls_stpo-pswrk = &apos;6301&apos;. &quot;Divisione del prelievo</item>
        <item> ls_stpo-itsob = ls_tree_data_tmp-itsob. &quot;Tipo approvvigionam</item>
        <item/>
        <item> CASE ls_tree_data_tmp-colore.</item>
        <item> WHEN &apos;VERDE&apos;.</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Il componente esiste sulla BOM. Verificare se allineare</item>
        <item> IF NOT ( ls_stpo_read-menge = ls_stpo-menge AND ls_stpo_</item>
        <item> ls_stpo_read-menge = ls_stpo-menge.</item>
        <item> ls_stpo_read-itsob = ls_stpo-itsob.</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;U&apos;.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Il componente √® gi√† presente nella tabella lt_stpo_rea</item>
        <item>* NB: Questo funziona nell&apos;ipotesi che non si possano av</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> &quot; se il componente non esite in bom bisogna inserirlo</item>
        <item> ls_stpo-vbkz = ls_stpo-mvbkz = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;ROSSO&apos;.</item>
        <item>* IF ( ls_tree_data_tmp-disgr = &apos;ZMTO&apos; AND NOT ls_tree_data_t</item>
        <item>* &quot; bisogna mettere in errore tutto i rami antenati che tut</item>
        <item>* ENDIF.</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Cancellare il componente dalla BOM</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;D&apos;.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Se il componente non √® presente nella tabella lt_stpo_re</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;GIALLO&apos;.</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Il componente esiste sulla BOM. Verificare se allineare</item>
        <item> IF NOT ( ls_stpo_read-menge = ls_stpo-menge AND ls_stpo_</item>
        <item> &quot;Allineare la quantit√† e itsob con quella dell&apos;albero</item>
        <item> ls_stpo_read-menge = ls_stpo-menge.</item>
        <item> ls_stpo_read-itsob = ls_stpo-itsob.</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;U&apos;.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Il componente √® gi√† presente nella tabella lt_stpo_rea</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> &quot;Il componente non esite in BOM bisogna inserirlo</item>
        <item> ls_stpo-vbkz = ls_stpo-mvbkz = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item> WHEN OTHERS. &quot;ad es. GRIGIO</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Il componente esiste sulla BOM. Verificare se allineare</item>
        <item> IF NOT ( ls_stpo_read-menge = ls_stpo-menge AND ls_stpo_</item>
        <item> &quot;Allineare la quantit√† e itsob con quella dell&apos;albero</item>
        <item> ls_stpo_read-menge = ls_stpo-menge.</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;U&apos;.</item>
        <item> ls_stpo_read-itsob = ls_stpo-itsob.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Il componente √® gi√† presente nella tabella lt_stpo_rea</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> &quot;Il componente non esite in BOM bisogna inserirlo</item>
        <item> ls_stpo-vbkz = ls_stpo-mvbkz = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item>* CONTINUE.</item>
        <item> ENDCASE.</item>
        <item/>
        <item> APPEND ls_stpo TO lt_stpo. &quot;&lt;------</item>
        <item> ADD 10 TO lv_posnr.</item>
        <item/>
        <item> &quot;lv_lev = ls_albero-lev.</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO ls_albero FROM lv_tabix_alber</item>
        <item> ENDIF. &quot;IF ls_tree_data_sel-colore &lt;&gt; &apos;ROSSO&apos;.</item>
        <item/>
        <item>************************************************************************</item>
        <item>***** 2 LOOP SULLA TABELLA BOM vs TABELLA ALBERO BOM *******************</item>
        <item> &quot; cancella componenti della bom (se gi√† esistente) non presenti ne</item>
        <item> DATA: l_check_2 TYPE c.</item>
        <item> CLEAR: l_check_2.</item>
        <item>* gt_skipped_nodes: Tabella con i nodi selezionati dall&apos;utente</item>
        <item> READ TABLE gt_skipped_nodes INTO DATA(ls_skipped_nodes) WITH KEY k</item>
        <item> IF sy-subrc = 0.</item>
        <item> l_check_2 = &apos;Y&apos;. &quot;Il nodo √® stato selezionato dall&apos;utente</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( ( ls_tree_data_sel-level &lt;&gt; lv_min_level OR &quot;E&apos; il padre</item>
        <item> l_check_2 = &apos;Y&apos; ) AND &quot;a meno che i</item>
        <item> ls_tree_data_sel-colore &lt;&gt; &apos;ROSSO&apos; ). &quot;Idem (nessun</item>
        <item> LOOP AT lt_stpo_read INTO ls_stpo_read.</item>
        <item> READ TABLE lt_stpo INTO ls_stpo WITH KEY idnrk = ls_stpo_read-</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;D&apos;.</item>
        <item> APPEND ls_stpo_read TO lt_stpo.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item/>
        <item> CLEAR: lv_stlan, lv_pspnr.</item>
        <item> lv_stlan = &apos;1&apos;.</item>
        <item> lv_pspnr = gv_pspnr.</item>
        <item/>
        <item>* Elimino eventuali record inutili</item>
        <item> LOOP AT lt_stpo INTO ls_stpo WHERE mvbkz = &apos;U&apos;.</item>
        <item> DATA(ls_tabix) = sy-tabix.</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk = ls_st</item>
        <item> IF sy-subrc = 0 AND ls_stpo_read-menge = ls_stpo-menge AND ls_st</item>
        <item> DELETE lt_stpo INDEX ls_tabix. &quot;&lt;------ Eliminazione dalla t</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( NOT lt_stpo[] IS INITIAL ).</item>
        <item/>
        <item> &quot; crea diba</item>
        <item> IF ( ls_tree_data_sel-f_diba EQ abap_false ).</item>
        <item/>
        <item>* Esegue CALL FUNCTION &apos;CSAI_BOM_CREATE&apos;</item>
        <item> CALL FUNCTION &apos;ZPP_CREA_DIBA&apos;</item>
        <item> EXPORTING</item>
        <item> i_matnr = ls_tree_data_sel-matnr</item>
        <item> i_pspnr = lv_pspnr</item>
        <item> i_werks = &apos;6301&apos;</item>
        <item> i_stlan = lv_stlan</item>
        <item> i_aennr = lv_aennr</item>
        <item> it_stpo = lt_stpo</item>
        <item> IMPORTING</item>
        <item>* E_STLNR =</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item/>
        <item> ELSE. &quot;IF ( ls_tree_data_sel-f_diba EQ abap_false ).</item>
        <item/>
        <item>* Esegue CALL FUNCTION &apos;CSAI_BOM_MAINTAIN&apos;</item>
        <item> CALL FUNCTION &apos;ZPP_MODIFICA_DIBA&apos;</item>
        <item> EXPORTING</item>
        <item> i_matnr = ls_tree_data_sel-matnr</item>
        <item> i_pspnr = lv_pspnr</item>
        <item> i_werks = &apos;6301&apos;</item>
        <item> i_stlan = lv_stlan</item>
        <item> i_aennr = lv_aennr</item>
        <item> it_stpo = lt_stpo</item>
        <item> IMPORTING</item>
        <item>* E_STLNR =</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item/>
        <item> ENDIF. &quot;IF ( ls_tree_data_sel-f_diba EQ abap_false ).</item>
        <item/>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item/>
        <item> COMMIT WORK AND WAIT.</item>
        <item/>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> READ TABLE gt_tree_data_sel INTO DATA(ls_tree_data_sel_2) INDE</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_tree_data_sel_2-light = icon_green_light. &quot;Semaforo VER</item>
        <item> ls_tree_data_sel_2-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_2 INDEX sy-tab</item>
        <item> ENDIF.</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item>* Propagazione del flag di presenza diba sull&apos;albero</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> ls_tree_data-f_diba = abap_true.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2 TRANS</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_1) WHERE m</item>
        <item> DATA(lv_tabix_3) = sy-tabix.</item>
        <item> ls_tree_data_sel_1-f_diba = abap_true.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_1 INDEX lv_tab</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item/>
        <item> ELSE. &quot;IF ( lv_esito = &apos;000&apos; ).</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> READ TABLE gt_tree_data_sel INTO ls_tree_data_sel_2 INDEX lv_t</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_tree_data_sel_2-light = icon_red_light. &quot;Semaforo ROSSO</item>
        <item> IF ( ls_tree_data_sel-f_diba EQ abap_false ).</item>
        <item> CONCATENATE &apos;ZPP_CREA_DIBA:&apos; lv_descr_esito lv_pspnr &apos; ECM</item>
        <item> INTO ls_tree_data_sel_2-log SEPARATED BY space.</item>
        <item> ELSE.</item>
        <item> CONCATENATE &apos;ZPP_MODIFICA_DIBA:&apos; lv_descr_esito lv_pspnr &apos;</item>
        <item> INTO ls_tree_data_sel_2-log SEPARATED BY space.</item>
        <item> ENDIF.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_2 INDEX sy-tab</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( lv_esito = &apos;000&apos; ).</item>
        <item> ELSE. &quot;IF ( NOT lt_stpo[] IS INITIAL ).</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> READ TABLE gt_tree_data_sel INTO ls_tree_data_sel_2 INDEX lv_tab</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_tree_data_sel_2-light = icon_yellow_light. &quot;Semaforo GIAL</item>
        <item> ls_tree_data_sel_2-log = &apos;BOM non modificata&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_2 INDEX sy-tabix</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( NOT lt_stpo[] IS INITIAL ).</item>
        <item/>
        <item> ls_matnr-matnr = ls_tree_data_sel-matnr.</item>
        <item> COLLECT ls_matnr INTO lt_matnr.</item>
        <item>* zcl_pp_pdm_monitor_sec=&gt;set_phantom( CHANGING cs_tree_data_sel =</item>
        <item>* cs_albero =</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHE</item>
        <item/>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANSPOR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare semafori rossi&apos;.</item>
        <item> ENDIF.</item>
        <item/>
        <item> REFRESH: lt_matnr, lt_stpo, lt_stpo_read.</item>
        <item> CLEAR: lt_matnr, lt_stpo, lt_stpo_read.</item>
        <item> FREE: lt_matnr, lt_stpo, lt_stpo_read.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_DIBA>
      <SELECT_BRANCH_ROOT_2>
        <item> METHOD select_branch_root_2.</item>
        <item> DATA: ls_tree_data_sel TYPE ty_s_tree_data_sel.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero_first) WITH KEY ref = is_tr</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_albero_1) = sy-tabix. &quot;sy-tabix del record corrent</item>
        <item> DATA(lv_tabix_albero_2) = sy-tabix. &quot;sy-tabix del&apos;ultimo record</item>
        <item/>
        <item>* Ricerca del tabix di fine del ramo in corso</item>
        <item>* Posizionamento sul record sucessivo</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero) FROM lv_tabix_albero_1.</item>
        <item> lv_tabix_albero_2 = sy-tabix. &quot;sy-tabix del&apos;ultimo record del</item>
        <item/>
        <item>* Posizionamento sul record sucessivo</item>
        <item>* REM: gt_albero √® sortato BY SORT</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_next) FROM lv_tabix_albero</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 OR ls_albero_next-lev &lt;= ls_albero_first-lev</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_alber</item>
        <item> LOOP AT gt_albero INTO ls_albero FROM lv_tabix_albero_1</item>
        <item> TO lv_tabix_albero_2</item>
        <item> WHERE parentname = ls_hier-node</item>
        <item> AND lev = ls_hier-level</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = l</item>
        <item/>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data) WITH KEY ref = ls_t</item>
        <item/>
        <item> CHECK NOT ( ls_data-colore = &apos;ROSSO&apos; AND ls_data-mod_succ IS INI</item>
        <item/>
        <item> CHECK ls_data-disgr = iv_disgr. &quot;MARC-DISGR DEFAULT &apos;ZMTO&apos;</item>
        <item> IF ( NOT iv_beskz IS INITIAL ).</item>
        <item> CHECK ls_data-beskz = iv_beskz.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_no_phantom = abap_true ).</item>
        <item> CHECK ls_data-itsob = space.</item>
        <item> ENDIF.</item>
        <item> IF ( iv_odp = abap_true ).</item>
        <item> CHECK NOT ls_data-aufnr IS INITIAL.</item>
        <item> ENDIF.</item>
        <item/>
        <item> MOVE-CORRESPONDING ls_data TO ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = ls_albero-lev.</item>
        <item> APPEND ls_tree_data_sel TO ct_tree_data_sel.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> select_branch_root_2( EXPORTING is_tree_data = ls_tree_data</item>
        <item> iv_disgr = iv_disgr</item>
        <item> iv_beskz = iv_beskz</item>
        <item> iv_no_phantom = iv_no_phantom</item>
        <item> CHANGING ct_tree_data_sel = ct_tree_data</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SELECT_BRANCH_ROOT_2>
      <TREE_ROW_REFRESH>
        <item> METHOD tree_row_refresh.</item>
        <item> DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_node TYPE REF TO cl_salv_node.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = is_tr</item>
        <item> TRY.</item>
        <item> lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item> lo_node = lo_nodes-&gt;get_node( ls_tree_hier-key ).</item>
        <item> lo_node-&gt;set_data_row( is_tree_data ).</item>
        <item/>
        <item> CASE is_tree_data-colore.</item>
        <item> WHEN &apos;VERDE&apos;.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_pos</item>
        <item> WHEN &apos;GIALLO&apos;.</item>
        <item> lo_node-&gt;set_row_style( 7 ).</item>
        <item> WHEN &apos;ROSSO&apos;.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;emphasized_neg</item>
        <item> WHEN &apos;GRIGIO&apos;.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;default ).</item>
        <item> WHEN OTHERS.</item>
        <item> lo_node-&gt;set_row_style( if_salv_c_tree_style=&gt;default ).</item>
        <item> ENDCASE.</item>
        <item/>
        <item> DATA: lo_item TYPE REF TO cl_salv_item.</item>
        <item> lo_item = lo_node-&gt;get_item( &apos;F_DIBA&apos; ).</item>
        <item> lo_item-&gt;set_type( cl_salv_item=&gt;if_salv_c_item_type~checkbox ).</item>
        <item> lo_item-&gt;set_value( space ).</item>
        <item> lo_item-&gt;set_checked( is_tree_data-f_diba ).</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> ENDMETHOD.</item>
      </TREE_ROW_REFRESH>
      <SKIP_DUPLICATES_IN_BRANCH>
        <item> METHOD skip_duplicates_in_branch.</item>
        <item> DATA: lv_lev TYPE zpp_albero-lev.</item>
        <item> DATA: ls_tabix TYPE sy-tabix.</item>
        <item> DATA: lt_nodes TYPE salv_t_nodes.</item>
        <item> DATA: ls_key TYPE ty_s_tree_hier-key.</item>
        <item/>
        <item> &quot;gt_skipped_nodes &lt;-- tabella globale</item>
        <item> REFRESH: gt_skipped_nodes, lt_nodes.</item>
        <item> CLEAR: gt_skipped_nodes, lt_nodes.</item>
        <item> FREE: gt_skipped_nodes, lt_nodes.</item>
        <item/>
        <item> lt_nodes[] = it_nodes[].</item>
        <item> SORT lt_nodes BY key.</item>
        <item/>
        <item> DATA(lv_lines) = 0.</item>
        <item> DESCRIBE TABLE lt_nodes LINES lv_lines.</item>
        <item/>
        <item> IF lv_lines &gt; 1.</item>
        <item>* La tabella IT_NODES contiene il riferimenti ai nodi selezionati dall</item>
        <item>* E&apos; necessario garantire che i nodi selezionati siano indipendenti.</item>
        <item>* A es. la selezione sia del padre che del figlio deve produrre l&apos;elim</item>
        <item>* identifica un ramo che all&apos;interno ha gi√† il figlio.</item>
        <item>* Esegue una risalita sull&apos;Albero BOM (come un salmone) fino agli ante</item>
        <item>* se un antenato √® selezionato. Se si allora il discendente va elimina</item>
        <item>* Inoltre i materiali selezionati devono essere disgr = &apos;ZMTO&apos;.</item>
        <item> LOOP AT lt_nodes INTO DATA(ls_nodes).</item>
        <item> ls_key = ls_nodes-key.</item>
        <item> IF ls_key &gt; 1.</item>
        <item>* REM: La tabella gt_tree_hier √® sortata per KEY crescente e map</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_discendente) WI</item>
        <item/>
        <item/>
        <item/>
        <item> WHILE ls_tree_hier_discendente-key &gt; 1.</item>
        <item>* Posizionamento sul nodo padre</item>
        <item> LOOP AT gt_tree_hier INTO DATA(ls_tree_hier_padre) FROM 1</item>
        <item> TO ls_key</item>
        <item> WHERE nod</item>
        <item> AND lev</item>
        <item> ENDLOOP.</item>
        <item>* Verifica se il materiale (padre) √® in it_nodes</item>
        <item> READ TABLE it_nodes INTO DATA(ls_nodes_antenato_trovato) WIT</item>
        <item> IF sy-subrc = 0.</item>
        <item>* Elimino il nodo corrente perch√® abbiamo in selezione anche</item>
        <item> DELETE lt_nodes WHERE key = ls_key .</item>
        <item> EXIT. &quot;USCITA WHILE ------&gt;</item>
        <item> ELSE.</item>
        <item>* Trovato un antenato visto che non appartiene alla selezion</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier_discendente WITH</item>
        <item> ENDIF.</item>
        <item> ENDWHILE.</item>
        <item/>
        <item/>
        <item/>
        <item>** Risalita del ramo e verifica se incontro un materiale in lt_n</item>
        <item>* WHILE ( ls_key - 1 ) &gt; 0.</item>
        <item>* ls_key = ls_key - 1.</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_antenato) WI</item>
        <item>* IF ls_tree_hier_antenato-level &gt;= ls_tree_hier_discendente-</item>
        <item>** Sono in un sotto-ramo by-passo i materiali sono fratelli</item>
        <item>* ELSE.</item>
        <item>** Verifica se il materiale (antenato) √® in it_nodes</item>
        <item>* READ TABLE it_nodes INTO DATA(ls_nodes_antenato_trovato)</item>
        <item>* IF sy-subrc = 0.</item>
        <item>** Elimino il nodo corrente perch√® abbiamo in selezione an</item>
        <item>* DELETE lt_nodes WHERE key = ls_tree_hier_discendente-ke</item>
        <item>* EXIT. &quot;USCITA WHILE ------&gt;</item>
        <item>* ELSE.</item>
        <item>** Trovato un antenato visto che non appartiene alla selez</item>
        <item>** questo per limitare la ricerca al ramo del codice selez</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier_discendente W</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* IF ls_tree_hier_antenato-level &lt; 2.</item>
        <item>** Condizione di uscita sono arrivato all&apos;antenato di primo</item>
        <item>* EXIT. &quot;USCITA WHILE ------&gt;</item>
        <item>* ENDIF.</item>
        <item>* ENDWHILE.</item>
        <item/>
        <item/>
        <item/>
        <item> ELSE.</item>
        <item>* E&apos; stata selezionata il ROOTNAME quindi fine dell&apos;elaborazione</item>
        <item> DELETE lt_nodes WHERE key &gt; ls_key.</item>
        <item> EXIT. &quot;USCITA LOOP ------&gt;</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> ENDIF. &quot;IF lv_lines &gt; 1.</item>
        <item/>
        <item>* I materiali selezionati devono essere disgr = &apos;ZMTO&apos;.</item>
        <item> LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> disgr = &apos;</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item>* E&apos; stato selezionato un materiale non ZMTO</item>
        <item> DELETE lt_nodes WHERE key = ls_nodes-key.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item/>
        <item> gt_skipped_nodes[] = lt_nodes[].</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SKIP_DUPLICATES_IN_BRANCH>
      <SAVE_ACCETTAZIONE_NOODP_2>
        <item> METHOD save_accettazione_noodp_2.</item>
        <item> DATA: lt_albero TYPE ty_t_albero,</item>
        <item> lt_alberob TYPE ty_t_albero,</item>
        <item> lt_tree_data_sel_1 TYPE ty_t_tree_data_sel,</item>
        <item> lt_tree_data_sel_old TYPE ty_t_tree_data_sel,</item>
        <item> lt_tree_data_sel TYPE ty_t_tree_data_sel,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli.</item>
        <item> &quot;lt_nodes TYPE salv_t_nodes.</item>
        <item/>
        <item> DATA: lt_nodes TYPE salv_t_nodes,</item>
        <item> ls_nodes TYPE salv_s_nodes.</item>
        <item/>
        <item> REFRESH: lt_albero, lt_alberob, lt_tree_data_sel_1, lt_tree_data_sel</item>
        <item> CLEAR: lt_albero, lt_alberob, lt_tree_data_sel_1, lt_tree_data_sel</item>
        <item> FREE: lt_albero, lt_alberob, lt_tree_data_sel_1, lt_tree_data_sel</item>
        <item/>
        <item> lt_tree_data_sel_1[] = gt_tree_data_sel[].</item>
        <item> lt_tree_data_sel[] = gt_tree_data_sel[].</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> DATA: lv_mod_attive TYPE abap_bool.</item>
        <item> lv_mod_attive = abap_false.</item>
        <item>* Solo in ripresa dati si dovr√† accettare tutto l&apos;Albero BOM arrivato</item>
        <item>* Tali accettazioni (eseguite in ripresa dati) non devono creare/modif</item>
        <item>* Quindi se abbiamo il flag attivo per l&apos;utente PP-KOSME allora i bott</item>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv_mod_attiv</item>
        <item> DATA: lv_key TYPE ty_s_tree_data_sel-key.</item>
        <item> CLEAR: lv_key.</item>
        <item> &quot; processo separatamente i nodi selezionati per le bom</item>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_skipped_nodes).</item>
        <item> &quot; la tabella gt_tree_data_sel deve contenere la selezione di un</item>
        <item> &quot; processi correttamente (e come faceva prima) le bom</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel.</item>
        <item/>
        <item> LOOP AT lt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE sel_k</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key</item>
        <item/>
        <item> &quot; Crea diba ----------------------------------------------------</item>
        <item>* create_diba( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item> save_diba( ). &quot;Elabora gt_tree_data_sel</item>
        <item>* save_diba_2( ).</item>
        <item/>
        <item> &quot; aggiorna flag di presenza diba sulle selezioni globali</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_1) WHERE f_d</item>
        <item> LOOP AT lt_tree_data_sel INTO DATA(ls_tree_data_sel_2) WHERE m</item>
        <item> DATA(lv_tabix_3) = sy-tabix.</item>
        <item> ls_tree_data_sel_2-f_diba = abap_true.</item>
        <item> MODIFY lt_tree_data_sel FROM ls_tree_data_sel_2 INDEX lv_tab</item>
        <item> ENDLOOP.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> &quot; appendo l&apos;esito delle bom in una tabella di appoggio per tener</item>
        <item> APPEND LINES OF gt_tree_data_sel TO lt_tree_data_sel_old.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> &quot; ripristino la tabella dei nodi selezionati con l&apos;esito delle bom</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item/>
        <item>* Questo controllo √® stato introdotto perch√® a spot (e su un caso no</item>
        <item>* dalla tabella interna gt_tree_data_sel e a video la pop-up √® vuota</item>
        <item> CHECK NOT gt_tree_data_sel[] IS INITIAL.</item>
        <item/>
        <item>* &quot; salva la tabella dei nodi selezionati della finestra di accetta</item>
        <item>* lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item/>
        <item> &quot; esegue solo se non ci sono errori nelle bom</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANS</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WITH KEY ligh</item>
        <item>* LOOP AT gt_skipped_nodes INTO ls_skipped_nodes.</item>
        <item>* LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE sel_key</item>
        <item>* AND key &gt;</item>
        <item>* CLEAR: ls_nodes.</item>
        <item>* ls_nodes-key = ls_tree_data_sel-key.</item>
        <item>* APPEND ls_nodes TO lt_nodes.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDLOOP.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel.</item>
        <item>* where light &lt;&gt; icon_red_light.</item>
        <item> CLEAR: ls_nodes.</item>
        <item> ls_nodes-key = ls_tree_data_sel-key.</item>
        <item> APPEND ls_nodes TO lt_nodes.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* Crea cicli - Inizio ---------------------</item>
        <item>* Preparazione</item>
        <item> create_cicli( iv_action = space</item>
        <item> iv_no_show_alv = abap_true</item>
        <item> it_nodes = lt_nodes ).</item>
        <item>* Esecuzione CALL FUNCTION &apos;ZPP_CREA_CICLO&apos;</item>
        <item> save_cicli( ).</item>
        <item>* Crea cicli - Fine ---------------------</item>
        <item/>
        <item> LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> DATA(lv_index) = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* Non √® possibile condizionare la creazione delle versioni per</item>
        <item>* LOOP AT lt_tree_data_sel_1 INTO DATA(lv_tree_data_sel_1)</item>
        <item>* WHERE matnr = ls_tree_data-matnr</item>
        <item>* AND f_diba = abap_true</item>
        <item>* AND plnnr IS NOT INITIAL.</item>
        <item>* EXIT.</item>
        <item>* ENDLOOP.</item>
        <item>* IF sy-subrc &lt;&gt; 0.</item>
        <item>* Esecuzione SUBMIT zpp_load_vers_prod</item>
        <item> save_prod_version( iv_matnr = ls_tree_data-matnr ).</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WIT</item>
        <item>* FIX BUG sul K5004512 - 85577701 - Start ins</item>
        <item>* Adesso la tabella gt_tree_data_sel avr√† i semafori dei cicli / versi</item>
        <item>* ripristino la tabella dei nodi selezionati con l&apos;esito delle bom</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item>* FIX BUG sul K5004512 - 85577701 - End ins</item>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv</item>
        <item/>
        <item>** FIX BUG sul K5004512 - 85577701 - Start ins</item>
        <item>** Adesso la tabella gt_tree_data_sel avr√† i semafori dei cicli / vers</item>
        <item>** ripristino la tabella dei nodi selezionati con l&apos;esito delle bom</item>
        <item>* gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item>** FIX BUG sul K5004512 - 85577701 - End ins</item>
        <item/>
        <item> &quot; esegue solo se non ci sono errori nelle bom</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANSPOR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WITH KEY light =</item>
        <item/>
        <item> &quot; seleziona righe da accettare</item>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key )</item>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = lv_key ) ).</item>
        <item/>
        <item> IF ( lv_mod_attive = abap_false ).</item>
        <item>* Colorazione dell&apos;Albero (1¬∞ Step)</item>
        <item>* Valorizzazione della tabella gt_tree_data_sel utilizzata nel 2¬∞</item>
        <item> accettazione_noodp( it_nodes = gt_skipped_nodes</item>
        <item>* it_nodes = lt_nodes</item>
        <item> iv_action = space</item>
        <item> iv_no_show_alv = abap_true</item>
        <item> iv_no_diba = abap_true &quot; non effettua</item>
        <item> ).</item>
        <item> ENDIF.</item>
        <item/>
        <item> REFRESH: lt_alberob.</item>
        <item> CLEAR: lt_alberob.</item>
        <item> FREE: lt_alberob.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item>* Colorazione dell&apos;Albero (2¬∞ Step)</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE light = space</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> ls_tree_data_sel-elaborato = abap_true.</item>
        <item> ls_tree_data_sel-light = icon_green_light.</item>
        <item> ls_tree_data_sel-log = &apos;OK&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_tree</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY ref = ls_tree</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_data) = sy-tabix.</item>
        <item> DATA(ls_tree_data_old) = ls_tree_data.</item>
        <item> ls_tree_data-elaborato = abap_true.</item>
        <item> CLEAR: ls_tree_data-color, ls_tree_data-opname.</item>
        <item> ls_tree_data-colore = &apos;GRIGIO&apos;.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_data TRAN</item>
        <item> IF ( ls_tree_data_old &lt;&gt; ls_tree_data ).</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDIF.</item>
        <item> &quot;READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY key = ls_t</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY ref = ls_tr</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_hier) = sy-tabix.</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY rootname</item>
        <item> counter</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_albero) = sy-tabix.</item>
        <item> IF ( ls_albero-azione = &apos;D&apos; ).</item>
        <item> DELETE gt_albero INDEX lv_tabix_albero.</item>
        <item> DELETE gt_tree_hier INDEX lv_tabix_hier.</item>
        <item> DELETE gt_tree_data INDEX lv_tabix_data.</item>
        <item> DELETE FROM zpp_albero WHERE rootname = ls_albero-rootna</item>
        <item> AND counter = ls_albero-counte</item>
        <item> sort_tree_table( CHANGING ct_albero = gt_albero ).</item>
        <item> DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item> lo_node TYPE REF TO cl_salv_node,</item>
        <item> lo_parent TYPE REF TO cl_salv_node.</item>
        <item> lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item> lo_node = lo_nodes-&gt;get_node( ls_tree_hier-key ).</item>
        <item> IF ( lo_node IS BOUND ).</item>
        <item> lo_parent = lo_node-&gt;get_parent( ).</item>
        <item> lo_node-&gt;set_visible( abap_false ).</item>
        <item> FREE lo_node.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> ls_albero-elaborato = abap_true.</item>
        <item> CLEAR: ls_albero-opname, ls_albero-mod_succ.</item>
        <item> ls_albero-colore = &apos;GRIGIO&apos;.</item>
        <item> ls_albero-itsob = ls_tree_data-itsob.</item>
        <item> MODIFY gt_albero FROM ls_albero INDEX sy-tabix.</item>
        <item> MODIFY zpp_albero FROM ls_albero.</item>
        <item> COMMIT WORK AND WAIT.</item>
        <item> ENDIF.</item>
        <item> APPEND ls_albero TO lt_alberob.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( lv_mod_attive = abap_false ).</item>
        <item/>
        <item> &quot; Backup accettato ---------------------------------------------</item>
        <item> &quot; bisogna non trasferire alla tabella degli storni i record sett</item>
        <item> &quot; (solo per colorarli di giallo nell&apos;albero)</item>
        <item> DELETE lt_alberob WHERE azione = &apos;U&apos; AND mod_succ = space.</item>
        <item> backup_accettato( it_alberob = lt_alberob ).</item>
        <item/>
        <item> &quot; recupera la tabella dei nodi selezionati (con gli esiti) della</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv</item>
        <item/>
        <item> REFRESH: lt_tree_data_sel_old.</item>
        <item> CLEAR: lt_tree_data_sel_old.</item>
        <item> FREE: lt_tree_data_sel_old.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTAZIONE_NOODP_2>
      <CREATE_CICLI_BY_LINE>
        <item> METHOD create_cicli_by_line.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv.</item>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> BREAK kosmedev.</item>
        <item> LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item> &quot; verifica che non esista il ciclo</item>
        <item> CHECK ls_tree_data-plnnr IS INITIAL.</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> ls_ztpp_cicli = get_par_cicli_ref( iv_matnr = ls_tree_data-mat</item>
        <item> ls_tree_data_sel-plnnr_ref = ls_ztpp_cicli-plnnr.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY ref = ls_t</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> BREAK kosmedev.</item>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> SET PARAMETER ID &apos;PTY&apos; FIELD &apos;S&apos;.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible =</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;PLNNR_REF&apos; visible =</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CREATE_CICLI_BY_LINE>
      <SAVE_ACCETTAZIONE_2>
        <item> METHOD save_accettazione_2.</item>
        <item> DATA: lt_albero TYPE ty_t_albero,</item>
        <item> lt_alberob TYPE ty_t_albero,</item>
        <item> lt_tree_data_sel_1 TYPE ty_t_tree_data_sel,</item>
        <item> lt_tree_data_sel_old TYPE ty_t_tree_data_sel,</item>
        <item> lt_tree_data_sel TYPE ty_t_tree_data_sel,</item>
        <item> ls_ztpp_cicli TYPE ztpp_cicli.</item>
        <item> &quot;lt_nodes TYPE salv_t_nodes.</item>
        <item/>
        <item> DATA: lt_nodes TYPE salv_t_nodes,</item>
        <item> lt_nodes_odp TYPE salv_t_nodes,</item>
        <item> ls_nodes TYPE salv_s_nodes,</item>
        <item> ls_nodes_odp TYPE salv_s_nodes.</item>
        <item/>
        <item> REFRESH: lt_albero, lt_alberob, lt_tree_data_sel_1, lt_tree_data_sel</item>
        <item> CLEAR: lt_albero, lt_alberob, lt_tree_data_sel_1, lt_tree_data_sel</item>
        <item> FREE: lt_albero, lt_alberob, lt_tree_data_sel_1, lt_tree_data_sel</item>
        <item/>
        <item>* lt_tree_data_sel_1[] = gt_tree_data_sel[].</item>
        <item> lt_tree_data_sel[] = gt_tree_data_sel[].</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item> DATA: lv_mod_attive TYPE abap_bool.</item>
        <item> lv_mod_attive = abap_false.</item>
        <item>* Solo in ripresa dati si dovr√† accettare tutto l&apos;Albero BOM arrivato</item>
        <item>* Tali accettazioni (eseguite in ripresa dati) non devono creare/modif</item>
        <item>* Quindi se abbiamo il flag attivo per l&apos;utente PP-KOSME allora i bott</item>
        <item> SELECT SINGLE disable_mod INTO lv_mod_attive FROM zpp_pdm_accetta</item>
        <item> WHERE username = sy-una</item>
        <item> AND disable_mod = aba</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv_mod_attiv</item>
        <item> &quot; processo separatamente i nodi selezionati per le bom</item>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_skipped_nodes).</item>
        <item> DATA: lv_sel_key TYPE ty_s_tree_data_sel-sel_key.</item>
        <item> CLEAR: lv_sel_key.</item>
        <item> &quot; la tabella gt_tree_data_sel deve contenere la selezione di un</item>
        <item> &quot; processi correttamente (e come faceva prima) le bom</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel.</item>
        <item/>
        <item> LOOP AT lt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE sel_k</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> IF ( lv_sel_key &lt;&gt; ls_tree_data_sel-sel_key ).</item>
        <item> ls_nodes_odp-key = ls_tree_data_sel-key.</item>
        <item> APPEND ls_nodes_odp TO lt_nodes_odp.</item>
        <item> ENDIF.</item>
        <item> lv_sel_key = ls_tree_data_sel-sel_key.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key</item>
        <item/>
        <item> &quot; Crea diba ----------------------------------------------------</item>
        <item>* create_diba( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* it_nodes = lt_nodes ).</item>
        <item> save_diba( ).</item>
        <item>* save_diba_2( ).</item>
        <item/>
        <item>* Tonolli_G - 10.01.2017 - Start Ins</item>
        <item>* A spot si verificano errori nell&apos;allineamento degli OdP che semb</item>
        <item>* fisicamente non sono state aggiornate. Quindi si procede con un</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* WAIT UP TO 5 SECONDS.</item>
        <item>* Tonolli_G - 10.01.2017 - End Ins</item>
        <item/>
        <item> &quot; aggiorna flag di presenza diba sulle selezioni globali</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_1) WHERE f_d</item>
        <item> LOOP AT lt_tree_data_sel INTO DATA(ls_tree_data_sel_2) WHERE m</item>
        <item> DATA(lv_tabix_3) = sy-tabix.</item>
        <item> ls_tree_data_sel_2-f_diba = abap_true.</item>
        <item> MODIFY lt_tree_data_sel FROM ls_tree_data_sel_2 INDEX lv_tab</item>
        <item> ENDLOOP.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> &quot; appendo l&apos;esito delle bom in una tabella di appoggio per tener</item>
        <item> APPEND LINES OF gt_tree_data_sel TO lt_tree_data_sel_old.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> &quot; ripristino la tabella dei nodi selezionati con l&apos;esito delle bom</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item/>
        <item>* Questo controllo √® stato introdotto perch√® a spot (e su un caso no</item>
        <item>* dalla tabella interna gt_tree_data_sel e a video la pop-up √® vuota</item>
        <item> CHECK NOT gt_tree_data_sel[] IS INITIAL.</item>
        <item/>
        <item>* &quot; salva la tabella dei nodi selezionati della finestra di accetta</item>
        <item>* lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item/>
        <item> &quot; esegue solo se non ci sono errori nelle bom</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANS</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WITH KEY ligh</item>
        <item>* LOOP AT gt_skipped_nodes INTO ls_skipped_nodes.</item>
        <item>* LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE sel_key</item>
        <item>* AND key &gt;</item>
        <item>* CLEAR: ls_nodes.</item>
        <item>* ls_nodes-key = ls_tree_data_sel-key.</item>
        <item>* APPEND ls_nodes TO lt_nodes.</item>
        <item>* ENDLOOP.</item>
        <item>* ENDLOOP.</item>
        <item/>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel.</item>
        <item>* where light &lt;&gt; icon_red_light. &quot;Si p</item>
        <item> CLEAR: ls_nodes.</item>
        <item> ls_nodes-key = ls_tree_data_sel-key.</item>
        <item> APPEND ls_nodes TO lt_nodes.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* Crea cicli - Inizio ---------------------</item>
        <item>* Preparazione</item>
        <item> create_cicli( iv_action = space</item>
        <item> iv_no_show_alv = abap_true</item>
        <item> it_nodes = lt_nodes ).</item>
        <item/>
        <item>* Esecuzione CALL FUNCTION &apos;ZPP_CREA_CICLO&apos;</item>
        <item> save_cicli( ).</item>
        <item>* Crea cicli - Fine ---------------------</item>
        <item/>
        <item> LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> DATA(lv_index) = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = l</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* Non √® possibile condizionare la creazione delle versioni per</item>
        <item>* LOOP AT lt_tree_data_sel_1 INTO DATA(lv_tree_data_sel_1)</item>
        <item>* WHERE matnr = ls_tree_data-matnr</item>
        <item>* AND f_diba = abap_true</item>
        <item>* AND plnnr IS NOT INITIAL.</item>
        <item>* EXIT.</item>
        <item>* ENDLOOP.</item>
        <item>* IF sy-subrc &lt;&gt; 0.</item>
        <item>* Esecuzione SUBMIT zpp_load_vers_prod</item>
        <item> save_prod_version( iv_matnr = ls_tree_data-matnr ).</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* BREAK kosmedev.</item>
        <item>* &quot; Modifica componenti OdP -------------------------------------</item>
        <item>* change_odp_components( iv_action = &apos;CHANGE_ODP&apos; &quot;space</item>
        <item>** iv_no_show_alv = abap_true</item>
        <item>* it_nodes = gt_skipped_nodes ). &quot;l</item>
        <item>*</item>
        <item>* &quot;save_odp_components( iv_storno = abap_false ).</item>
        <item>*</item>
        <item>* ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WIT</item>
        <item>* FIX BUG sul K5004512 - 85577701 - Start ins</item>
        <item>* Adesso la tabella gt_tree_data_sel avr√† i semafori dei cicli / versi</item>
        <item>* ripristino la tabella dei nodi selezionati con l&apos;esito delle bom</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item>* FIX BUG sul K5004512 - 85577701 - End ins</item>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;SELECT SINGLE disable_mod INTO lv</item>
        <item/>
        <item>** FIX BUG sul K5004512 - 85577701 - Start ins</item>
        <item>** Adesso la tabella gt_tree_data_sel avr√† i semafori dei cicli / vers</item>
        <item>** ripristino la tabella dei nodi selezionati con l&apos;esito delle bom</item>
        <item>* gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item>** FIX BUG sul K5004512 - 85577701 - End ins</item>
        <item/>
        <item> &quot; esegue solo se non ci sono errori nelle bom</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANSPOR</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE gt_tree_data_sel WITH KEY light =</item>
        <item/>
        <item> &quot; seleziona righe da accettare</item>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = ls_tree_data_sel_first-key )</item>
        <item>* lt_nodes = VALUE salv_t_nodes( ( key = lv_key ) ).</item>
        <item/>
        <item> IF ( lv_mod_attive = abap_false ).</item>
        <item>** Colorazione dell&apos;Albero (1¬∞ Step)</item>
        <item>* accettazione_noodp( iv_action = space</item>
        <item>* iv_no_show_alv = abap_true</item>
        <item>* iv_no_diba = abap_true &quot; non effettua</item>
        <item>** it_nodes = lt_nodes ).</item>
        <item>* it_nodes = gt_skipped_nodes ).</item>
        <item> ENDIF.</item>
        <item/>
        <item> REFRESH: lt_alberob.</item>
        <item> CLEAR: lt_alberob.</item>
        <item> FREE: lt_alberob.</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item>************************************************************************</item>
        <item>*</item>
        <item>************************************************************************</item>
        <item/>
        <item>** Colorazione dell&apos;Albero (2¬∞ Step)- Spostato in SAVE_ODP_COMPONENT</item>
        <item>* LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE light = spac</item>
        <item>* DATA(lv_tabix) = sy-tabix.</item>
        <item>* ls_tree_data_sel-elaborato = abap_true.</item>
        <item>* ls_tree_data_sel-light = icon_green_light.</item>
        <item>* ls_tree_data_sel-log = &apos;OK&apos;.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item>* &quot;READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_tr</item>
        <item>* READ TABLE gt_tree_data INTO ls_tree_data WITH KEY ref = ls_tre</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix_data) = sy-tabix.</item>
        <item>* DATA(ls_tree_data_old) = ls_tree_data.</item>
        <item>* ls_tree_data-elaborato = abap_true.</item>
        <item>* CLEAR: ls_tree_data-color, ls_tree_data-opname.</item>
        <item>* ls_tree_data-colore = &apos;GRIGIO&apos;.</item>
        <item>* set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_data TRA</item>
        <item>* IF ( ls_tree_data_old &lt;&gt; ls_tree_data ).</item>
        <item>* tree_row_refresh( ls_tree_data ).</item>
        <item>* ENDIF.</item>
        <item>* &quot;READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY key = ls_</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY ref = ls_t</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix_hier) = sy-tabix.</item>
        <item>* READ TABLE gt_albero INTO DATA(ls_albero) WITH KEY rootname</item>
        <item>* counter</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* DATA(lv_tabix_albero) = sy-tabix.</item>
        <item>* IF ( ls_albero-azione = &apos;D&apos; ).</item>
        <item>* DELETE gt_albero INDEX lv_tabix_albero.</item>
        <item>* DELETE gt_tree_hier INDEX lv_tabix_hier.</item>
        <item>* DELETE gt_tree_data INDEX lv_tabix_data.</item>
        <item>* DELETE FROM zpp_albero WHERE rootname = ls_albero-rootn</item>
        <item>* AND counter = ls_albero-count</item>
        <item>* sort_tree_table( CHANGING ct_albero = gt_albero ).</item>
        <item>* DATA: lo_nodes TYPE REF TO cl_salv_nodes,</item>
        <item>* lo_node TYPE REF TO cl_salv_node,</item>
        <item>* lo_parent TYPE REF TO cl_salv_node.</item>
        <item>* lo_nodes = go_tree-&gt;get_nodes( ).</item>
        <item>* lo_node = lo_nodes-&gt;get_node( ls_tree_hier-key ).</item>
        <item>* IF ( lo_node IS BOUND ).</item>
        <item>* lo_parent = lo_node-&gt;get_parent( ).</item>
        <item>* lo_node-&gt;set_visible( abap_false ).</item>
        <item>* FREE lo_node.</item>
        <item>* ENDIF.</item>
        <item>* ELSE.</item>
        <item>* ls_albero-elaborato = abap_true.</item>
        <item>* CLEAR: ls_albero-opname, ls_albero-mod_succ.</item>
        <item>* ls_albero-colore = &apos;GRIGIO&apos;.</item>
        <item>* ls_albero-itsob = ls_tree_data-itsob.</item>
        <item>* MODIFY gt_albero FROM ls_albero INDEX sy-tabix.</item>
        <item>* MODIFY zpp_albero FROM ls_albero.</item>
        <item>* COMMIT WORK AND WAIT.</item>
        <item>* ENDIF.</item>
        <item>* APPEND ls_albero TO lt_alberob.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item>** gv_to_be_refresh = abap_true.</item>
        <item>* ENDIF.</item>
        <item>* ENDLOOP.</item>
        <item/>
        <item> IF ( lv_mod_attive = abap_false ).</item>
        <item/>
        <item> &quot; Backup accettato ---------------------------------------------</item>
        <item> &quot; bisogna non trasferire alla tabella degli storni i record sett</item>
        <item> &quot; (solo per colorarli di giallo nell&apos;albero)</item>
        <item> DELETE lt_alberob WHERE azione = &apos;U&apos; AND mod_succ = space.</item>
        <item> backup_accettato( it_alberob = lt_alberob ).</item>
        <item/>
        <item> &quot; recupera la tabella dei nodi selezionati (con gli esiti) della</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item> ENDIF.</item>
        <item/>
        <item> ENDIF.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_ACCETTAZIONE_2>
      <SELECT_ODP>
        <item> METHOD select_odp.</item>
        <item> DATA: lv_lev TYPE zpp_albero-lev.</item>
        <item> DATA: ls_tabix TYPE sy-tabix.</item>
        <item> DATA: lt_nodes TYPE salv_t_nodes.</item>
        <item> DATA: ls_key TYPE ty_s_tree_hier-key.</item>
        <item/>
        <item> REFRESH: et_nodes, lt_nodes.</item>
        <item> CLEAR: et_nodes, lt_nodes.</item>
        <item> FREE: et_nodes, lt_nodes.</item>
        <item/>
        <item> lt_nodes[] = it_nodes[].</item>
        <item> SORT lt_nodes BY key.</item>
        <item/>
        <item> DATA(lv_lines) = 0.</item>
        <item> DESCRIBE TABLE lt_nodes LINES lv_lines.</item>
        <item/>
        <item>* La tabella IT_NODES (√® la copia di gt_skipped_nodes) contiene il rif</item>
        <item>* Se il materiale radice (nodi cardine) √® phantom allora esegue una ri</item>
        <item>* di 1¬∞ livello (i figli del ROOTNAME) se serve, cio√® sempre in presen</item>
        <item>* Inoltre i materiali selezionati devono essere disgr = &apos;ZMTO&apos;.</item>
        <item> IF lv_lines &gt; 0.</item>
        <item/>
        <item> LOOP AT lt_nodes INTO DATA(ls_nodes).</item>
        <item> ls_key = ls_nodes-key.</item>
        <item> CLEAR: ls_nodes.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key = l</item>
        <item> CHECK sy-subrc = 0.</item>
        <item/>
        <item>* Verifica se il materiale non √® ROOTNAME e se √® phantom in anagra</item>
        <item> CHECK ls_key &gt; 1 AND ( ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_da</item>
        <item/>
        <item>* REM: La tabella gt_tree_hier √® sortata per KEY crescente e mappa</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_discendente) WITH</item>
        <item/>
        <item>* Risalita del ramo e verifica se incontro un materiale in lt_node</item>
        <item> WHILE ( ls_key - 1 ) &gt; 0.</item>
        <item> ls_key = ls_key - 1.</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier_antenato) WITH</item>
        <item> IF ls_tree_hier_antenato-level &gt;= ls_tree_hier_discendente-lev</item>
        <item>* Sono in un sotto-ramo by-passo i materiali sono fratelli o</item>
        <item> ELSE.</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_</item>
        <item>* Verifica se il materiale non √® ROOTNAME e se √® phantom in an</item>
        <item> IF ls_key = 1.</item>
        <item> ls_nodes-key = ls_tree_hier_antenato-key.</item>
        <item> APPEND ls_nodes TO et_nodes .</item>
        <item> EXIT. &quot;USCITA WHILE ------&gt;</item>
        <item> ELSEIF ( ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-sobsl =</item>
        <item>* Continua la risalita</item>
        <item> ls_tree_hier_discendente = ls_tree_hier_antenato.</item>
        <item> ELSE.</item>
        <item> ls_nodes-key = ls_tree_hier_antenato-key.</item>
        <item> APPEND ls_nodes TO et_nodes .</item>
        <item> EXIT. &quot;USCITA WHILE ------&gt;</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDWHILE.</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item> ENDIF. &quot;IF lv_lines &gt; 1.</item>
        <item/>
        <item> SORT et_nodes BY key.</item>
        <item> DELETE ADJACENT DUPLICATES FROM et_nodes.</item>
        <item/>
        <item>* I materiali selezionati devono essere disgr = &apos;ZMTO&apos;.</item>
        <item> LOOP AT et_nodes INTO ls_nodes.</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_nodes-</item>
        <item> disgr = &apos;ZMTO&apos;.</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item>* E&apos; stato selezionato un materiale non ZMTO</item>
        <item> DELETE lt_nodes WHERE key = ls_nodes-key.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SELECT_ODP>
      <SAVE_ODP_CON_CONSUMI>
        <item> METHOD save_odp_con_consumi.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item>* lv_esito_tmp TYPE zdbc_esito,</item>
        <item>* lv_descr_esito_tmp TYPE zdbc_descr_esito,</item>
        <item> lv_aufnr TYPE afko-aufnr,</item>
        <item> lv_aufnr_fittizio TYPE afko-aufnr.</item>
        <item>* lv_garg TYPE seqg3-garg,</item>
        <item>* lv_str TYPE string,</item>
        <item>* lo_lock TYPE REF TO zcl_bc_lock_handler.</item>
        <item/>
        <item/>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = cs_t</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item/>
        <item>* Algoritmo funzione: ZPP_MODIFICA_ODP_CON_CONSUMI</item>
        <item>* . leggere resb dell&apos;odp in linea e dell&apos;odp fittizio appena creato</item>
        <item>* . allineamento dei phantom da Ticket 7463 in base al record in ZTPP</item>
        <item>* . escludere i componenti phantom (resb-dupms = &apos;X&apos;)</item>
        <item>* . confronto tabelle resb: non considerare i record delle due resb u</item>
        <item>* . se dal confronto precedente non abbiamo records residui =&gt; nessun</item>
        <item>* . per gli eventuali records rimanenti, sommare a parit√† di matnr la</item>
        <item>* materiale resb odp origine ma non in resb odp fittizio =&gt; cancel</item>
        <item>* materiale non presente in odp origine ma presente in odp fittizi</item>
        <item>* materiale presente in entrambi gli odp ma con quantit√† different</item>
        <item>* in ultima posizione per la quantit√† dell&apos;odp fittizio</item>
        <item>* . Aggiornare la tabella ZPP_MOP se un nuovo MOP √® staccato: CALL FU</item>
        <item>* . Ticket 8362 - Gestione automatica dei rientri da MOP in base al r</item>
        <item>* tecnico spostato da un phantom ad un&apos;altro phantom : codice &quot;geme</item>
        <item>* In automatico storno del consumo e registrazione del consumo con</item>
        <item> DATA: ls_tree_data TYPE ty_s_tree_data.</item>
        <item> CLEAR: ls_tree_data.</item>
        <item> MOVE-CORRESPONDING cs_tree_data_sel TO ls_tree_data.</item>
        <item/>
        <item>************************************************************************</item>
        <item> CALL FUNCTION &apos;ZPP_MODIFICA_ODP_CON_CONSUMI&apos;</item>
        <item> EXPORTING</item>
        <item> is_tree_data = ls_tree_data</item>
        <item> is_number = iv_number &quot;Parte finale del MOP, i 10 CHR</item>
        <item> IMPORTING</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item>************************************************************************</item>
        <item/>
        <item> &quot; gestisce esito funzione, mette esito su tabella di selezione e mod</item>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item> cs_tree_data_sel-light = icon_green_light.</item>
        <item> cs_tree_data_sel-log = &apos;OK&apos;. &quot;lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM cs_tree_data_sel INDEX iv_index.</item>
        <item> ELSEIF ( lv_esito = &apos;888&apos; ).</item>
        <item> cs_tree_data_sel-light = icon_yellow_light.</item>
        <item> cs_tree_data_sel-log = &apos;OdP non modificato&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM cs_tree_data_sel INDEX iv_index.</item>
        <item> ELSE.</item>
        <item> cs_tree_data_sel-light = icon_red_light.</item>
        <item> cs_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM cs_tree_data_sel INDEX iv_index.</item>
        <item> ENDIF.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SAVE_ODP_CON_CONSUMI>
      <SAVE_ODP_SENZA_CONSUMI>
        <item> METHOD save_odp_senza_consumi.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lv_aufnr TYPE afko-aufnr.</item>
        <item> DATA: lo_lock TYPE REF TO zcl_bc_lock_handler,</item>
        <item> lv_garg TYPE seqg3-garg,</item>
        <item> lv_str TYPE string.</item>
        <item/>
        <item> DATA: ln_afpo TYPE afpo.</item>
        <item> DATA: ln_return TYPE bapiret2.</item>
        <item> DATA: w_order_type TYPE bapi_order_copy-order_type.</item>
        <item> DATA: ln_orderdata TYPE bapi_pp_order_change.</item>
        <item> DATA: ln_orderdatax TYPE bapi_pp_order_changex.</item>
        <item> DATA: ln_order_status TYPE bapi_order_status.</item>
        <item> DATA: w_master_data_read TYPE bapiflag-bapiflag.</item>
        <item> DATA oref TYPE REF TO cx_root.</item>
        <item> DATA text TYPE string.</item>
        <item/>
        <item> CLEAR: oref, text.</item>
        <item/>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = cs_t</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY ref = ls</item>
        <item>* IF ( sy-subrc = 0 ). &quot;READ TABLE gt_tree_data</item>
        <item/>
        <item> CLEAR: ln_orderdata, ln_orderdatax, ln_afpo, lv_descr_esito.</item>
        <item/>
        <item> SELECT SINGLE * INTO ln_afpo FROM afpo WHERE aufnr EQ cs_tree_data_s</item>
        <item/>
        <item> ln_orderdata-prod_version = ln_afpo-verid.</item>
        <item> ln_orderdata-explosion_date = sy-datum.</item>
        <item> ln_orderdata-explode_new = &apos;X&apos;.</item>
        <item/>
        <item> ln_orderdatax-prod_version = &apos;X&apos;.</item>
        <item> ln_orderdatax-explosion_date = &apos;X&apos;.</item>
        <item/>
        <item>* Gestione di eventuali DUMP causati da ITAB_DUPLICATE_KEY dovuti</item>
        <item> TRY.</item>
        <item/>
        <item> CALL FUNCTION &apos;BAPI_PRODORD_CHANGE&apos;</item>
        <item> EXPORTING</item>
        <item> number = cs_tree_data_sel-aufnr</item>
        <item> orderdata = ln_orderdata</item>
        <item> orderdatax = ln_orderdatax</item>
        <item> IMPORTING</item>
        <item> return = ln_return</item>
        <item> order_type = w_order_type</item>
        <item> order_status = ln_order_status</item>
        <item> master_data_read = w_master_data_read.</item>
        <item/>
        <item> IF ( cs_tree_data_sel-odp_stats CS &apos;RIL.&apos; AND sy-langu = &apos;I&apos; ) O</item>
        <item> ( cs_tree_data_sel-odp_stats CS &apos;FREI&apos; AND sy-langu = &apos;D&apos; ) O</item>
        <item> ( cs_tree_data_sel-odp_stats CS &apos;REL&apos; AND sy-langu = &apos;E&apos; ).</item>
        <item> DATA: ls_orders TYPE bapi_order_key,</item>
        <item> lt_orders TYPE TABLE OF bapi_order_key,</item>
        <item> ls_return TYPE bapiret2,</item>
        <item> lt_detail_return TYPE TABLE OF bapi_order_return.</item>
        <item/>
        <item> CLEAR: lv_garg.</item>
        <item> CONCATENATE sy-mandt cs_tree_data_sel-aufnr INTO lv_garg RESPE</item>
        <item> lv_str = lv_garg.</item>
        <item> lo_lock = NEW #( iv_gname = &apos;AUFK&apos;</item>
        <item> iv_time = 10</item>
        <item> iv_garg = lv_str ).</item>
        <item/>
        <item> REFRESH: lt_orders, lt_detail_return.</item>
        <item> CLEAR: lt_orders, lt_detail_return.</item>
        <item> FREE: lt_orders, lt_detail_return.</item>
        <item/>
        <item> CLEAR: ls_return.</item>
        <item> ls_orders-order_number = cs_tree_data_sel-aufnr.</item>
        <item> APPEND ls_orders TO lt_orders.</item>
        <item> CALL FUNCTION &apos;BAPI_PRODORD_RELEASE&apos;</item>
        <item> EXPORTING</item>
        <item> release_control = &apos;1&apos;</item>
        <item>* WORK_PROCESS_GROUP = &apos;COWORK_BAPI&apos;</item>
        <item>* WORK_PROCESS_MAX = 99</item>
        <item> IMPORTING</item>
        <item> return = ls_return</item>
        <item> TABLES</item>
        <item> orders = lt_orders</item>
        <item> detail_return = lt_detail_return</item>
        <item>* APPLICATION_LOG =</item>
        <item> .</item>
        <item> ENDIF.</item>
        <item/>
        <item> CATCH cx_root INTO oref.</item>
        <item> text = oref-&gt;get_text( ).</item>
        <item/>
        <item> ENDTRY.</item>
        <item/>
        <item> IF text IS NOT INITIAL.</item>
        <item> ln_return-number = &apos;888&apos;.</item>
        <item> ENDIF.</item>
        <item/>
        <item> &quot; gestisce esito funzione, mette esito su tabella di selezione e mod</item>
        <item> IF ( ln_return-number = &apos;000&apos; ).</item>
        <item> cs_tree_data_sel-light = icon_green_light.</item>
        <item> cs_tree_data_sel-log = &apos;OK&apos;. &quot;lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM cs_tree_data_sel INDEX iv_index.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ELSEIF ( ln_return-number = &apos;888&apos; ).</item>
        <item> cs_tree_data_sel-light = icon_red_light.</item>
        <item> cs_tree_data_sel-log = &apos;ITAB_DUPLICATE_KEY. Consult your SAP adm</item>
        <item> MODIFY gt_tree_data_sel FROM cs_tree_data_sel INDEX iv_index.</item>
        <item> ELSE.</item>
        <item> cs_tree_data_sel-light = icon_red_light.</item>
        <item> IF ln_return-number = &apos;469&apos; AND ln_return-message_v2 IS INITIAL.</item>
        <item>* Lo standard SAP non ritorna il nome dell&apos;utente</item>
        <item>* DATA: lo_lock TYPE REF TO zcl_bc_lock_handler,</item>
        <item>* lv_garg TYPE seqg3-garg,</item>
        <item>* lv_str TYPE string.</item>
        <item> &quot;ls_enq TYPE enq.</item>
        <item/>
        <item> CLEAR: lv_garg.</item>
        <item> CONCATENATE sy-mandt cs_tree_data_sel-aufnr INTO lv_garg RESPECT</item>
        <item> lv_str = lv_garg.</item>
        <item> lo_lock = NEW #( iv_gname = &apos;AUFK&apos;</item>
        <item> iv_time = 10</item>
        <item> iv_garg = lv_str ).</item>
        <item> DATA(ls_enq) = lo_lock-&gt;get_lock( ).</item>
        <item> ln_return-message_v2 = ls_enq-guname.</item>
        <item> ENDIF. &quot;IF ln_return-number = &apos;469&apos; AND ln_return-message_v2 IS</item>
        <item> MESSAGE ID ln_return-id TYPE ln_return-type NUMBER ln_return-nu</item>
        <item> WITH ln_return-message_v1 ln_return-message_v2</item>
        <item> ln_return-message_v3 ln_return-message_v4</item>
        <item> INTO lv_descr_esito. &quot;Recupero descrizione messaggio errore</item>
        <item> cs_tree_data_sel-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM cs_tree_data_sel INDEX iv_index.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* ENDIF. &quot;IF ( sy-subrc = 0 ). &quot;READ TABLE gt_tree_data</item>
        <item>* ENDIF. &quot;IF ( sy-subrc = 0 ). READ TABLE gt_tree_hier</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_ODP_SENZA_CONSUMI>
      <GET_DIALOG_EXCLUDE>
        <item> METHOD get_dialog_exclude.</item>
        <item> ct_dialog_exclude = gt_dialog_exclude.</item>
        <item> ENDMETHOD.</item>
      </GET_DIALOG_EXCLUDE>
      <ADD_DIALOG_EXCLUDE>
        <item> METHOD add_dialog_exclude.</item>
        <item> DATA: ls_dialog_exclude TYPE slis_extab.</item>
        <item> CLEAR: ls_dialog_exclude.</item>
        <item> ls_dialog_exclude-fcode = iv_fcode.</item>
        <item> COLLECT ls_dialog_exclude INTO gt_dialog_exclude.</item>
        <item> ENDMETHOD.</item>
      </ADD_DIALOG_EXCLUDE>
      <REMOVE_DIALOG_EXCLUDE>
        <item> METHOD remove_dialog_exclude.</item>
        <item> DELETE gt_dialog_exclude WHERE fcode = iv_fcode.</item>
        <item> ENDMETHOD.</item>
      </REMOVE_DIALOG_EXCLUDE>
      <SAVE_PROD_VERSION>
        <item> METHOD save_prod_version.</item>
        <item> DATA: lr_matnr TYPE RANGE OF matnr,</item>
        <item> ls_matnr LIKE LINE OF lr_matnr.</item>
        <item/>
        <item> REFRESH: lr_matnr.</item>
        <item> CLEAR: lr_matnr.</item>
        <item> FREE: lr_matnr.</item>
        <item/>
        <item> CLEAR: ls_matnr.</item>
        <item> ls_matnr-sign = &apos;I&apos;.</item>
        <item> ls_matnr-option = &apos;EQ&apos;.</item>
        <item> ls_matnr-low = iv_matnr.</item>
        <item> APPEND ls_matnr TO lr_matnr.</item>
        <item/>
        <item> IF gs_sel-p_no_ver IS INITIAL. &quot;Gestione eccezioni sulle Versioni</item>
        <item> SUBMIT zpp_load_vers_prod WITH s_matnr IN lr_matnr[]</item>
        <item> WITH p_werks = &apos;6301&apos;</item>
        <item> WITH p_test = space</item>
        <item> WITH p_submit = &apos;X&apos;</item>
        <item> AND RETURN.</item>
        <item> ENDIF. &quot;IF gs_sel-p_no_ver IS INITIAL.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_PROD_VERSION>
      <CREATE_DIBA_2>
        <item> METHOD create_diba_2.</item>
        <item> DATA: lv_index TYPE i,</item>
        <item> lt_tree_data_sel TYPE TABLE OF zpp_pdm_monitor_alv,</item>
        <item> ls_tree_data_sel TYPE zpp_pdm_monitor_alv,</item>
        <item> lv_first TYPE abap_bool,</item>
        <item> lt_nodes TYPE salv_t_nodes, &quot;Tabella interna finale</item>
        <item> lt_nodes_tmp TYPE salv_t_nodes. &quot;Tabella interna finale</item>
        <item> DATA: ls_colore1 TYPE zpp_pdm_monitor_alv-colore, &quot;Tonolli_G - Ins</item>
        <item> ls_colore2 TYPE zpp_pdm_monitor_alv-colore. &quot;Tonolli_G - Ins</item>
        <item/>
        <item> gv_action = iv_action.</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel, lt_tree_data_sel.</item>
        <item/>
        <item> IF ( it_nodes[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Selezionare almeno una riga&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> IF ( gv_pspnr IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Wbs non presente&apos;.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> BREAK kosmedev.</item>
        <item> lv_first = abap_true.</item>
        <item/>
        <item> REFRESH: lt_nodes.</item>
        <item> CLEAR: lt_nodes.</item>
        <item> FREE: lt_nodes.</item>
        <item/>
        <item> &quot; GT_SKIPPED_NODES &lt;-- tabella globale</item>
        <item> skip_duplicates_in_branch( it_nodes = it_nodes ).</item>
        <item/>
        <item>*gt_skipped_nodes[] = it_nodes[].</item>
        <item>* Nellla tabella it_nodes abbiamo i record selezionati dall&apos;utente</item>
        <item>* 1¬∞ Aggiunta dei padri</item>
        <item>* Importante √® che i padri non siano ROSSI altrimenti il comando non f</item>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_nodes).</item>
        <item> DATA(lv_key) = ls_nodes-key.</item>
        <item/>
        <item> REFRESH: lt_nodes_tmp.</item>
        <item> CLEAR: lt_nodes_tmp.</item>
        <item> FREE: lt_nodes_tmp.</item>
        <item/>
        <item> WHILE ( lv_key &gt; 0 ).</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = l</item>
        <item> IF ( sy-subrc = 0 ). &quot;READ TABLE gt_tree_hier INTO DATA(ls_tre</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY key =</item>
        <item> disgr</item>
        <item> CHECK sy-subrc = 0. &quot; verifico che il nodo sia ZMTO.</item>
        <item> ls_colore1 = ls_tree_data-colore.</item>
        <item>* Tonolli_G - Start Del - La READ non garantisce che si posizioni</item>
        <item>* READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY node = ls_t</item>
        <item>* level = ls_t</item>
        <item>* Tonolli_G - Start Del -</item>
        <item>* Tonolli_G - Start Ins</item>
        <item>* REM: La tabella gt_tree_hier √® sortata per KEY crescente e mappa</item>
        <item>* Nel caso nel sotto ramo del LOOP ci siano soddisfatte pi√π volte</item>
        <item> LOOP AT gt_tree_hier INTO ls_tree_hier WHERE key &lt; lv_key</item>
        <item> AND node = ls_tree_h</item>
        <item> AND level = ls_tree_h</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 ). &quot;LOOP AT gt_tree_hier INTO ls_tree_hier</item>
        <item> lv_key = ls_tree_hier-key.</item>
        <item> READ TABLE lt_nodes WITH KEY key = ls_tree_hier-key TRANSPOR</item>
        <item>* IF ( sy-subrc &lt;&gt; 0 ). &quot; ho bisogno sempre del padre per o</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_</item>
        <item> ls_colore2 = ls_tree_data-colore.</item>
        <item> DATA(ls_nodes_tmp) = ls_nodes.</item>
        <item> CLEAR ls_nodes_tmp.</item>
        <item> ls_nodes_tmp-key = ls_tree_hier-key.</item>
        <item> IF NOT ( ls_colore1 = &apos;ROSSO&apos; AND ls_colore2 = &apos;ROSSO&apos; ).</item>
        <item> APPEND ls_nodes_tmp TO lt_nodes_tmp. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item>* ENDIF.</item>
        <item> ELSE.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ENDIF. &quot;IF ( sy-subrc = 0 ). &quot;LOOP AT gt_tree_hier INTO ls</item>
        <item> ELSE.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ENDIF. &quot;IF ( sy-subrc = 0 ). &quot;READ TABLE gt_tree_hier INTO D</item>
        <item> IF lv_key = 1.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ENDIF.</item>
        <item>* lv_key = lv_key - 1.</item>
        <item> ENDWHILE. &quot;To</item>
        <item> IF NOT ( ls_colore1 = &apos;ROSSO&apos; AND ls_colore2 = &apos;ROSSO&apos; ). &quot;Tono</item>
        <item> SORT lt_nodes_tmp BY key.</item>
        <item> DELETE ADJACENT DUPLICATES FROM lt_nodes_tmp.</item>
        <item> APPEND LINES OF lt_nodes_tmp TO lt_nodes.</item>
        <item> APPEND ls_nodes TO lt_nodes. &quot;&lt;------</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT it_nodes INTO DATA(ls_nodes).</item>
        <item/>
        <item> IF NOT ( ls_colore1 = &apos;ROSSO&apos; AND ls_colore2 = &apos;ROSSO&apos; ). &quot;Tonoll</item>
        <item>* 2¬∞ Aggiunta dei figli</item>
        <item> LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> lv_index = ls_nodes-key.</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY key = ls_node</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot; verifica che il nodo sia un ramo e non una foglia</item>
        <item> READ TABLE gt_tree_hier WITH KEY parent = ls_tree_hier-node TR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> READ TABLE gt_tree_data INTO ls_tree_data WITH KEY key = ls_</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CHECK NOT ( ls_tree_data-colore = &apos;ROSSO&apos; AND ls_tree_data</item>
        <item>* CHECK ls_tree_data-colore &lt;&gt; &apos;GRIGIO&apos;.</item>
        <item> IF ( ls_tree_data-colore = &apos;GIALLO&apos; ).</item>
        <item>* CHECK ls_tree_data-azione = &apos;U&apos; AND ls_tree_data-mod_succ</item>
        <item> ENDIF.</item>
        <item>* IF ( ls_tree_data-beskz = &apos;E&apos; AND ls_tree_data-disgr = &apos;ZMT</item>
        <item> IF ( ls_tree_data-disgr = &apos;ZMTO&apos; ).</item>
        <item>* READ TABLE gt_tree_hier WITH KEY parent = ls_tree_data-</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_tree_data TO ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = ls_tree_hier-level.</item>
        <item/>
        <item> &quot; se √® un padre aggiunto</item>
        <item> READ TABLE gt_skipped_nodes WITH KEY key = ls_nodes-key</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> ls_tree_data_sel-upd_bom_up = abap_true.</item>
        <item> ENDIF.</item>
        <item/>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> &quot; va in ricorsione solo se il nodo √® stato effettivament</item>
        <item> READ TABLE it_nodes WITH KEY key = ls_nodes-key TRANSPOR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item>* select_branch_root( EXPORTING is_tree_data = ls_tree_</item>
        <item>* In ricorsione aggiunge tutti i figli</item>
        <item> select_branch_root_2( EXPORTING is_tree_data = ls_tree</item>
        <item> iv_beskz = space</item>
        <item> CHANGING ct_tree_data_sel = gt_t</item>
        <item> ENDIF.</item>
        <item>* ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT lt_nodes INTO ls_nodes.</item>
        <item> ENDIF.</item>
        <item/>
        <item> DELETE gt_tree_data_sel WHERE matnr &lt;&gt; gs_current_alv_data-rootname</item>
        <item> AND ( &quot;beskz &lt;&gt; &apos;E&apos; OR</item>
        <item> disgr &lt;&gt; &apos;ZMTO&apos; ).</item>
        <item> &quot; OR colore &lt;&gt; &apos;GRIGIO&apos;.</item>
        <item> DELETE ADJACENT DUPLICATES FROM gt_tree_data_sel COMPARING matnr.</item>
        <item/>
        <item> IF ( iv_action = &apos;ANT&apos; OR iv_action = &apos;PROD&apos; ).</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_sel) WHERE NOT aufnr IS INIT</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Nessun odp da aggiornare. Verificare il p</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_sel WHERE NOT aufnr IS INITIAL</item>
        <item> AND colore = &apos;ROSSO&apos;.</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Odp presenti su componenti da cancellare.</item>
        <item> RETURN.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item> &quot; assegna la chiave di raggruppamento sel_key per poter eseguire la</item>
        <item> LOOP AT gt_skipped_nodes INTO DATA(ls_skipped_nodes).</item>
        <item> DATA(lv_tabix) = sy-tabix.</item>
        <item> &quot; raggruppo per pacchetti</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY key = ls_skipped_nodes-key TR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> DATA(lv_tabix_2) = sy-tabix.</item>
        <item> LOOP AT gt_tree_data_sel INTO ls_tree_data_sel WHERE sel_key IS</item>
        <item> ls_tree_data_sel-sel_key = ls_skipped_nodes-key.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX sy-tabix.</item>
        <item> ENDLOOP.</item>
        <item> ELSE.</item>
        <item> &quot;DELETE gt_skipped_nodes INDEX lv_tabix.</item>
        <item> &quot; se arrivo qui ho selezionato uno ZMTO che √® foglia e bisogna a</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY key = ls_ski</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot; associa la chiave di raggruppamento sul padre</item>
        <item> ls_tree_data_sel-sel_key = ls_skipped_nodes-key.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix.</item>
        <item> &quot; aggiunge nella tabella selezionati il nodo foglia</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_data) WITH KEY ref = ls_h</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> MOVE-CORRESPONDING ls_data TO ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-level = ls_hier-level.</item>
        <item> ls_tree_data_sel-sel_key = ls_skipped_nodes-key.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> lv_key = lv_key - 1.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( iv_no_show_alv = abap_false ).</item>
        <item> IF ( gt_tree_data_sel[] IS INITIAL ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare righe selezionate&apos;.</item>
        <item> ELSE.</item>
        <item> IF ( iv_action = &apos;ANT&apos; OR iv_action = &apos;PROD&apos; ).</item>
        <item> remove_dialog_exclude( &apos;MOD_ODP&apos; ).</item>
        <item> ENDIF.</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap</item>
        <item> ( fieldname = &apos;TREE_LEVEL&apos; visible =</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </CREATE_DIBA_2>
      <DIFF_BRANCH_NODES>
        <item> METHOD diff_branch_nodes.</item>
        <item> TYPES: BEGIN OF ty_s_matnr,</item>
        <item> matnr TYPE matnr,</item>
        <item> relqty TYPE zpp_albero-relqty,</item>
        <item> itsob TYPE zpp_albero-itsob,</item>
        <item> colore TYPE zpp_albero-colore,</item>
        <item> log TYPE zpp_pdm_monitor_alv-log,</item>
        <item> END OF ty_s_matnr.</item>
        <item> DATA: lt_comp_err TYPE TABLE OF ty_s_matnr, &quot; tabella contenente i r</item>
        <item> lt_childs_1 TYPE TABLE OF ty_s_matnr, &quot; tabella figli primo ra</item>
        <item> lt_childs_2 TYPE TABLE OF ty_s_matnr, &quot; tabella figli rami suc</item>
        <item> ls_childs_1 TYPE ty_s_matnr,</item>
        <item> ls_childs_2 TYPE ty_s_matnr.</item>
        <item/>
        <item> TYPES:</item>
        <item> BEGIN OF ty_s_marc,</item>
        <item> matnr TYPE marc-matnr,</item>
        <item> beskz TYPE marc-beskz, &quot;Tipo approvv.</item>
        <item> sobsl TYPE marc-sobsl, &quot;App.Spec.</item>
        <item> disgr TYPE marc-disgr, &quot;Gruppo di pianif. ZMTO o ZMTS</item>
        <item> nfmat TYPE marc-nfmat, &quot;Materiale sost.</item>
        <item> END OF ty_s_marc.</item>
        <item> TYPES: ty_t_marc TYPE TABLE OF ty_s_marc.</item>
        <item> DATA: ct_marc TYPE ty_t_marc.</item>
        <item> DATA: lv_marc_1 TYPE ty_s_marc.</item>
        <item> DATA: lv_marc_2 TYPE ty_s_marc.</item>
        <item/>
        <item>* Controlli integrit√† dell&apos;Albero BOM</item>
        <item>* Se un codice √® padre allora deve essere padre sempre e sempre con gl</item>
        <item>* Verifica che la BOM non sia ricorsiva (padre come figlio)</item>
        <item>* Verifica che la BOM non sia ricorsiva indiretta (nonno come nipote)</item>
        <item>* Verifica che la BOM nel passaggio di livello abbia CHILDNAME = PAREN</item>
        <item>* Verifica che un record VERDE non abbia date RELENDDATE &lt;&gt; infinito</item>
        <item>* Verifica che la WBS se scompare con un codice ZMTS non riappaia nei</item>
        <item>* Verifica che ogni codice non abbia MARC-NFMAT ( Materiale sost. ) va</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item> ev_ret = 0.</item>
        <item> CLEAR: gv_wrong_tree.</item>
        <item/>
        <item> REFRESH: lt_comp_err, ct_marc.</item>
        <item> CLEAR: lt_comp_err, ct_marc.</item>
        <item> FREE: lt_comp_err, ct_marc.</item>
        <item/>
        <item> LOOP AT gt_albero INTO DATA(ls_albero) FROM 2 WHERE colore &lt;&gt; &apos;ROSSO</item>
        <item> DATA(lv_tabix_albero_1) = sy-tabix.</item>
        <item> DATA(lv_tabix_albero_2) = sy-tabix.</item>
        <item/>
        <item> REFRESH: lt_childs_1, lt_childs_2.</item>
        <item> CLEAR: lt_childs_1, lt_childs_2.</item>
        <item> FREE: lt_childs_1, lt_childs_2.</item>
        <item/>
        <item>* IF ls_albero-childname = &apos;50545349&apos;. &quot;Solo per test</item>
        <item>* BREAK kosmedev.</item>
        <item>* BREAK pp-kosme.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* Verifica se il ramo √® gi√† stato identificato come errato. lt_comp_</item>
        <item> READ TABLE lt_comp_err INTO DATA(ls_comp_err) WITH KEY matnr = ls_</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE lt_comp_err</item>
        <item/>
        <item>* Verifica che la WBS se scompare con un codice ZMTS non riappaia</item>
        <item> IF ( NOT gs_sel-p_nozmts IS INITIAL ).</item>
        <item> READ TABLE ct_marc INTO lv_marc_1</item>
        <item> WITH KEY matnr = ls_albero-childname.</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item>* Estrazione dati</item>
        <item> SELECT matnr disgr nfmat APPENDING CORRESPONDING FIELDS OF T</item>
        <item> FROM marc</item>
        <item> WHERE matnr = ls_albero-childname</item>
        <item> AND werks = &apos;6301&apos;.</item>
        <item> READ TABLE ct_marc INTO lv_marc_1 WITH KEY matnr = ls_albero</item>
        <item> ENDIF.</item>
        <item> READ TABLE ct_marc INTO lv_marc_2 WITH KEY matnr = ls_albero-p</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item>* Estrazione dati</item>
        <item> SELECT matnr disgr APPENDING CORRESPONDING FIELDS OF TABLE c</item>
        <item> FROM marc</item>
        <item> WHERE matnr = ls_albero-parentname</item>
        <item> AND werks = &apos;6301&apos;.</item>
        <item> READ TABLE ct_marc INTO lv_marc_2 WITH KEY matnr = ls_albero</item>
        <item> ENDIF.</item>
        <item> IF lv_marc_1-disgr = &apos;ZMTO&apos; AND lv_marc_2-disgr = &apos;ZMTS&apos;.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-parentname.</item>
        <item> ls_comp_err-relqty = ls_albero-relqty.</item>
        <item> ls_comp_err-itsob = ls_albero-itsob.</item>
        <item> CONCATENATE &apos;Verificare tabella ZPP_ALBERO. Padre ZMTS:&apos; ls_</item>
        <item> INTO ls_comp_err-log SEPARATED BY space.</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( NOT gs_sel-p_nozmts IS INITIAL ).</item>
        <item/>
        <item>* Verifica che ogni codice non abbia MARC-NFMAT ( Materiale sost.</item>
        <item> READ TABLE ct_marc INTO lv_marc_1</item>
        <item> WITH KEY matnr = ls_albero-childname.</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item>* Estrazione dati</item>
        <item> SELECT matnr beskz sobsl disgr nfmat APPENDING CORRESPONDING F</item>
        <item> FROM marc</item>
        <item> WHERE matnr = ls_albero-childname</item>
        <item> AND werks = &apos;6301&apos;.</item>
        <item> READ TABLE ct_marc INTO lv_marc_1 WITH KEY matnr = ls_albero-c</item>
        <item> ENDIF.</item>
        <item> IF lv_marc_1-nfmat &lt;&gt; &apos;&apos;.</item>
        <item/>
        <item>* Verifica se il padre √® phantom</item>
        <item> READ TABLE ct_marc INTO lv_marc_2</item>
        <item> WITH KEY matnr = ls_albero-parentname.</item>
        <item> IF sy-subrc &lt;&gt; 0.</item>
        <item>* Estrazione dati</item>
        <item> SELECT matnr beskz sobsl disgr nfmat APPENDING CORRESPONDING</item>
        <item> FROM marc</item>
        <item> WHERE matnr = ls_albero-parentname</item>
        <item> AND werks = &apos;6301&apos;.</item>
        <item> READ TABLE ct_marc INTO lv_marc_2 WITH KEY matnr = ls_albero</item>
        <item> ENDIF.</item>
        <item> IF ( lv_marc_2-disgr = &apos;ZTMS&apos; AND</item>
        <item> lv_marc_2-beskz = &apos;E&apos; AND</item>
        <item> lv_marc_2-sobsl = &apos;50&apos;) OR</item>
        <item> lv_marc_2-disgr = &apos;ZTMO&apos;.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-childname.</item>
        <item> ls_comp_err-relqty = ls_albero-relqty.</item>
        <item> CONCATENATE &apos;Materiale con componente con codice sostitutivo</item>
        <item> INTO ls_comp_err-log SEPARATED BY space.</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Ricerca del tabix di fine del ramo in corso</item>
        <item>* Posizionamento sul record sucessivo</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_tmp) FROM lv_tabix_albero_</item>
        <item> WHERE colore &lt;&gt; &apos;ROSS</item>
        <item> lv_tabix_albero_2 = sy-tabix. &quot;sy-tabix del&apos;ultimo record de</item>
        <item/>
        <item>* Posizionamento sul record sucessivo (lv_tabix_albero_2 + 1)</item>
        <item>* REM: gt_albero √® sortato BY SORT</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_next) FROM lv_tabix_albe</item>
        <item> WHERE colore &lt;&gt; &apos;R</item>
        <item> EXIT. &quot;Uscita immediata al record successivo</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 OR ls_albero_next-lev &lt;= ls_albero-lev ).</item>
        <item> EXIT. &quot;------&gt; Uscita per cambio ramo</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> CHECK lv_tabix_albero_2 &gt; lv_tabix_albero_1.</item>
        <item>* Il nodo ls_albero ha figli</item>
        <item> IF ( lt_childs_1[] IS INITIAL ). &quot;Il nodo ls_albero ha figli</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_2) FROM lv_tabix_albero_</item>
        <item> TO lv_tabix_albero_</item>
        <item> WHERE parentname = ls</item>
        <item> AND lev = ls_albero</item>
        <item> AND colore &lt;&gt; &apos;ROSS</item>
        <item> CLEAR: ls_childs_1.</item>
        <item> ls_childs_1-matnr = ls_albero_2-childname.</item>
        <item>* IF ls_albero-relqty &gt; 0.</item>
        <item>* ls_childs_1-relqty = ls_albero_2-relqty / ls_albero-relqt</item>
        <item>* ELSE.</item>
        <item> ls_childs_1-relqty = ls_albero_2-relqty.</item>
        <item>* ENDIF.</item>
        <item> ls_childs_1-itsob = ls_albero_2-itsob.</item>
        <item> ls_childs_1-colore = ls_albero_2-colore.</item>
        <item> APPEND ls_childs_1 TO lt_childs_1. &quot;&lt;------</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> REFRESH: lt_childs_2.</item>
        <item> CLEAR: lt_childs_2.</item>
        <item> FREE: lt_childs_2.</item>
        <item/>
        <item> DATA(lv_tabix_albero_11) = lv_tabix_albero_2.</item>
        <item> DATA(lv_tabix_albero_22) = lv_tabix_albero_2.</item>
        <item> DATA(lv_found) = abap_false.</item>
        <item> DATA(lv_lev) = 0.</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_first) FROM lv_tabix_alb</item>
        <item> WHERE childname =</item>
        <item> AND colore &lt;&gt; &apos;</item>
        <item> lv_tabix_albero_11 = sy-tabix.</item>
        <item> EXIT. &quot;Uscita al 1¬∞ childname successivo rispetto al child</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO DATA(ls_albero_first) FROM</item>
        <item> IF ( sy-subrc = 0 ). &quot;1¬∞ childname successivo rispetto al ch</item>
        <item/>
        <item>* Posizionamento sul record sucessivo</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_tmp_2) FROM lv_tabix_a</item>
        <item> WHERE colore &lt;&gt;</item>
        <item> lv_tabix_albero_22 = sy-tabix. &quot;sy-tabix del&apos;ultimo reco</item>
        <item/>
        <item>* Posizionamento sul record sucessivo</item>
        <item>* REM: gt_albero √® sortato BY SORT</item>
        <item> LOOP AT gt_albero INTO ls_albero_next FROM lv_tabix_albero</item>
        <item> WHERE colore &lt;&gt; &apos;ROS</item>
        <item> EXIT. &quot;Uscita immediata al record successivo</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 OR ls_albero_next-lev &lt;= ls_albero_firs</item>
        <item> EXIT. &quot;Uscita per cambio ramo</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO DATA(ls_albero_tmp_2) FRO</item>
        <item> CHECK lv_tabix_albero_22 &gt; lv_tabix_albero_11.</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_3) FROM lv_tabix_alber</item>
        <item> TO lv_tabix_alber</item>
        <item> WHERE parentname =</item>
        <item> AND lev = ls_albe</item>
        <item> AND colore &lt;&gt; &apos;RO</item>
        <item> CLEAR: ls_childs_2.</item>
        <item> ls_childs_2-matnr = ls_albero_3-childname.</item>
        <item>* IF ls_albero_first-relqty &gt; 0.</item>
        <item>* ls_childs_2-relqty = ls_albero_3-relqty / ls_albero_fir</item>
        <item>* ELSE.</item>
        <item> ls_childs_2-relqty = ls_albero_3-relqty.</item>
        <item>* ENDIF.</item>
        <item> ls_childs_2-itsob = ls_albero_3-itsob.</item>
        <item> ls_childs_2-colore = ls_albero_3-colore.</item>
        <item> APPEND ls_childs_2 TO lt_childs_2. &quot;&lt;------</item>
        <item> ENDLOOP.</item>
        <item> &quot; confronta i due rami</item>
        <item>* IF ( lv_found = abap_true ).</item>
        <item> DATA(lv_lines_1) = 0.</item>
        <item> DATA(lv_lines_2) = 0.</item>
        <item> DESCRIBE TABLE lt_childs_1 LINES lv_lines_1.</item>
        <item> DESCRIBE TABLE lt_childs_2 LINES lv_lines_2.</item>
        <item> IF ( lv_lines_1 = lv_lines_2 ).</item>
        <item> DATA: lt_matnr TYPE TABLE OF ty_s_matnr,</item>
        <item> ls_matnr TYPE ty_s_matnr.</item>
        <item/>
        <item> REFRESH: lt_matnr.</item>
        <item> CLEAR: lt_matnr.</item>
        <item> FREE: lt_matnr.</item>
        <item/>
        <item> LOOP AT lt_childs_1 INTO ls_childs_1.</item>
        <item> &quot; controlla la non duplicazione del componente</item>
        <item> READ TABLE lt_matnr WITH KEY matnr = ls_childs_1-matnr T</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-childname.</item>
        <item> ls_comp_err-relqty = ls_albero-relqty.</item>
        <item> ls_comp_err-log = &apos;Materiale con BOM con componente ri</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> EXIT.</item>
        <item> ELSE.</item>
        <item>* Controlla esatta corrispondenza record in lt_childs_2</item>
        <item> READ TABLE lt_childs_2 WITH KEY matnr = ls_childs_1-m</item>
        <item> relqty = ls_childs_1-r</item>
        <item> itsob = ls_childs_1-i</item>
        <item> TRANSPORTING NO FIELDS.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item>* Bisogna entrare nel merito dei colori</item>
        <item> READ TABLE lt_childs_2 INTO DATA(ll_childs_2) WITH K</item>
        <item/>
        <item/>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> IF ( ll_childs_2-colore = &apos;VERDE&apos; AND ls_childs_1</item>
        <item> ( ll_childs_2-colore &lt;&gt; &apos;VERDE&apos; AND ls_childs_1</item>
        <item>* Non √® possibile testare l&apos;ITSOB quindi avanti s</item>
        <item> ELSE.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-childname.</item>
        <item> ls_comp_err-relqty = ls_albero-relqty.</item>
        <item> ls_comp_err-itsob = ls_albero-itsob.</item>
        <item> CONCATENATE &apos;Materiale con BOM ripetuta e divers</item>
        <item> INTO ls_comp_err-log SEPARATED BY space.</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> IF ( ll_childs_2-colore = &apos;VERDE&apos; AND ls_childs_1</item>
        <item> ( ll_childs_2-colore &lt;&gt; &apos;VERDE&apos; AND ls_childs_1</item>
        <item>* Non √® possibile testare l&apos;ITSOB quindi avanti s</item>
        <item> ELSE.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-childname.</item>
        <item> ls_comp_err-relqty = ls_albero-relqty.</item>
        <item> ls_comp_err-itsob = ls_albero-itsob.</item>
        <item> ls_comp_err-log = &apos;Materiale con BOM ripetuta</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ls_matnr-matnr = ls_childs_1-matnr.</item>
        <item> APPEND ls_matnr TO lt_matnr.</item>
        <item> ENDLOOP.</item>
        <item> ELSE.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-childname.</item>
        <item> ls_comp_err-log = &apos;Materiale con BOM ripetuta e diversa</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> ENDIF. &quot;IF ( lv_lines_1 = lv_lines_2 ).</item>
        <item> ENDIF. &quot;IF ( sy-subrc = 0 ). &quot;1¬∞ childname successivo risp</item>
        <item>* Verifica che la BOM non sia ricorsiva (padre come figlio)</item>
        <item>* Continuare se il ramo non √® GIA&apos; stato identificato come errat</item>
        <item> READ TABLE lt_comp_err INTO ls_comp_err WITH KEY matnr = ls_al</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE lt_comp_err</item>
        <item> LOOP AT lt_childs_1 INTO ls_childs_1 WHERE matnr = ls_albero</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_childs_1-matnr.</item>
        <item> ls_comp_err-relqty = ls_childs_1-relqty.</item>
        <item> ls_comp_err-itsob = ls_childs_1-itsob.</item>
        <item> ls_comp_err-log = &apos;Ricorsione nella BOM. Il materiale √®</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE lt_comp_err</item>
        <item> ENDIF. &quot;IF ( lt_childs_1[] IS INITIAL ). &quot;Il nodo ls_albero</item>
        <item> ENDIF. &quot;IF ( sy-subrc &lt;&gt; 0 ). &quot;READ TABLE lt_comp_err</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO DATA(ls_albero) FROM 2 WHERE colo</item>
        <item/>
        <item> CLEAR: ls_comp_err.</item>
        <item>* Verifica che la BOM non sia ricorsiva indiretta (nonno come nipote)</item>
        <item> LOOP AT gt_albero INTO ls_albero FROM 2.</item>
        <item> DATA(ls_albero_tabix) = sy-tabix.</item>
        <item>* Leggo il record sucessivo per verificare se il record corrente ls_</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero_1) INDEX ls_albero_tabix</item>
        <item> IF ( sy-subrc = 0 AND NOT ( ls_albero_1-lev &gt; ls_albero-lev ) ) OR</item>
        <item> sy-subrc &lt;&gt; 0.</item>
        <item>* ls_albero identifica un nodo foglia. Trovata la foglia si verifi</item>
        <item> LOOP AT gt_albero INTO ls_albero_2 WHERE parentname = ls_albero-</item>
        <item> DATA(ls_albero_2_tabix) = sy-tabix.</item>
        <item>* Trovato il ramo per il nodo foglia</item>
        <item> READ TABLE gt_albero INTO ls_albero_3 INDEX ls_albero_2_tabix</item>
        <item> IF sy-subrc = 0.</item>
        <item> DATA(ls_albero_3_tabix) = sy-tabix.</item>
        <item> WHILE ls_albero_3-lev &gt; ls_albero_2-lev.</item>
        <item> IF ls_albero_3-childname = ls_albero-childname.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero_3-childname.</item>
        <item> ls_comp_err-relqty = ls_albero_3-relqty.</item>
        <item> ls_comp_err-itsob = ls_albero_3-itsob.</item>
        <item> ls_comp_err-log = &apos;Ricorsione indiretta nell&apos;&apos;Albero</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ELSE.</item>
        <item> READ TABLE gt_albero INTO ls_albero_3 INDEX ls_albero_3_</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_albero_3_tabix = sy-tabix.</item>
        <item> ELSE.</item>
        <item> EXIT. &quot;------&gt; USCITA WHILE</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDWHILE.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO DATA(ls_albero_2) WHERE paren</item>
        <item> ENDIF. &quot;IF sy-subrc = 0 AND NOT ( ls_albero_1-lev &gt; ls_albero-le</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO ls_albero FROM 2.</item>
        <item/>
        <item>* Verifica che la BOM nel passaggio di livello abbia CHILDNAME = PAREN</item>
        <item> LOOP AT gt_albero INTO ls_albero FROM 2.</item>
        <item> ls_albero_tabix = sy-tabix.</item>
        <item>* Leggo il record sucessivo per verificare se abbiamo un cambio live</item>
        <item> READ TABLE gt_albero INTO ls_albero_1 INDEX ls_albero_tabix + 1.</item>
        <item> IF ( sy-subrc = 0 AND ( ls_albero-lev + 1 ) = ls_albero_1-lev ).</item>
        <item> IF ( ls_albero-childname &lt;&gt; ls_albero_1-parentname ).</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero_1-parentname.</item>
        <item> ls_comp_err-relqty = ls_albero_1-relqty.</item>
        <item> ls_comp_err-itsob = ls_albero_1-itsob.</item>
        <item> CONCATENATE &apos;Verificare tabella ZPP_ALBERO. Figlio:&apos; ls_albero</item>
        <item> INTO ls_comp_err-log SEPARATED BY space.</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> ENDIF.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO ls_albero FROM 2.</item>
        <item/>
        <item>* Verifica che un record VERDE non abbia date RELENDDATE &lt;&gt; infinito</item>
        <item> LOOP AT gt_albero INTO ls_albero FROM 2</item>
        <item> WHERE colore = &apos;VERDE&apos;</item>
        <item> AND relenddate &lt;&gt; c_data_infinito</item>
        <item> ls_albero_tabix = sy-tabix.</item>
        <item> CLEAR: ls_comp_err.</item>
        <item> ls_comp_err-matnr = ls_albero-parentname.</item>
        <item> ls_comp_err-relqty = ls_albero-relqty.</item>
        <item> ls_comp_err-itsob = ls_albero-itsob.</item>
        <item> CONCATENATE &apos;Legame VERDE ma con RELENDDATE non a infinito. Padre:</item>
        <item> INTO ls_comp_err-log SEPARATED BY space.</item>
        <item> COLLECT ls_comp_err INTO lt_comp_err.</item>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO ls_albero FROM 2.</item>
        <item/>
        <item> DATA: ls_tree_data_sel TYPE ty_s_tree_data_sel,</item>
        <item> lt_tree_data_sel_old TYPE ty_t_tree_data_sel.</item>
        <item/>
        <item> REFRESH: lt_tree_data_sel_old.</item>
        <item> CLEAR: lt_tree_data_sel_old.</item>
        <item> FREE: lt_tree_data_sel_old.</item>
        <item/>
        <item> lt_tree_data_sel_old[] = gt_tree_data_sel[].</item>
        <item/>
        <item> REFRESH: gt_tree_data_sel.</item>
        <item> CLEAR: gt_tree_data_sel.</item>
        <item> FREE: gt_tree_data_sel.</item>
        <item/>
        <item> &quot; Per ogni ramo errato costruisco la tabella che mi mostra log</item>
        <item> LOOP AT lt_comp_err INTO ls_comp_err.</item>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data) WITH KEY matnr = l</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item> CLEAR: ls_tree_data_sel.</item>
        <item> ls_tree_data_sel-light = icon_red_light.</item>
        <item> IF ls_comp_err-log IS INITIAL.</item>
        <item> ls_tree_data_sel-log = &apos;Materiale con BOM ripetuta e diversa o p</item>
        <item> ELSE.</item>
        <item> ls_tree_data_sel-log = ls_comp_err-log.</item>
        <item> ENDIF.</item>
        <item> ls_tree_data_sel-matnr = ls_comp_err-matnr.</item>
        <item> ls_tree_data_sel-menge = ls_comp_err-relqty.</item>
        <item> ls_tree_data_sel-maktx = ls_tree_data-maktx.</item>
        <item> APPEND ls_tree_data_sel TO gt_tree_data_sel.</item>
        <item> gv_wrong_tree = abap_true.</item>
        <item> ev_ret = 8.</item>
        <item>* ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( gv_wrong_tree = abap_true ).</item>
        <item> MESSAGE i398(00) WITH &apos;Albero corrotto.&apos;.</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( go_tree IS BOUND AND NOT gt_tree_data_sel[] IS INITIAL ).</item>
        <item> add_dialog_exclude( iv_fcode = &apos;SAVE&apos; ).</item>
        <item> set_dialog_title( iv_title = &apos;Controllo integrit√† albero&apos; ).</item>
        <item> DATA(lt_fields) =</item>
        <item> VALUE ty_t_dialog_fields( ( fieldname = &apos;LIGHT&apos; visible = abap_t</item>
        <item> ( fieldname = &apos;MATNR&apos; visible = abap_t</item>
        <item> ( fieldname = &apos;MAKTX&apos; visible = abap_t</item>
        <item>* ( fieldname = &apos;MENGE&apos; visible = abap_</item>
        <item> ( fieldname = &apos;LOG&apos; visible = abap_t</item>
        <item> alv_dialog_show( EXPORTING it_fields = lt_fields</item>
        <item> CHANGING ct_data = gt_tree_data_sel ).</item>
        <item> remove_dialog_exclude( &apos;SAVE&apos; ).</item>
        <item> ENDIF.</item>
        <item> gt_tree_data_sel[] = lt_tree_data_sel_old[].</item>
        <item/>
        <item> REFRESH: lt_tree_data_sel_old.</item>
        <item> CLEAR: lt_tree_data_sel_old.</item>
        <item> FREE: lt_tree_data_sel_old.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </DIFF_BRANCH_NODES>
      <GET_DIALOG_TITLE>
        <item> METHOD get_dialog_title.</item>
        <item> ev_title = gv_dialog_title.</item>
        <item> ENDMETHOD.</item>
      </GET_DIALOG_TITLE>
      <SET_DIALOG_TITLE>
        <item> METHOD set_dialog_title.</item>
        <item> DATA: lo_functions TYPE REF TO cl_salv_functions_tree.</item>
        <item/>
        <item> IF ( iv_title IS INITIAL ).</item>
        <item> CLEAR: gv_dialog_title.</item>
        <item> lo_functions = go_tree-&gt;get_functions( ).</item>
        <item> DATA(lt_function_list) = lo_functions-&gt;get_functions( ).</item>
        <item> LOOP AT lt_function_list INTO DATA(lo_function).</item>
        <item> DATA(lv_name) = lo_function-r_function-&gt;get_name( ).</item>
        <item> IF ( lv_name = iv_fcode ).</item>
        <item> gv_dialog_title = lo_function-r_function-&gt;get_text( ).</item>
        <item> RETURN.</item>
        <item> ENDIF..</item>
        <item> ENDLOOP.</item>
        <item> ELSE.</item>
        <item> gv_dialog_title = iv_title.</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SET_DIALOG_TITLE>
      <SAVE_DIBA_2>
        <item> METHOD save_diba_2.</item>
        <item> TYPES: BEGIN OF ty_s_matnr,</item>
        <item> matnr TYPE matnr,</item>
        <item> END OF ty_s_matnr.</item>
        <item> DATA: lv_esito TYPE zdbc_esito,</item>
        <item> lv_descr_esito TYPE zdbc_descr_esito,</item>
        <item> lt_stpo TYPE tt_stpo,</item>
        <item> lv_aennr TYPE csin-aennr,</item>
        <item> ls_stpo TYPE stpob,</item>
        <item> lv_stlan TYPE mast-stlan,</item>
        <item> lv_pspnr TYPE prps-pspnr,</item>
        <item> lv_posnr TYPE n LENGTH 4,</item>
        <item> lv_stlkn TYPE stpob-stlkn,</item>
        <item> lv_stpoz TYPE stpob-stpoz,</item>
        <item> lv_tabix TYPE i,</item>
        <item> lv_key TYPE ty_s_tree_hier-key,</item>
        <item> lt_matnr TYPE TABLE OF ty_s_matnr,</item>
        <item> ls_matnr TYPE ty_s_matnr.</item>
        <item> DATA: l_tfill LIKE sy-tfill.</item>
        <item> DATA: ls_presenza_cs73 TYPE c. &quot;Traccia la presenza della BOM CS73</item>
        <item/>
        <item> BREAK kosmedev.</item>
        <item/>
        <item> REFRESH: lt_matnr.</item>
        <item> CLEAR: lt_matnr.</item>
        <item> FREE: lt_matnr.</item>
        <item/>
        <item> CLEAR: lv_key.</item>
        <item>* REM: Azione verso l&apos;Alto dove il materiale selezionato dall&apos;utente √®</item>
        <item> DATA: lv_min_level TYPE ty_s_albero-lev. &quot;Utilizzata per discrimin</item>
        <item> lv_min_level = 99999.</item>
        <item/>
        <item>* Nella tabella gt_tree_data_sel abbiamo il codice selezionato il suo</item>
        <item>* Non importa se i figli ZMTO sono di tipo E o F in entrambi i casi la</item>
        <item>* Nella tabella gt_tree_data_sel abbiamo i materiali la cui BOM va con</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHERE light = s</item>
        <item> lv_tabix = sy-tabix.</item>
        <item/>
        <item> REFRESH: lt_stpo.</item>
        <item> CLEAR: lt_stpo.</item>
        <item> FREE: lt_stpo.</item>
        <item/>
        <item>* Se il materiale padre della BOM √® ripetuto nella tabella pop-up va</item>
        <item>* READ TABLE lt_matnr INTO ls_matnr WITH KEY matnr = ls_tree_data_s</item>
        <item>* IF sy-subrc = 0.</item>
        <item>* CONTINUE.</item>
        <item>* ENDIF.</item>
        <item/>
        <item>* lv_min_level dettaglia il livello minimo e questo per discriminare</item>
        <item> IF ( ls_tree_data_sel-level &lt; lv_min_level ).</item>
        <item> lv_min_level = ls_tree_data_sel-level.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Selezione del key del record iniziale selezionato dall&apos;utente.</item>
        <item>* REM: il campo KEY √® un indice significativo solo nelle tabelle int</item>
        <item>* il campo KEY identifica un record il cui campo REF si lega al</item>
        <item> IF ( lv_tabix = 2 ). &quot;Il secondo record nella tabella pop-up √® i</item>
        <item> CASE gv_tipo_anticipo. &quot;Tipo di file: Anticipo o Lancio produzio</item>
        <item> WHEN c_anticipo. &quot;Acquisizione anticipo</item>
        <item> lv_key = ls_tree_data_sel-key.</item>
        <item> WHEN c_produzione. &quot;Acquisizione lancio di produzione</item>
        <item> lv_key = ls_tree_data_sel-key.</item>
        <item> ENDCASE.</item>
        <item> ENDIF.</item>
        <item/>
        <item>* Determinazione del numero di modifica</item>
        <item> lv_aennr = &apos;BOM-&apos; &amp;&amp; sy-datum.</item>
        <item/>
        <item> &quot; imposta parametri per lettura diba</item>
        <item> DATA: lt_stpo_read TYPE TABLE OF stpob,</item>
        <item> ls_ecsin TYPE csin,</item>
        <item> lv_fl_warning TYPE capiflag-flwarning.</item>
        <item/>
        <item> CLEAR: lv_stlan, lv_pspnr, ls_presenza_cs73.</item>
        <item> lv_stlan = &apos;1&apos;. &quot;Impiego della distinta base</item>
        <item> lv_pspnr = gv_pspnr. &quot;Elemento WBS</item>
        <item/>
        <item> ls_ecsin-matnr = ls_tree_data_sel-matnr. &quot;Materiale padre della</item>
        <item> ls_ecsin-stlan = lv_stlan. &quot;Impiego della distinta base</item>
        <item> ls_ecsin-werks = &apos;6301&apos;.</item>
        <item> ls_ecsin-otmat = abap_true. &quot;Codice: considerare le posizioni</item>
        <item> ls_ecsin-stlal = &apos;01&apos;. &quot;Distinta base alternativa</item>
        <item> IF ( NOT lv_pspnr IS INITIAL ).</item>
        <item> ls_ecsin-pspnr = lv_pspnr. &quot;Elemento della Work Breakdown Str</item>
        <item> ls_ecsin-stlty = &apos;P&apos;. &quot;Categoria distinta base</item>
        <item> ELSE.</item>
        <item> ls_ecsin-stlty = &apos;M&apos;. &quot;Categoria distinta base</item>
        <item> ENDIF.</item>
        <item> ls_ecsin-datuv = sy-datum. &quot;Data inizio validit√†</item>
        <item> ls_ecsin-datub = &apos;99991231&apos;. &quot;Data di fine validit√†</item>
        <item/>
        <item> REFRESH: lt_stpo_read.</item>
        <item> CLEAR: lt_stpo_read.</item>
        <item> FREE: lt_stpo_read.</item>
        <item/>
        <item> &quot; funzione di lettura diba</item>
        <item> CALL FUNCTION &apos;CSAI_BOM_READ&apos;</item>
        <item> EXPORTING</item>
        <item> ecsin = ls_ecsin</item>
        <item> IMPORTING</item>
        <item> fl_warning = lv_fl_warning</item>
        <item> TABLES</item>
        <item> t_stpob = lt_stpo_read</item>
        <item>* T_STKOB =</item>
        <item>* T_DEP_DATA =</item>
        <item>* T_DEP_DESCR =</item>
        <item>* T_DEP_ORDER =</item>
        <item>* T_DEP_SOURCE =</item>
        <item>* T_DEP_DOC =</item>
        <item>* T_FSH_BOMD =</item>
        <item>* T_SGT_BOMC =</item>
        <item> EXCEPTIONS</item>
        <item> error = 1</item>
        <item> OTHERS = 2.</item>
        <item/>
        <item> DATA: ls_stpo_read TYPE stpob.</item>
        <item> CLEAR: ls_stpo_read.</item>
        <item>* Estrazione dell&apos;ultimo record per avere il massimo POSNR</item>
        <item> LOOP AT lt_stpo_read INTO ls_stpo_read.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>* Gestione del disallineamento tra il flag f_diba e la CS73 dovuta a</item>
        <item>* su di un&apos;altro K contemporaneamente ha creato/cancellato la BOM su</item>
        <item>* Commentato perch√® posso avere una BOM senza posizioni</item>
        <item>* IF lt_stpo_read[] IS NOT INITIAL.</item>
        <item>* ls_presenza_cs73 = &apos;X&apos;.</item>
        <item>* ENDIF.</item>
        <item>* DATA l_abap(1) TYPE c VALUE &apos;1&apos;.</item>
        <item>* IF ls_presenza_cs73 = &apos;X&apos; AND ls_tree_data_sel-f_diba = abap_fals</item>
        <item>* l_abap = abap_true.</item>
        <item>* ELSEIF ls_presenza_cs73 = space AND ls_tree_data_sel-f_diba = aba</item>
        <item>* l_abap = abap_false.</item>
        <item>* ENDIF.</item>
        <item>*</item>
        <item>* IF l_abap &lt;&gt; &apos;1&apos;.</item>
        <item>* ls_tree_data_sel-f_diba = l_abap.</item>
        <item>* MODIFY gt_tree_data_sel FROM ls_tree_data_sel INDEX lv_tabix TR</item>
        <item>* READ TABLE gt_tree_data INTO DATA(ls_tree_data_2) WITH KEY key</item>
        <item>* IF sy-subrc = 0.</item>
        <item>* DATA(lv_tabix_1) = sy-tabix.</item>
        <item>* ls_tree_data_2-f_diba = l_abap.</item>
        <item>* MODIFY gt_tree_data FROM ls_tree_data_2 INDEX lv_tabix TRANSP</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> lv_posnr = ls_stpo_read-posnr + 10.</item>
        <item> &quot;lv_stlkn = ls_stpo_read-stlkn + 11.</item>
        <item> &quot;lv_stpoz = ls_stpo_read-stpoz + 11.</item>
        <item/>
        <item>* LOOP AT gt_tree_hier INTO DATA(ls_tree_hier) WHERE parent = ls_tr</item>
        <item>* AND level = ls_tr</item>
        <item/>
        <item>* REM: Il campo KEY assume valori univoci esattamente nell&apos;ordine de</item>
        <item>* Posizionamento sul record in esame</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY key = ls_</item>
        <item> READ TABLE gt_tree_hier INTO DATA(ls_tree_hier) WITH KEY ref = ls_</item>
        <item> CHECK sy-subrc = 0.</item>
        <item/>
        <item>* Posizionamento sul record in esame</item>
        <item>* REM: Il campo REF assume valori univoci ed √® presente sia in ZPP_A</item>
        <item> READ TABLE gt_albero INTO DATA(ls_albero_first) WITH KEY ref = ls_</item>
        <item> DATA(lv_tabix_albero_1) = sy-tabix. &quot;sy-tabix del record corrent</item>
        <item> DATA(lv_tabix_albero_2) = sy-tabix. &quot;sy-tabix del&apos;ultimo record</item>
        <item/>
        <item>* Ricerca del tabix di fine del ramo in corso</item>
        <item>* Posizionamento sul record sucessivo</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero) FROM lv_tabix_albero_1.</item>
        <item> lv_tabix_albero_2 = sy-tabix. &quot;sy-tabix del&apos;ultimo record del</item>
        <item/>
        <item>* Posizionamento sul record sucessivo</item>
        <item>* REM: gt_albero √® sortato BY SORT</item>
        <item> LOOP AT gt_albero INTO DATA(ls_albero_next) FROM lv_tabix_albero</item>
        <item> EXIT.</item>
        <item> ENDLOOP.</item>
        <item> IF ( sy-subrc &lt;&gt; 0 OR ls_albero_next-lev &lt;= ls_albero_first-lev</item>
        <item> EXIT.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item>************************************************************************</item>
        <item>***** 1 LOOP SULLA TABELLA ALBERO BOM VS TABELLA BOM *******************</item>
        <item/>
        <item> IF ls_tree_data_sel-colore &lt;&gt; &apos;ROSSO&apos;.</item>
        <item>* Determinato il sy-tabix di inizio e fine del ramo con root il re</item>
        <item> LOOP AT gt_albero INTO ls_albero FROM lv_tabix_albero_1</item>
        <item> TO lv_tabix_albero_2</item>
        <item> WHERE parentname = ls_tree_dat</item>
        <item> AND lev = ls_tree_dat</item>
        <item/>
        <item>* REM: Il campo REF assume valori univoci ed √® presente sia in ZPP</item>
        <item>* REM: La tabella interna gt_tree_hier e la tabella ZPP_ALBERO son</item>
        <item> READ TABLE gt_tree_hier INTO ls_tree_hier WITH KEY ref = ls_al</item>
        <item>* IF ( lv_min_level = ls_albero-lev - 1 OR ls_tree_data_sel-upd_</item>
        <item> IF ( ls_tree_data_sel-upd_bom_up = abap_true ).</item>
        <item>* Stiamo elaborando i figli del codice padre aggiunto d&apos;uffici</item>
        <item> READ TABLE gt_tree_data_sel WITH KEY key = ls_tree_hier-key</item>
        <item> ENDIF.</item>
        <item> CHECK ( sy-subrc = 0 ) OR</item>
        <item>* Gestione dei nodi foglia che nella tabella pop-up non sono p</item>
        <item>* deve considerare solo quello nella tabella pop-up</item>
        <item>* ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-disgr &lt;&gt; &apos;ZMTO&apos; ).</item>
        <item>* ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-level &lt;&gt; lv_min_level</item>
        <item> ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-upd_bom_up = abap_fal</item>
        <item>* Gestione del ROOTNAME con figli ZMTS quindi non presenti in</item>
        <item> ( sy-subrc &lt;&gt; 0 AND ls_tree_data_sel-level = lv_min_level</item>
        <item/>
        <item> CLEAR: ls_stpo.</item>
        <item/>
        <item>* &quot; verifica che il componente se √® ramo, sia presente nella list</item>
        <item>* READ TABLE gt_tree_hier INTO DATA(ls_hier) WITH KEY parent = l</item>
        <item>* level = l</item>
        <item>* IF ( sy-subrc = 0 ).</item>
        <item>* READ TABLE gt_tree_data_sel WITH KEY key = ls_tree_hier-key T</item>
        <item>* ELSE.</item>
        <item>* IF ( lv_tabix &gt; 1 ).</item>
        <item>* sy-subrc = 0.</item>
        <item>* ENDIF.</item>
        <item>* ENDIF.</item>
        <item/>
        <item> READ TABLE gt_tree_data INTO DATA(ls_tree_data_tmp) WITH KEY k</item>
        <item> ls_stpo-mandt = sy-mandt.</item>
        <item> ls_stpo-postp = &apos;L&apos;. &quot;Tipo di posizione (disti</item>
        <item> ls_stpo-stlty = &apos;P&apos;. &quot;Categoria distinta base</item>
        <item> IF ls_stpo_read-stlnr IS INITIAL.</item>
        <item> ls_stpo-andat = sy-datum. &quot;Data di creazione reco</item>
        <item> ls_stpo-annam = sy-uname. &quot;Utente che ha creato i</item>
        <item> ELSE.</item>
        <item> ls_stpo-aenam = sy-uname. &quot;Nome dell&apos;utente autor</item>
        <item> ls_stpo-aedat = sy-datum. &quot;Data dell&apos;ultima modif</item>
        <item> ENDIF.</item>
        <item> ls_stpo-stlnr = ls_stpo_read-stlnr. &quot;Distinta base</item>
        <item> ls_stpo-posnr = lv_posnr. &quot;Numero posizione distint</item>
        <item> ls_stpo-idnrk = ls_tree_data_tmp-matnr.</item>
        <item/>
        <item> TRY.</item>
        <item> ls_stpo-menge = ls_tree_data_tmp-menge. &quot;Qt√† dell&apos;Albero</item>
        <item> CATCH cx_root.</item>
        <item> ENDTRY.</item>
        <item> ls_stpo-meins = ls_tree_data_tmp-meins.</item>
        <item> ls_stpo-datuv = sy-datum. &quot;Data inizio validit√†</item>
        <item/>
        <item> ls_stpo-aennr = lv_aennr. &quot;Numero di modifica</item>
        <item> ls_stpo-sanka = abap_true. &quot;Codice: posizione rileva</item>
        <item> ls_stpo-pswrk = &apos;6301&apos;. &quot;Divisione del prelievo</item>
        <item> ls_stpo-itsob = ls_tree_data_tmp-itsob. &quot;Tipo approvvigionam</item>
        <item/>
        <item> CASE ls_tree_data_tmp-colore.</item>
        <item> WHEN &apos;VERDE&apos;.</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Il componente esiste sulla BOM. Verificare se allineare</item>
        <item> IF NOT ( ls_stpo_read-menge = ls_stpo-menge AND ls_stpo_</item>
        <item> ls_stpo_read-menge = ls_stpo-menge.</item>
        <item> ls_stpo_read-itsob = ls_stpo-itsob.</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;U&apos;.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Il componente √® gi√† presente nella tabella lt_stpo_rea</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> &quot; se il componente non esite in bom bisogna inserirlo</item>
        <item> ls_stpo-vbkz = ls_stpo-mvbkz = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;ROSSO&apos;.</item>
        <item>* IF ( ls_tree_data_tmp-disgr = &apos;ZMTO&apos; AND NOT ls_tree_data_t</item>
        <item>* &quot; bisogna mettere in errore tutto i rami antenati che tut</item>
        <item>* ENDIF.</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Cancellare il componente dalla BOM</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;D&apos;.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Se il componente non √® presente nella tabella lt_stpo_re</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> WHEN &apos;GIALLO&apos;.</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Il componente esiste sulla BOM. Verificare se allineare</item>
        <item> IF NOT ( ls_stpo_read-menge = ls_stpo-menge AND ls_stpo_</item>
        <item> &quot;Allineare la quantit√† e itsob con quella dell&apos;albero</item>
        <item> ls_stpo_read-menge = ls_stpo-menge.</item>
        <item> ls_stpo_read-itsob = ls_stpo-itsob.</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;U&apos;.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Il componente √® gi√† presente nella tabella lt_stpo_rea</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> &quot;Il componente non esite in BOM bisogna inserirlo</item>
        <item> ls_stpo-vbkz = ls_stpo-mvbkz = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item> WHEN OTHERS. &quot;ad es. GRIGIO</item>
        <item> &quot;Verificare se gi√† esiste nella BOM</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk =</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> &quot;Il componente esiste sulla BOM. Verificare se allineare</item>
        <item> IF NOT ( ls_stpo_read-menge = ls_stpo-menge AND ls_stpo_</item>
        <item> &quot;Allineare la quantit√† e itsob con quella dell&apos;albero</item>
        <item> ls_stpo_read-menge = ls_stpo-menge.</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;U&apos;.</item>
        <item> ls_stpo_read-itsob = ls_stpo-itsob.</item>
        <item> ls_stpo = ls_stpo_read.</item>
        <item> ELSE.</item>
        <item>* Il componente √® gi√† presente nella tabella lt_stpo_rea</item>
        <item> DELETE lt_stpo_read WHERE idnrk = ls_stpo-idnrk.</item>
        <item> CONTINUE.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> &quot;Il componente non esite in BOM bisogna inserirlo</item>
        <item> ls_stpo-vbkz = ls_stpo-mvbkz = &apos;I&apos;.</item>
        <item> ENDIF.</item>
        <item>* CONTINUE.</item>
        <item> ENDCASE.</item>
        <item/>
        <item> APPEND ls_stpo TO lt_stpo. &quot;&lt;------</item>
        <item> ADD 10 TO lv_posnr.</item>
        <item/>
        <item> &quot;lv_lev = ls_albero-lev.</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT gt_albero INTO ls_albero FROM lv_tabix_alber</item>
        <item> ENDIF. &quot;IF ls_tree_data_sel-colore &lt;&gt; &apos;ROSSO&apos;.</item>
        <item/>
        <item>************************************************************************</item>
        <item>***** 2 LOOP SULLA TABELLA BOM vs TABELLA ALBERO BOM *******************</item>
        <item> &quot; cancella componenti della bom (se gi√† esistente) non presenti ne</item>
        <item> DATA: l_check_2 TYPE c.</item>
        <item> CLEAR: l_check_2.</item>
        <item>* gt_skipped_nodes: Tabella con i nodi selezionati dall&apos;utente</item>
        <item> READ TABLE gt_skipped_nodes INTO DATA(ls_skipped_nodes) WITH KEY k</item>
        <item> IF sy-subrc = 0.</item>
        <item> l_check_2 = &apos;Y&apos;. &quot;Il nodo √® stato selezionato dall&apos;utente</item>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( ( ls_tree_data_sel-level &lt;&gt; lv_min_level OR &quot;E&apos; il padre</item>
        <item> l_check_2 = &apos;Y&apos; ) AND &quot;a meno che i</item>
        <item> ls_tree_data_sel-colore &lt;&gt; &apos;ROSSO&apos; ). &quot;Idem (nessun</item>
        <item> LOOP AT lt_stpo_read INTO ls_stpo_read.</item>
        <item> READ TABLE lt_stpo INTO ls_stpo WITH KEY idnrk = ls_stpo_read-</item>
        <item> IF ( sy-subrc &lt;&gt; 0 ).</item>
        <item> ls_stpo_read-vbkz = ls_stpo_read-mvbkz = &apos;D&apos;.</item>
        <item> APPEND ls_stpo_read TO lt_stpo.</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item> ENDIF.</item>
        <item/>
        <item> CLEAR: lv_stlan, lv_pspnr.</item>
        <item> lv_stlan = &apos;1&apos;.</item>
        <item> lv_pspnr = gv_pspnr.</item>
        <item/>
        <item>* Elimino eventuali record inutili</item>
        <item> LOOP AT lt_stpo INTO ls_stpo WHERE mvbkz = &apos;U&apos;.</item>
        <item> DATA(ls_tabix) = sy-tabix.</item>
        <item> READ TABLE lt_stpo_read INTO ls_stpo_read WITH KEY idnrk = ls_st</item>
        <item> IF sy-subrc = 0 AND ls_stpo_read-menge = ls_stpo-menge AND ls_st</item>
        <item> DELETE lt_stpo INDEX ls_tabix. &quot;&lt;------ Eliminazione dalla t</item>
        <item> ENDIF.</item>
        <item> ENDLOOP.</item>
        <item/>
        <item> IF ( NOT lt_stpo[] IS INITIAL ).</item>
        <item/>
        <item> &quot; crea diba</item>
        <item> IF ( ls_tree_data_sel-f_diba EQ abap_false ).</item>
        <item>* CLEAR: lv_stlan, lv_pspnr.</item>
        <item>* lv_stlan = &apos;1&apos;.</item>
        <item>* lv_pspnr = gv_pspnr.</item>
        <item> CALL FUNCTION &apos;ZPP_CREA_DIBA&apos;</item>
        <item> EXPORTING</item>
        <item> i_matnr = ls_tree_data_sel-matnr</item>
        <item> i_pspnr = lv_pspnr</item>
        <item> i_werks = &apos;6301&apos;</item>
        <item> i_stlan = lv_stlan</item>
        <item> i_aennr = lv_aennr</item>
        <item> it_stpo = lt_stpo</item>
        <item> IMPORTING</item>
        <item>* E_STLNR =</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item/>
        <item>* DATA: lt_stpo_read TYPE TABLE OF stpob,</item>
        <item>* ls_ecsin TYPE csin,</item>
        <item>* lv_fl_warning TYPE capiflag-flwarning.</item>
        <item/>
        <item> &quot; modifica diba</item>
        <item> ELSE.</item>
        <item/>
        <item> &quot;BREAK kosmedev.</item>
        <item> CALL FUNCTION &apos;ZPP_MODIFICA_DIBA&apos;</item>
        <item> EXPORTING</item>
        <item> i_matnr = ls_tree_data_sel-matnr</item>
        <item> i_pspnr = lv_pspnr</item>
        <item> i_werks = &apos;6301&apos;</item>
        <item> i_stlan = lv_stlan</item>
        <item> i_aennr = lv_aennr</item>
        <item> it_stpo = lt_stpo</item>
        <item> IMPORTING</item>
        <item>* E_STLNR =</item>
        <item> e_esito = lv_esito</item>
        <item> e_descr_esito = lv_descr_esito.</item>
        <item/>
        <item> ENDIF.</item>
        <item/>
        <item> IF ( lv_esito = &apos;000&apos; ).</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> READ TABLE gt_tree_data_sel INTO DATA(ls_tree_data_sel_2) INDE</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_tree_data_sel_2-light = icon_green_light. &quot;Semaforo VER</item>
        <item> ls_tree_data_sel_2-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_2 INDEX sy-tab</item>
        <item> ENDIF.</item>
        <item> DATA: lv_tabix_2 TYPE i.</item>
        <item>* Propagazione del flag di presenza diba sull&apos;albero</item>
        <item> LOOP AT gt_tree_data INTO DATA(ls_tree_data) WHERE matnr = ls_</item>
        <item> lv_tabix_2 = sy-tabix.</item>
        <item> ls_tree_data-f_diba = abap_true.</item>
        <item> set_tree_alv_data( CHANGING cs_tree_data = ls_tree_data ).</item>
        <item> MODIFY gt_tree_data FROM ls_tree_data INDEX lv_tabix_2 TRANS</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item> LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel_1) WHERE m</item>
        <item> DATA(lv_tabix_3) = sy-tabix.</item>
        <item> ls_tree_data_sel_1-f_diba = abap_true.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_1 INDEX lv_tab</item>
        <item> tree_row_refresh( ls_tree_data ).</item>
        <item> ENDLOOP.</item>
        <item>* gv_to_be_refresh = abap_true.</item>
        <item> ELSE.</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> READ TABLE gt_tree_data_sel INTO ls_tree_data_sel_2 INDEX lv_t</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_tree_data_sel_2-light = icon_red_light. &quot;Semaforo ROSSO</item>
        <item> ls_tree_data_sel_2-log = lv_descr_esito.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_2 INDEX sy-tab</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( lv_esito = &apos;000&apos; ).</item>
        <item> ELSE. &quot;IF ( NOT lt_stpo[] IS INITIAL ).</item>
        <item>* Valorizzazione del semaforo all&apos;albero pop-up</item>
        <item> READ TABLE gt_tree_data_sel INTO ls_tree_data_sel_2 INDEX lv_tab</item>
        <item> IF sy-subrc = 0.</item>
        <item> ls_tree_data_sel_2-light = icon_yellow_light. &quot;Semaforo GIAL</item>
        <item> ls_tree_data_sel_2-log = &apos;BOM non modificata&apos;.</item>
        <item> MODIFY gt_tree_data_sel FROM ls_tree_data_sel_2 INDEX sy-tabix</item>
        <item> ENDIF.</item>
        <item> ENDIF. &quot;IF ( NOT lt_stpo[] IS INITIAL ).</item>
        <item/>
        <item> ls_matnr-matnr = ls_tree_data_sel-matnr.</item>
        <item> COLLECT ls_matnr INTO lt_matnr.</item>
        <item>* zcl_pp_pdm_monitor_sec=&gt;set_phantom( CHANGING cs_tree_data_sel =</item>
        <item>* cs_albero =</item>
        <item/>
        <item> save_prod_version( iv_matnr = ls_tree_data_sel-matnr ).</item>
        <item/>
        <item> ENDLOOP. &quot;LOOP AT gt_tree_data_sel INTO DATA(ls_tree_data_sel) WHE</item>
        <item/>
        <item> READ TABLE gt_tree_data_sel WITH KEY light = icon_red_light TRANSPOR</item>
        <item> IF ( sy-subrc = 0 ).</item>
        <item> MESSAGE i398(00) WITH &apos;Verificare semafori rossi&apos;.</item>
        <item> ENDIF.</item>
        <item/>
        <item> ENDMETHOD.</item>
      </SAVE_DIBA_2>
      <SET_ODP_FCAN>
        <item> METHOD set_odp_fcan.</item>
        <item> DATA: lt_orders TYPE TABLE OF bapi_order_key,</item>
        <item> ls_orders TYPE bapi_order_key,</item>
        <item> ls_return TYPE bapiret2.</item>
        <item>* Cambio lo stato (FACN)</item>
        <item/>
        <item> CLEAR: ls_orders, ls_return.</item>
        <item> REFRESH: lt_orders.</item>
        <item> CLEAR: lt_orders.</item>
        <item> FREE: lt_orders.</item>
        <item/>
        <item> ls_orders-order_number = iv_order.</item>
        <item> APPEND ls_orders TO lt_orders.</item>
        <item/>
        <item> &quot;CALL FUNCTION &apos;DIALOG_SET_NO_DIALOG&apos;.</item>
        <item/>
        <item> CALL FUNCTION &apos;BAPI_PRODORD_SET_DELETION_FLAG&apos;</item>
        <item>* EXPORTING</item>
        <item>* WORK_PROCESS_GROUP = &apos;COWORK_BAPI&apos;</item>
        <item>* WORK_PROCESS_MAX = 99</item>
        <item> IMPORTING</item>
        <item> return = ls_return</item>
        <item> TABLES</item>
        <item> orders = lt_orders</item>
        <item>* DETAIL_RETURN =</item>
        <item>* APPLICATION_LOG =</item>
        <item> .</item>
        <item/>
        <item> IF sy-subrc = 0.</item>
        <item> IF ls_return-type = &apos;A&apos; OR</item>
        <item> ls_return-type = &apos;B&apos; OR</item>
        <item> ls_return-type = &apos;E&apos;.</item>
        <item> cv_esito = &apos;001&apos;.</item>
        <item> cv_descr_esito = ls_return-message.</item>
        <item> EXIT.</item>
        <item> ELSE.</item>
        <item> CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;</item>
        <item> EXPORTING</item>
        <item> wait = &apos;X&apos;.</item>
        <item> cv_esito = &apos;000&apos;.</item>
        <item> cv_descr_esito = &apos;OK&apos;.</item>
        <item> ENDIF.</item>
        <item> ELSE.</item>
        <item> cv_esito = &apos;002&apos;.</item>
        <item> cv_descr_esito = &apos;Errore generico&apos;..</item>
        <item> ENDIF.</item>
        <item> ENDMETHOD.</item>
      </SET_ODP_FCAN>
    </METHOD_SOURCE>
  </CLASS_ROOT>
