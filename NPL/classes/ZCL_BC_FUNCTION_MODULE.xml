<?xml version="1.0"?><CLASS_ROOT><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Function utility</DESCRIPT><UUID>CAAn5KebHuiX0TCmWeXWmA==</UUID><CATEGORY>00</CATEGORY><EXPOSURE>2</EXPOSURE><STATE>1</STATE><RELEASE>0</RELEASE><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><CHGDANYON>0000-00-00</CHGDANYON><CLSFINAL>X</CLSFINAL><CLSCCINCL>X</CLSCCINCL><FIXPT>X</FIXPT><UNICODE>X</UNICODE><R3RELEASE>751</R3RELEASE><CLSBCCAT>00</CLSBCCAT><DURATION_TYPE>0</DURATION_TYPE><RISK_LEVEL>0</RISK_LEVEL><ATTRIBUTES><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GV_METHOD</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>ABAP Workbench: LIMU Name</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><ATTDECLTYP>0</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>EU_LNAME</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>751</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GT_PARAMETERS</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><ATTDECLTYP>0</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZBC_TY_T_FM_PARAMETERS</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>751</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GS_INTERFACE</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Interface of a Function Module</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>3</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><ATTDECLTYP>0</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>RSFBINTFV</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>751</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GS_RESULTS</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>4</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><ATTDECLTYP>0</ATTDECLTYP><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>ZBC_TY_S_FM_RESULTS</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>751</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item></ATTRIBUTES><METHODS><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CALL</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Function module call</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><MTDNEWEXC>X</MTDNEWEXC><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GET_INTERFACE</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Get function module interface</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><MTDNEWEXC>X</MTDNEWEXC><R3RELEASE>751</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GET_RESULTS</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Get function module results</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><R3RELEASE>751</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Constructor</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>4</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><MTDTYPE>2</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><MTDNEWEXC>X</MTDNEWEXC><R3RELEASE>751</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_PARAMETER</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Create function module parameter</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><MTDNEWEXC>X</MTDNEWEXC><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_TABLE</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Create function module table parameter</DESCRIPT><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><MTDNEWEXC>X</MTDNEWEXC><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item></METHODS><EVENTS/><TYPES/><PARAMETERS><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CALL</CMPNAME><SCONAME>RS_RESULTS</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Result table</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZBC_TY_S_FM_RESULTS</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><SCONAME>IV_METHOD</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>ABAP Workbench: LIMU Name</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>2</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>EU_LNAME</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><SCONAME>IT_PARAMETERS</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>2</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZBC_TY_T_FM_PARAMETERS</TYPE><PAROPTIONL>X</PAROPTIONL></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_PARAMETER</CMPNAME><SCONAME>IV_FIELD</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>C</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_PARAMETER</CMPNAME><SCONAME>IV_TYPE</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>C</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_PARAMETER</CMPNAME><SCONAME>IV_VALUE</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ANY</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_PARAMETER</CMPNAME><SCONAME>RV_PARAM</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>4</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>3</TYPTYPE><TYPE>DATA</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_TABLE</CMPNAME><SCONAME>IV_FIELD</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>C</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_TABLE</CMPNAME><SCONAME>IV_VALUE</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ANY</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_TABLE</CMPNAME><SCONAME>RT_DATA</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>3</TYPTYPE><TYPE>DATA</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GET_INTERFACE</CMPNAME><SCONAME>RS_INTERFACE</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Interface of a Function Module</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-05-23</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>RSFBINTFV</TYPE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GET_RESULTS</CMPNAME><SCONAME>RS_RESULTS</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>ZBC_TY_S_FM_RESULTS</TYPE></item></PARAMETERS><EXCEPTIONS><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CALL</CMPNAME><SCONAME>ZCX_BC_EXCEPTION</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Classe eccezione autorizzazione</DESCRIPT><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><IS_RESUMABLE>X</IS_RESUMABLE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><SCONAME>ZCX_BC_EXCEPTION</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Classe eccezione autorizzazione</DESCRIPT><MTDTYPE>2</MTDTYPE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><IS_RESUMABLE>X</IS_RESUMABLE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_PARAMETER</CMPNAME><SCONAME>ZCX_BC_EXCEPTION</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Classe eccezione autorizzazione</DESCRIPT><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><IS_RESUMABLE>X</IS_RESUMABLE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>CREATE_TABLE</CMPNAME><SCONAME>ZCX_BC_EXCEPTION</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Classe eccezione autorizzazione</DESCRIPT><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><IS_RESUMABLE>X</IS_RESUMABLE></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><CMPNAME>GET_INTERFACE</CMPNAME><SCONAME>ZCX_BC_EXCEPTION</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Classe eccezione autorizzazione</DESCRIPT><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-05-23</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><IS_RESUMABLE>X</IS_RESUMABLE></item></EXCEPTIONS><IMPLEMENTINGS/><IMPL_DETAILS/><FRIENDSHIPS/><TYPEPUSAGES><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><TYPEGROUP>ABAP</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>0</TPUTYPE><IMPLICIT>X</IMPLICIT></item><item><CLSNAME>ZCL_BC_FUNCTION_MODULE</CLSNAME><TYPEGROUP>ZBC</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>0</TPUTYPE><IMPLICIT>X</IMPLICIT></item></TYPEPUSAGES><CLSDEFERRDS/><INTDEFERRDS/><ALIASES/><INHERITANCE><VERSION>0</VERSION><STATE>0</STATE><CREATEDON>0000-00-00</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON></INHERITANCE><INTERFACES/><REDEFINITIONS/><TYPE_SOURCE/><LOCALS_SRC/><LOCALS_DEF><item>*&quot;* use this source file for any type of declarations (class</item><item>*&quot;* definitions, interfaces or type declarations) you need for</item><item>*&quot;* components in the private section</item><item/></LOCALS_DEF><LOCALS_IMP><item>*&quot;* use this source file for the definition and implementation of</item><item>*&quot;* local helper classes, interface definitions and type</item><item>*&quot;* declarations</item></LOCALS_IMP><LOCALS_MAC><item>*&quot;* use this source file for any macro definitions you need</item><item>*&quot;* in the implementation part of the class</item><item/></LOCALS_MAC><TEXT_POOL/><METHOD_SOURCE><CALL><item>  METHOD call.</item><item>    CLEAR: rs_results.</item><item/><item>    DATA(lv_funcname) = gv_method.</item><item/><item>    DATA: lv_func       TYPE string,</item><item>          ls_params     TYPE abap_func_parmbind,</item><item>          ls_exceptions TYPE abap_func_excpbind.</item><item/><item>    lv_func = gv_method.</item><item/><item>    REFRESH: rs_results-t_params, rs_results-t_exceptions.</item><item/><item>    DATA: lv_query  TYPE string.</item><item/><item>    LOOP AT gs_interface-import INTO DATA(ls_para).</item><item>      CLEAR: lv_query.</item><item>      LOOP AT gt_parameters INTO DATA(ls_parameters) WHERE name = ls_para-parameter.</item><item>        lv_query = lv_query &amp;&amp; ls_parameters-value.</item><item>      ENDLOOP.</item><item>      IF ( sy-subrc = 0 ).</item><item>        CLEAR: ls_params.</item><item>        ls_params-name = ls_para-parameter.</item><item>        ls_params-kind = abap_func_exporting.</item><item>        ls_params-value = create_parameter( EXPORTING iv_field = ls_para-structure</item><item>                                                      iv_type  = ls_para-typefield</item><item>                                                      iv_value = lv_query ).</item><item>*                                 CHANGING ls_params-value.</item><item>        INSERT ls_params INTO TABLE rs_results-t_params.</item><item>      ELSE.</item><item>      ENDIF.</item><item>    ENDLOOP.</item><item/><item>    LOOP AT gs_interface-export INTO ls_para.</item><item>      CLEAR: ls_params.</item><item>      ls_params-name = ls_para-parameter.</item><item>      ls_params-kind = abap_func_importing.</item><item>      ls_params-value = create_parameter( EXPORTING iv_field = ls_para-structure</item><item>                                                    iv_type  = ls_para-typefield</item><item>                                                    iv_value = lv_query ).</item><item>*                                 CHANGING ls_params-value.</item><item>*        FIELD-SYMBOLS: &lt;lv_value&gt; TYPE any.</item><item>*        ASSIGN query_string-value TO &lt;lv_value&gt;.</item><item>*        GET REFERENCE OF &lt;lv_value&gt; INTO ls_params-value.</item><item>      INSERT ls_params INTO TABLE rs_results-t_params.</item><item>    ENDLOOP.</item><item/><item>    LOOP AT gs_interface-change INTO ls_para.</item><item>      CLEAR: lv_query.</item><item>      LOOP AT gt_parameters INTO ls_parameters WHERE name = ls_para-parameter.</item><item>        lv_query = lv_query &amp;&amp; ls_parameters-value.</item><item>      ENDLOOP.</item><item>      CLEAR: ls_params.</item><item>      ls_params-name = ls_para-parameter.</item><item>      ls_params-kind = abap_func_changing.</item><item>      ls_params-value = create_parameter( EXPORTING iv_field = ls_para-structure</item><item>                                                    iv_type  = ls_para-typefield</item><item>                                                    iv_value = lv_query ).</item><item>*                                 CHANGING ls_params-value.</item><item>      INSERT ls_params INTO TABLE rs_results-t_params.</item><item>    ENDLOOP.</item><item/><item>    LOOP AT gs_interface-tables INTO ls_para.</item><item>      CLEAR: lv_query.</item><item>      LOOP AT gt_parameters INTO ls_parameters WHERE name = ls_para-parameter.</item><item>        lv_query = lv_query &amp;&amp; ls_parameters-value.</item><item>      ENDLOOP.</item><item>      CLEAR: ls_params.</item><item>      ls_params-name = ls_para-parameter.</item><item>      ls_params-kind = abap_func_tables.</item><item>      ls_params-value = create_table( EXPORTING iv_field = ls_para-structure</item><item>                                                iv_value = lv_query ).</item><item>*                           CHANGING ls_params-value.</item><item>      INSERT ls_params INTO TABLE rs_results-t_params.</item><item>    ENDLOOP.</item><item/><item>    LOOP AT gs_interface-except INTO ls_para.</item><item>      CLEAR: ls_exceptions.</item><item>      ls_exceptions-value = sy-tabix.</item><item>      ls_exceptions-name = ls_para-parameter.</item><item>      INSERT ls_exceptions INTO TABLE rs_results-t_exceptions.</item><item>    ENDLOOP.</item><item/><item>    TRY.</item><item>*        CL_FB_FUNCTION_UTILITY=&gt;METH_ED_GENERATE_CALL( EXPORTING FUNCNAME    = LV_FUNCNAME</item><item>*                                                                 P_IF_IMPORT = LT_IMPORT</item><item>*                                                                 P_IF_CHANGE = LT_CHANGE</item><item>*                                                                 P_IF_EXPORT = LT_EXPORT</item><item>*                                                                 P_IF_TABLES = LT_TABLES</item><item>*                                                                 P_IF_EXCEPT = LT_EXCEPT</item><item>*                                                       CHANGING  REP = LT_REP ).</item><item>        DATA: lo_root TYPE REF TO cx_root.</item><item>        CALL FUNCTION lv_func</item><item>          PARAMETER-TABLE rs_results-t_params[]</item><item>          EXCEPTION-TABLE rs_results-t_exceptions[].</item><item/><item>        gs_results = rs_results.</item><item>      CATCH cx_root INTO DATA(lx_root).</item><item>        DATA(lv_msg) = lx_root-&gt;get_text( ).</item><item>        RAISE EXCEPTION TYPE zcx_bc_exception MESSAGE s000(z_bc) WITH lv_msg.</item><item>    ENDTRY.</item><item/><item>  ENDMETHOD.</item></CALL><CREATE_PARAMETER><item>  METHOD CREATE_PARAMETER.</item><item>    DATA: lx_root         TYPE REF TO cx_root,</item><item>          lt_keys         TYPE abap_keydescr_tab,</item><item>          lv_param        TYPE REF TO data,</item><item>          lo_data_descr   TYPE REF TO cl_abap_datadescr,</item><item>          lo_struct_descr TYPE REF TO cl_abap_structdescr,</item><item>          lo_table_descr  TYPE REF TO cl_abap_tabledescr,</item><item>          lo_ref_descr2   TYPE REF TO cl_abap_refdescr,</item><item>          ls_components   TYPE abap_compdescr,</item><item>          lv_value        TYPE string.</item><item/><item>    FIELD-SYMBOLS: &lt;lv_param&gt; TYPE any.</item><item/><item>    lv_value = iv_value.</item><item/><item>    TRY.</item><item>        TRY.</item><item>            IF ( iv_type = &apos;TYPE REF TO&apos; ).</item><item>              CREATE DATA lv_param TYPE REF TO (iv_field).</item><item>            ELSE.</item><item>              CREATE DATA lv_param TYPE (iv_field).</item><item>            ENDIF.</item><item>          CATCH cx_root INTO lx_root.</item><item>            CREATE DATA lv_param LIKE iv_field.</item><item>        ENDTRY.</item><item>        ASSIGN lv_param-&gt;* TO &lt;lv_param&gt;.</item><item>        IF ( iv_type &lt;&gt; &apos;TYPE REF TO&apos; ).</item><item>          TRY.</item><item>              lo_table_descr ?= cl_abap_tabledescr=&gt;describe_by_data_ref( lv_param ).</item><item>              cl_fdt_json=&gt;json_to_data( EXPORTING iv_json = lv_value</item><item>                                         CHANGING  ca_data = &lt;lv_param&gt; ).</item><item>            CATCH cx_root.</item><item>              TRY.</item><item>                  lo_struct_descr ?= cl_abap_structdescr=&gt;describe_by_data_ref( lv_param ).</item><item>                  cl_fdt_json=&gt;json_to_data( EXPORTING iv_json = lv_value</item><item>                                             CHANGING  ca_data = &lt;lv_param&gt; ).</item><item>                CATCH cx_root.</item><item>                  TRY.</item><item>                      lo_data_descr ?= cl_abap_datadescr=&gt;describe_by_data_ref( lv_param ).</item><item>                      IF ( NOT iv_value IS INITIAL ).</item><item>                        zcl_bc_conversion_exit=&gt;conversion_input( EXPORTING iv_field = iv_value</item><item>                                                                  CHANGING  cv_field = &lt;lv_param&gt; ).</item><item>                      ENDIF.</item><item>                    CATCH cx_root.</item><item>                  ENDTRY.</item><item>              ENDTRY.</item><item>          ENDTRY.</item><item>        ENDIF.</item><item/><item>      CATCH cx_root INTO lx_root.</item><item>    ENDTRY.</item><item/><item>    rv_param = lv_param.</item><item>  ENDMETHOD.</item></CREATE_PARAMETER><CREATE_TABLE><item>  METHOD CREATE_TABLE.</item><item>    DATA: lo_struct_descr TYPE REF TO cl_abap_structdescr,</item><item>          lo_table_descr  TYPE REF TO cl_abap_tabledescr,</item><item>          lt_keys         TYPE abap_keydescr_tab,</item><item>          lt_table        TYPE REF TO data,</item><item>          ls_table        TYPE REF TO data.</item><item/><item>    FIELD-SYMBOLS: &lt;ls_data&gt; TYPE any.</item><item>    FIELD-SYMBOLS: &lt;lt_data&gt; TYPE ANY TABLE.</item><item>    TYPES: BEGIN OF ty_s_work,</item><item>             buffer(30000),</item><item>           END OF ty_s_work,</item><item>           ty_t_work TYPE TABLE OF ty_s_work.</item><item/><item>    TRY.</item><item>        lo_struct_descr ?= cl_abap_structdescr=&gt;describe_by_name( iv_field ).</item><item/><item>        CREATE DATA ls_table TYPE HANDLE lo_struct_descr.</item><item>        ASSIGN ls_table-&gt;* TO &lt;ls_data&gt;.</item><item/><item>*      lo_table_descr ?= cl_abap_tabledescr=&gt;create( p_line_type  = lo_struct_descr</item><item>*                                                    p_table_kind = cl_abap_tabledescr=&gt;tablekind_hashed</item><item>*                                                    p_unique     = abap_true</item><item>*                                                    p_key        = lt_keys</item><item>*                                                    p_key_kind   = cl_abap_tabledescr=&gt;keydefkind_default ).</item><item>        lo_table_descr ?= cl_abap_tabledescr=&gt;create( p_line_type  = lo_struct_descr ).</item><item/><item>        CREATE DATA lt_table TYPE HANDLE lo_table_descr.</item><item>        ASSIGN lt_table-&gt;* TO &lt;lt_data&gt;.</item><item/><item>        IF ( NOT iv_value IS INITIAL ).</item><item>          cl_fdt_json=&gt;json_to_data( EXPORTING iv_json = iv_value</item><item>                                     CHANGING  ca_data = &lt;lt_data&gt; ).</item><item>        ENDIF.</item><item/><item>      CATCH cx_root.</item><item>    ENDTRY.</item><item/><item>    rt_data = lt_table.</item><item>  ENDMETHOD.</item></CREATE_TABLE><GET_INTERFACE><item>  METHOD get_interface.</item><item>    IF ( gs_interface IS INITIAL ).</item><item>      cl_fb_function_utility=&gt;meth_get_interface( EXPORTING im_name      = gv_method</item><item>                                                  IMPORTING ex_interface = rs_interface</item><item>                                                  EXCEPTIONS error_occured = 1</item><item>                                                             object_not_existing = 2 ).</item><item>      CASE sy-subrc.</item><item>        WHEN 1.</item><item>          RAISE EXCEPTION TYPE zcx_bc_exception MESSAGE s001(z_bc) WITH &apos;Method ZCL_BC_FUNCYION_MODULE=&gt;CALL&apos;.</item><item>        WHEN 2.</item><item>          RAISE EXCEPTION TYPE zcx_bc_exception MESSAGE s002(z_bc) WITH &apos;Method ZCL_BC_FUNCYION_MODULE=&gt;CALL&apos; gv_method.</item><item>      ENDCASE.</item><item>    ELSE.</item><item>      rs_interface = gs_interface.</item><item>    ENDIF.</item><item>  ENDMETHOD.</item></GET_INTERFACE><GET_RESULTS><item>  METHOD get_results.</item><item>    rs_results = gs_results.</item><item>  ENDMETHOD.</item></GET_RESULTS><CONSTRUCTOR><item>  METHOD constructor.</item><item>    gv_method     = iv_method.</item><item>    gt_parameters = it_parameters.</item><item>    gs_interface = get_interface( ).</item><item>*    gs_results = call( ).</item><item>  ENDMETHOD.</item></CONSTRUCTOR></METHOD_SOURCE></CLASS_ROOT>