<?xml version="1.0"?><CLASS_ROOT><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Webrfc interface</DESCRIPT><UUID>CAAn5KebHtiZ4mxOIvTH/w==</UUID><CATEGORY>00</CATEGORY><EXPOSURE>2</EXPOSURE><STATE>1</STATE><RELEASE>0</RELEASE><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-03</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><CHGDANYON>0000-00-00</CHGDANYON><CLSFINAL>X</CLSFINAL><CLSCCINCL>X</CLSCCINCL><FIXPT>X</FIXPT><UNICODE>X</UNICODE><R3RELEASE>751</R3RELEASE><CLSBCCAT>00</CLSBCCAT><DURATION_TYPE>0</DURATION_TYPE><RISK_LEVEL>0</RISK_LEVEL><ATTRIBUTES><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>GV_METHOD</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><EXPOSURE>0</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-07</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-07-24</CHANGEDON><ATTDECLTYP>0</ATTDECLTYP><ATTVALUE>SPACE</ATTVALUE><ATTEXPVIRT>0</ATTEXPVIRT><TYPTYPE>1</TYPTYPE><TYPE>STRING</TYPE><SRCROW1>0</SRCROW1><SRCCOLUMN1>0</SRCCOLUMN1><SRCROW2>0</SRCROW2><SRCCOLUMN2>0</SRCCOLUMN2><R3RELEASE>751</R3RELEASE><TYPESRC_LENG>0</TYPESRC_LENG></item></ATTRIBUTES><METHODS><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Constructor</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-03</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-06-03</CHANGEDON><MTDTYPE>2</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><MTDNEWEXC>X</MTDNEWEXC><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>CALL</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Call function module and get results</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>2</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-03</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><R3RELEASE>751</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>GET_FUNCTION_INTERFACE</CMPNAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Get function module interface</DESCRIPT><EXPOSURE>2</EXPOSURE><STATE>1</STATE><EDITORDER>3</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-08</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><MTDTYPE>0</MTDTYPE><MTDDECLTYP>0</MTDDECLTYP><R3RELEASE>751</R3RELEASE><BCMTDCAT>00</BCMTDCAT><BCMTDSYN>0</BCMTDSYN></item></METHODS><EVENTS/><TYPES/><PARAMETERS><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>CALL</CMPNAME><SCONAME>RV_ERROR</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><CMPTYPE>1</CMPTYPE><MTDTYPE>0</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-28</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>3</PARDECLTYP><PARPASSTYP>0</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>I</TYPE></item><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><SCONAME>IT_QUERY</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Query Table</DESCRIPT><CMPTYPE>1</CMPTYPE><MTDTYPE>2</MTDTYPE><EDITORDER>1</EDITORDER><DISPID>0</DISPID><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-03</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><PARDECLTYP>0</PARDECLTYP><PARPASSTYP>1</PARPASSTYP><TYPTYPE>1</TYPTYPE><TYPE>RRXW3TQUERY</TYPE></item></PARAMETERS><EXCEPTIONS><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><CMPNAME>CONSTRUCTOR</CMPNAME><SCONAME>ZCX_BC_EXCEPTION</SCONAME><VERSION>1</VERSION><LANGU>E</LANGU><DESCRIPT>Classe eccezione autorizzazione</DESCRIPT><MTDTYPE>2</MTDTYPE><EDITORDER>1</EDITORDER><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-03</CREATEDON><CHANGEDON>0000-00-00</CHANGEDON><IS_RESUMABLE>X</IS_RESUMABLE></item></EXCEPTIONS><IMPLEMENTINGS/><IMPL_DETAILS/><FRIENDSHIPS/><TYPEPUSAGES><item><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><TYPEGROUP>ZWRFC</TYPEGROUP><VERSION>1</VERSION><TPUTYPE>0</TPUTYPE><IMPLICIT>X</IMPLICIT></item></TYPEPUSAGES><CLSDEFERRDS/><INTDEFERRDS/><ALIASES/><INHERITANCE><CLSNAME>ZCL_WRFC_INTERFACE</CLSNAME><REFCLSNAME>ZCL_WRFC_CORE</REFCLSNAME><VERSION>1</VERSION><STATE>1</STATE><AUTHOR>DEVELOPER</AUTHOR><CREATEDON>2018-06-03</CREATEDON><CHANGEDBY>DEVELOPER</CHANGEDBY><CHANGEDON>2018-06-08</CHANGEDON></INHERITANCE><INTERFACES/><REDEFINITIONS/><TYPE_SOURCE/><LOCALS_SRC/><LOCALS_DEF><item>*&quot;* use this source file for any type of declarations (class</item><item>*&quot;* definitions, interfaces or type declarations) you need for</item><item>*&quot;* components in the private section</item><item/></LOCALS_DEF><LOCALS_IMP><item>*&quot;* use this source file for the definition and implementation of</item><item>*&quot;* local helper classes, interface definitions and type</item><item>*&quot;* declarations</item><item/></LOCALS_IMP><LOCALS_MAC><item>*&quot;* use this source file for any macro definitions you need</item><item>*&quot;* in the implementation part of the class</item><item/></LOCALS_MAC><TEXT_POOL/><METHOD_SOURCE><CONSTRUCTOR><item>  METHOD constructor.</item><item>    super-&gt;constructor( it_query = it_query ).</item><item/><item>    TRY.</item><item>        gv_method = gt_query[ name = c_param_method ]-value.</item><item>      CATCH cx_root.</item><item>        MESSAGE s002(z_webrfc) INTO DATA(lv_msg).</item><item>        add_message( iv_type = &apos;E&apos; iv_msg = lv_msg ).</item><item>    ENDTRY.</item><item>  ENDMETHOD.</item></CONSTRUCTOR><CALL><item>  METHOD call.</item><item>    rv_error = 0.</item><item>    TRY.</item><item>        IF ( gv_webrfc_log = &apos;true&apos; ).</item><item>          DATA: lv_logid TYPE zwrfc_logid.</item><item>          zcl_bc_numerator_handler=&gt;get_next( EXPORTING iv_range_nr = &apos;01&apos;</item><item>                                                        iv_object   = &apos;ZWRFC_LOG&apos;</item><item>                                              IMPORTING  ev_number  = lv_logid ).</item><item>          DATA(ls_wrfc_logt) = VALUE zwrfc_logt( mandt       = sy-mandt</item><item>                                                 logid       = lv_logid</item><item>                                                 interface   = &apos;ZCL_WRFC_INTERFACE&apos;</item><item>                                                 method      = gv_method</item><item>                                                 method_type = gv_method_type</item><item>                                                 logdate     = sy-datum</item><item>                                                 logtime     = sy-uzeit</item><item>                                                 bname       = sy-uname</item><item>                                                 webrfc_user = gv_webrfc_user ).</item><item>          INSERT zwrfc_logt FROM ls_wrfc_logt.</item><item>          COMMIT WORK.</item><item>        ENDIF.</item><item>        DATA: lt_fm_parameters TYPE zbc_ty_t_fm_parameters.</item><item>        REFRESH: lt_fm_parameters.</item><item>        LOOP AT gt_query INTO DATA(ls_query).</item><item>          IF ( ls_query-name &lt;&gt; &apos;WEBRFC_PASSWORD&apos; ).</item><item>            DATA(ls_wrfc_logd_in) = VALUE zwrfc_logd( mandt     = sy-mandt</item><item>                                                      logid     = lv_logid</item><item>                                                      logcount  = sy-tabix</item><item>                                                      direction = &apos;I&apos;</item><item>                                                      name      = ls_query-name</item><item>                                                      value     = ls_query-value ).</item><item>            INSERT zwrfc_logd FROM ls_wrfc_logd_in.</item><item>            COMMIT WORK.</item><item>          ENDIF.</item><item>          DATA: ls_fm_parameters TYPE zbc_ty_s_fm_parameters.</item><item>          MOVE-CORRESPONDING ls_query TO ls_fm_parameters.</item><item>          APPEND ls_fm_parameters TO lt_fm_parameters.</item><item>        ENDLOOP.</item><item>        IF ( gv_webrfc_login = &apos;true&apos; ).</item><item>          DATA(lv_password) = cl_http_utility=&gt;decode_base64( CONV string( gv_webrfc_password ) ).</item><item>          zcl_wrfc_user=&gt;login( iv_user     = CONV string( gv_webrfc_user )</item><item>                                iv_password = CONV string( lv_password ) ).</item><item>        ENDIF.</item><item>        DATA: lv_name  TYPE eu_lname.</item><item>*        lv_name = gt_query[ name = c_param_method ]-value.</item><item>        lv_name = gv_method.</item><item>        DATA(lo_function) = NEW zcl_bc_function_module( iv_method     = lv_name</item><item>                                                        it_parameters = lt_fm_parameters ).</item><item>        DATA(ls_results) = lo_function-&gt;call( ).</item><item/><item>        DATA(lo_json) = NEW zcl_bc_json( ).</item><item>        lo_json-&gt;add( iv_name  = &apos;ABC&apos;</item><item>                      iv_value = ls_results ).</item><item/><item>        DATA(lo_jsonp) = NEW zcl_wrfc_jsonp( iv_callback    = gv_callback</item><item>                                             io_function    = lo_function</item><item>                                             is_results     = ls_results</item><item>                                             it_fields      = gt_fields</item><item>                                             it_messages    = gt_messages[]</item><item>                                             iv_from_rec    = gv_from_rec</item><item>                                             iv_to_rec      = gv_to_rec</item><item>                                             iv_camel_case  = gv_camel_case</item><item>                                             iv_escape_url  = gv_escape_url</item><item>                                             iv_webrfc_user = gv_webrfc_user</item><item>                                             iv_webrfc_log  = gv_webrfc_log ).</item><item>        lo_jsonp-&gt;build( ).</item><item>        gt_html[] = lo_jsonp-&gt;get_json_table( ).</item><item>        gv_json = lo_jsonp-&gt;get_json_string( ).</item><item>        DATA(lv_jsonpp) = lo_jsonp-&gt;get_json_string( ).</item><item/><item>        DATA(ls_wrfc_logd_out) = VALUE zwrfc_logd( mandt     = sy-mandt</item><item>                                                   logid     = lv_logid</item><item>                                                   logcount  = 1</item><item>                                                   direction = &apos;O&apos;</item><item>                                                   name      = &apos;JSON&apos;</item><item>                                                   value     = lo_jsonp-&gt;get_json_string( ) ).</item><item>        INSERT zwrfc_logd FROM ls_wrfc_logd_out.</item><item>        COMMIT WORK.</item><item>      CATCH zcx_bc_exception INTO DATA(lx_exception).</item><item>        ls_wrfc_logt-msgtype = &apos;E&apos;.</item><item>        ls_wrfc_logt-message = lx_exception-&gt;get_text( ).</item><item>        MODIFY zwrfc_logt FROM ls_wrfc_logt.</item><item/><item>        add_message( iv_type = &apos;E&apos; iv_msg = lx_exception-&gt;get_text( ) ).</item><item/><item>        DATA(lo_jsonp_err) = NEW zcl_wrfc_jsonp( iv_callback   = gv_callback</item><item>                                                 io_function   = lo_function</item><item>                                                 is_results    = ls_results</item><item>                                                 it_fields     = gt_fields</item><item>                                                 it_messages   = gt_messages[]</item><item>                                                 iv_from_rec   = gv_from_rec</item><item>                                                 iv_to_rec     = gv_to_rec</item><item>                                                 iv_camel_case = gv_camel_case</item><item>                                                 iv_escape_url = gv_escape_url ).</item><item>        lo_jsonp_err-&gt;build_errors( ).</item><item>        gt_html[] = lo_jsonp_err-&gt;get_json_table( ).</item><item>        DATA(lv_jsonp) = lo_jsonp_err-&gt;get_json_string( ).</item><item>        rv_error = 1.</item><item/><item>        ls_wrfc_logd_out = VALUE zwrfc_logd( mandt     = sy-mandt</item><item>                                 logid     = lv_logid</item><item>                                 logcount  = 1</item><item>                                 direction = &apos;O&apos;</item><item>                                 name      = &apos;JSON&apos;</item><item>                                 value     = lo_jsonp_err-&gt;get_json_string( ) ).</item><item>        INSERT zwrfc_logd FROM ls_wrfc_logd_out.</item><item>        COMMIT WORK.</item><item>    ENDTRY.</item><item>  ENDMETHOD.</item></CALL><GET_FUNCTION_INTERFACE><item>  METHOD get_function_interface.</item><item>    TRY.</item><item>        DATA: lt_fm_parameters TYPE zbc_ty_t_fm_parameters.</item><item>        REFRESH: lt_fm_parameters.</item><item>        LOOP AT gt_query INTO DATA(ls_query).</item><item>          DATA: ls_fm_parameters TYPE zbc_ty_s_fm_parameters.</item><item>          MOVE-CORRESPONDING ls_query TO ls_fm_parameters.</item><item>          APPEND ls_fm_parameters TO lt_fm_parameters.</item><item>        ENDLOOP.</item><item>        DATA: lv_name  TYPE eu_lname.</item><item>*        lv_name = gt_query[ name = c_param_method ]-value.</item><item>        lv_name = gv_method.</item><item>        DATA(lo_function) = NEW zcl_bc_function_module( iv_method     = lv_name</item><item>                                                        it_parameters = lt_fm_parameters ).</item><item>        DATA: ls_results TYPE zbc_ty_s_fm_results.</item><item>        CLEAR: ls_results.</item><item/><item>        DATA(lo_jsonp) = NEW zcl_wrfc_jsonp( iv_callback = gv_callback</item><item>                                             io_function = lo_function</item><item>                                             is_results  = ls_results</item><item>                                             it_fields   = gt_fields</item><item>                                             it_messages = gt_messages[]</item><item>                                             iv_from_rec = gv_from_rec</item><item>                                             iv_to_rec   = gv_to_rec</item><item>                                             iv_camel_case = gv_camel_case</item><item>                                             iv_escape_url = gv_escape_url ).</item><item>        lo_jsonp-&gt;build_interface( ).</item><item>        gt_html[] = lo_jsonp-&gt;get_json_table( ).</item><item>        DATA(lv_jsonpp) = lo_jsonp-&gt;get_json_string( ).</item><item/><item>      CATCH zcx_bc_exception INTO DATA(lx_exception).</item><item>        add_message( iv_type = &apos;E&apos; iv_msg = lx_exception-&gt;get_text( ) ).</item><item/><item>        DATA(lo_jsonp_err) = NEW zcl_wrfc_jsonp( iv_callback = gv_callback</item><item>                                                 io_function = lo_function</item><item>                                                 is_results  = ls_results</item><item>                                                 it_fields   = gt_fields</item><item>                                                 it_messages = gt_messages[]</item><item>                                                 iv_from_rec = gv_from_rec</item><item>                                                 iv_to_rec   = gv_to_rec</item><item>                                                 iv_camel_case = gv_camel_case</item><item>                                                 iv_escape_url = gv_escape_url ).</item><item>        lo_jsonp_err-&gt;build_errors( ).</item><item>        gt_html[] = lo_jsonp_err-&gt;get_json_table( ).</item><item>        DATA(lv_jsonp) = lo_jsonp_err-&gt;get_json_string( ).</item><item/><item>    ENDTRY.</item><item>  ENDMETHOD.</item></GET_FUNCTION_INTERFACE></METHOD_SOURCE></CLASS_ROOT>